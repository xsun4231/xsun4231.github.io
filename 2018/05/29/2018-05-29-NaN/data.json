{"title":"Java 中的NaN","date":"2018-05-28T15:00:00.000Z","source":"_posts/2018-05-29-NaN.md","raw":"---\ntitle: Java 中的NaN\ndate: 2018-05-29\ntags: \n    - Java\n---\n## 介绍\n在学习JavaScript时看到了Number类型中的NaN和Infinity，因为概念本身是通用的，所以趁机总结了一下Java中的NaN和Infinity。\n\n## 基本\nJava的Float型和Double型各有三个很特别的常量：NaN(非数），POSITIVE_INFINITY(正无穷)，NEGATIVE_INFINITY(负无穷)\n\n**Float**\n```Java\n    /**\n     * A constant holding the positive infinity of type\n     * {@code float}. It is equal to the value returned by\n     * {@code Float.intBitsToFloat(0x7f800000)}.\n     */\n    public static final float POSITIVE_INFINITY = 1.0f / 0.0f;\n\n    /**\n     * A constant holding the negative infinity of type\n     * {@code float}. It is equal to the value returned by\n     * {@code Float.intBitsToFloat(0xff800000)}.\n     */\n    public static final float NEGATIVE_INFINITY = -1.0f / 0.0f;\n\n    /**\n     * A constant holding a Not-a-Number (NaN) value of type\n     * {@code float}.  It is equivalent to the value returned by\n     * {@code Float.intBitsToFloat(0x7fc00000)}.\n     */\n    public static final float NaN = 0.0f / 0.0f;\n```\n**Double**\n```Java\n    /**\n     * A constant holding the positive infinity of type\n     * {@code double}. It is equal to the value returned by\n     * {@code Double.longBitsToDouble(0x7ff0000000000000L)}.\n     */\n    public static final double POSITIVE_INFINITY = 1.0 / 0.0;\n\n    /**\n     * A constant holding the negative infinity of type\n     * {@code double}. It is equal to the value returned by\n     * {@code Double.longBitsToDouble(0xfff0000000000000L)}.\n     */\n    public static final double NEGATIVE_INFINITY = -1.0 / 0.0;\n\n    /**\n     * A constant holding a Not-a-Number (NaN) value of type\n     * {@code double}. It is equivalent to the value returned by\n     * {@code Double.longBitsToDouble(0x7ff8000000000000L)}.\n     */\n    public static final double NaN = 0.0d / 0.0;\n```\n## NaN\nNaN是`Not a Number`的缩写，表示未定义或者不可表示的值，NaN有一个特性，那就是它与任何数都不相等，包括它自己。判断一个数是不是NaN，**只能**使用Float或者Double的`isNaN()`方法，那么这个方法是怎么判断的呢？我们看一看(查看的是Float版，Double除了参数类型都一样，下面二者没有区别的部分都直接使用Float的内容来说明)：\n```Java\n    /**\n     * Returns {@code true} if the specified number is a\n     * Not-a-Number (NaN) value, {@code false} otherwise.\n     *\n     * @param   v   the value to be tested.\n     * @return  {@code true} if the argument is NaN;\n     *          {@code false} otherwise.\n     */\n    public static boolean isNaN(float v) {\n        return (v != v);\n    }\n```\n所以，跟自己不相等的数字，就是NaN.\n### 计算中产生的NaN\n什么时候会产生NaN呢？首先，任何与NaN进行的运算，其结果都是NaN.比如下面的运算，不要去想太多，结果就是`NaN`\n```Java\npublic class Test {\n\tpublic static void main(String[] args) {\n\t\tvar x = Float.NaN;\n\t\tvar y = x - x + 1;\n\t\tSystem.out.println(y);\n\t}\n}\n```\n其次，从数学角度讲，无法进行的运算(`N/0`)或者会产生复数的运算(`sqrt(-N)`)，都会产生NaN。\n\n(咕咕咕，后面的笔记被鸽了)\n","slug":"2018-05-29-NaN","published":true,"updated":"2025-01-31T15:39:12.832Z","_id":"cm6m2r3wm0009zg9d6xit1yrz","comments":true,"layout":"post","photos":[],"html":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>在学习JavaScript时看到了Number类型中的NaN和Infinity，因为概念本身是通用的，所以趁机总结了一下Java中的NaN和Infinity。</p>\n<h2 id=\"基本\"><a href=\"#基本\" class=\"headerlink\" title=\"基本\"></a>基本</h2><p>Java的Float型和Double型各有三个很特别的常量：NaN(非数），POSITIVE_INFINITY(正无穷)，NEGATIVE_INFINITY(负无穷)</p>\n<p><strong>Float</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A constant holding the positive infinity of type</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@code</span> float&#125;. It is equal to the value returned by</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@code</span> Float.intBitsToFloat(0x7f800000)&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">float</span> <span class=\"variable\">POSITIVE_INFINITY</span> <span class=\"operator\">=</span> <span class=\"number\">1.0f</span> / <span class=\"number\">0.0f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A constant holding the negative infinity of type</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@code</span> float&#125;. It is equal to the value returned by</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@code</span> Float.intBitsToFloat(0xff800000)&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">float</span> <span class=\"variable\">NEGATIVE_INFINITY</span> <span class=\"operator\">=</span> -<span class=\"number\">1.0f</span> / <span class=\"number\">0.0f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A constant holding a Not-a-Number (NaN) value of type</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@code</span> float&#125;.  It is equivalent to the value returned by</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@code</span> Float.intBitsToFloat(0x7fc00000)&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">float</span> <span class=\"variable\">NaN</span> <span class=\"operator\">=</span> <span class=\"number\">0.0f</span> / <span class=\"number\">0.0f</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>Double</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A constant holding the positive infinity of type</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@code</span> double&#125;. It is equal to the value returned by</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@code</span> Double.longBitsToDouble(0x7ff0000000000000L)&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">double</span> <span class=\"variable\">POSITIVE_INFINITY</span> <span class=\"operator\">=</span> <span class=\"number\">1.0</span> / <span class=\"number\">0.0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A constant holding the negative infinity of type</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@code</span> double&#125;. It is equal to the value returned by</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@code</span> Double.longBitsToDouble(0xfff0000000000000L)&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">double</span> <span class=\"variable\">NEGATIVE_INFINITY</span> <span class=\"operator\">=</span> -<span class=\"number\">1.0</span> / <span class=\"number\">0.0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A constant holding a Not-a-Number (NaN) value of type</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@code</span> double&#125;. It is equivalent to the value returned by</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@code</span> Double.longBitsToDouble(0x7ff8000000000000L)&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">double</span> <span class=\"variable\">NaN</span> <span class=\"operator\">=</span> <span class=\"number\">0.0d</span> / <span class=\"number\">0.0</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"NaN\"><a href=\"#NaN\" class=\"headerlink\" title=\"NaN\"></a>NaN</h2><p>NaN是<code>Not a Number</code>的缩写，表示未定义或者不可表示的值，NaN有一个特性，那就是它与任何数都不相等，包括它自己。判断一个数是不是NaN，<strong>只能</strong>使用Float或者Double的<code>isNaN()</code>方法，那么这个方法是怎么判断的呢？我们看一看(查看的是Float版，Double除了参数类型都一样，下面二者没有区别的部分都直接使用Float的内容来说明)：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Returns &#123;<span class=\"doctag\">@code</span> true&#125; if the specified number is a</span></span><br><span class=\"line\"><span class=\"comment\"> * Not-a-Number (NaN) value, &#123;<span class=\"doctag\">@code</span> false&#125; otherwise.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>   v   the value to be tested.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span>  &#123;<span class=\"doctag\">@code</span> true&#125; if the argument is NaN;</span></span><br><span class=\"line\"><span class=\"comment\"> *          &#123;<span class=\"doctag\">@code</span> false&#125; otherwise.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isNaN</span><span class=\"params\">(<span class=\"type\">float</span> v)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (v != v);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以，跟自己不相等的数字，就是NaN.</p>\n<h3 id=\"计算中产生的NaN\"><a href=\"#计算中产生的NaN\" class=\"headerlink\" title=\"计算中产生的NaN\"></a>计算中产生的NaN</h3><p>什么时候会产生NaN呢？首先，任何与NaN进行的运算，其结果都是NaN.比如下面的运算，不要去想太多，结果就是<code>NaN</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">var</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> Float.NaN;</span><br><span class=\"line\">\t\t<span class=\"type\">var</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> x - x + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tSystem.out.println(y);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其次，从数学角度讲，无法进行的运算(<code>N/0</code>)或者会产生复数的运算(<code>sqrt(-N)</code>)，都会产生NaN。</p>\n<p>(咕咕咕，后面的笔记被鸽了)</p>\n","excerpt":"","more":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>在学习JavaScript时看到了Number类型中的NaN和Infinity，因为概念本身是通用的，所以趁机总结了一下Java中的NaN和Infinity。</p>\n<h2 id=\"基本\"><a href=\"#基本\" class=\"headerlink\" title=\"基本\"></a>基本</h2><p>Java的Float型和Double型各有三个很特别的常量：NaN(非数），POSITIVE_INFINITY(正无穷)，NEGATIVE_INFINITY(负无穷)</p>\n<p><strong>Float</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A constant holding the positive infinity of type</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@code</span> float&#125;. It is equal to the value returned by</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@code</span> Float.intBitsToFloat(0x7f800000)&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">float</span> <span class=\"variable\">POSITIVE_INFINITY</span> <span class=\"operator\">=</span> <span class=\"number\">1.0f</span> / <span class=\"number\">0.0f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A constant holding the negative infinity of type</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@code</span> float&#125;. It is equal to the value returned by</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@code</span> Float.intBitsToFloat(0xff800000)&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">float</span> <span class=\"variable\">NEGATIVE_INFINITY</span> <span class=\"operator\">=</span> -<span class=\"number\">1.0f</span> / <span class=\"number\">0.0f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A constant holding a Not-a-Number (NaN) value of type</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@code</span> float&#125;.  It is equivalent to the value returned by</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@code</span> Float.intBitsToFloat(0x7fc00000)&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">float</span> <span class=\"variable\">NaN</span> <span class=\"operator\">=</span> <span class=\"number\">0.0f</span> / <span class=\"number\">0.0f</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>Double</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A constant holding the positive infinity of type</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@code</span> double&#125;. It is equal to the value returned by</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@code</span> Double.longBitsToDouble(0x7ff0000000000000L)&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">double</span> <span class=\"variable\">POSITIVE_INFINITY</span> <span class=\"operator\">=</span> <span class=\"number\">1.0</span> / <span class=\"number\">0.0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A constant holding the negative infinity of type</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@code</span> double&#125;. It is equal to the value returned by</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@code</span> Double.longBitsToDouble(0xfff0000000000000L)&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">double</span> <span class=\"variable\">NEGATIVE_INFINITY</span> <span class=\"operator\">=</span> -<span class=\"number\">1.0</span> / <span class=\"number\">0.0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A constant holding a Not-a-Number (NaN) value of type</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@code</span> double&#125;. It is equivalent to the value returned by</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@code</span> Double.longBitsToDouble(0x7ff8000000000000L)&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">double</span> <span class=\"variable\">NaN</span> <span class=\"operator\">=</span> <span class=\"number\">0.0d</span> / <span class=\"number\">0.0</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"NaN\"><a href=\"#NaN\" class=\"headerlink\" title=\"NaN\"></a>NaN</h2><p>NaN是<code>Not a Number</code>的缩写，表示未定义或者不可表示的值，NaN有一个特性，那就是它与任何数都不相等，包括它自己。判断一个数是不是NaN，<strong>只能</strong>使用Float或者Double的<code>isNaN()</code>方法，那么这个方法是怎么判断的呢？我们看一看(查看的是Float版，Double除了参数类型都一样，下面二者没有区别的部分都直接使用Float的内容来说明)：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Returns &#123;<span class=\"doctag\">@code</span> true&#125; if the specified number is a</span></span><br><span class=\"line\"><span class=\"comment\"> * Not-a-Number (NaN) value, &#123;<span class=\"doctag\">@code</span> false&#125; otherwise.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>   v   the value to be tested.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span>  &#123;<span class=\"doctag\">@code</span> true&#125; if the argument is NaN;</span></span><br><span class=\"line\"><span class=\"comment\"> *          &#123;<span class=\"doctag\">@code</span> false&#125; otherwise.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isNaN</span><span class=\"params\">(<span class=\"type\">float</span> v)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (v != v);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以，跟自己不相等的数字，就是NaN.</p>\n<h3 id=\"计算中产生的NaN\"><a href=\"#计算中产生的NaN\" class=\"headerlink\" title=\"计算中产生的NaN\"></a>计算中产生的NaN</h3><p>什么时候会产生NaN呢？首先，任何与NaN进行的运算，其结果都是NaN.比如下面的运算，不要去想太多，结果就是<code>NaN</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">var</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> Float.NaN;</span><br><span class=\"line\">\t\t<span class=\"type\">var</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> x - x + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tSystem.out.println(y);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其次，从数学角度讲，无法进行的运算(<code>N/0</code>)或者会产生复数的运算(<code>sqrt(-N)</code>)，都会产生NaN。</p>\n<p>(咕咕咕，后面的笔记被鸽了)</p>\n","path":"2018/05/29/2018-05-29-NaN/","permalink":"https://xsun4231.github.io/2018/05/29/2018-05-29-NaN/","tags":[{"name":"Java","_id":"cm6m2r3wq000qzg9deq8b0ho7","slug":"Java","path":"tags/Java/","permalink":"https://xsun4231.github.io/tags/Java/","length":7}],"categories":[],"prev":{"title":"Immediately_Invoked_Function -- 立即调用函数的写法","date":"2018-06-19T15:00:00.000Z","slug":"2018-06-20-ImmediatelyInvokedFunctionException","published":true,"updated":"2025-01-31T15:39:12.832Z","_id":"cm6m2r3wm000czg9dgtnb47y0","layout":"post","photos":[],"excerpt":"","path":"2018/06/20/2018-06-20-ImmediatelyInvokedFunctionException/","permalink":"https://xsun4231.github.io/2018/06/20/2018-06-20-ImmediatelyInvokedFunctionException/","__post":true},"next":{"title":"JavaScript 基本知识备忘录","date":"2018-04-25T15:00:00.000Z","slug":"2018-04-26-JavaScript","published":true,"updated":"2025-01-31T15:39:12.832Z","_id":"cm6m2r3wl0007zg9d1u6z1ra0","layout":"post","photos":[],"excerpt":"","path":"2018/04/26/2018-04-26-JavaScript/","permalink":"https://xsun4231.github.io/2018/04/26/2018-04-26-JavaScript/","__post":true},"__post":true}