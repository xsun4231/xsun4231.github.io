{"title":"JavaScript 基本知识备忘录","date":"2018-04-25T15:00:00.000Z","source":"_posts/2018-04-26-JavaScript.md","raw":"---\ntitle: JavaScript 基本知识备忘录\ndate: 2018-04-26\ntags:\n  - JavaScript\n---\n\n## 介绍\nJavaScript使用的是ECMA(European Computer Manufacturers Association)的ECMAScript标准,也就是人们常说的ES6,ES7,ES8.而JavaScript本身是网景公司(Netscape)对ES标准的一种实现,JavaScript是该公司的注册商标.(这也是前阵子苹果下架了所有名称里带JavaScript的app的原因)\n> JavaScript 是Brendan Eich用两周写出来的一种语言.所以有点设计缺陷也可以理解,比如`typeof null == \"object\"`\n由于浏览器确定了使用的JavaScript版本,所以写JavaScript程序时,要注意ES版本与浏览器的支持是否匹配.\n\n## 基本\n### 写在哪里\nJavaScript的代码可以直接写在网页html里,也可以单独写在js文件中. \nhtml里的JavaScript代码要写在 `<scrpt>` 标签内,标签的 `type` 属性不需要定义：\n```<html>\n<head>\n  <script>\n    alert('Hello, World!');\n  </script>:\n</head>\n<body>\n  ...\n</body>\n</html>```\n\n我们也可以把```alert('Hello, World!')```单独写在一个js文件中,取个名字`hello.js`,然后把js文件的引用写入html的head中(其实写在body里也能跑)\n```\n<html>\n<head>\n  <script src=\"hello.js\"></script>\n</head>\n<body>\n  ...\n</body>\n</html> \n```\n\n### 简单语法\nJavaScript每个语句以`;`结束,JavaScript的引擎会自动添加,所以这里并不强制要求,不过因为自动添加的`;`有时会造成歧义,所以手动添加还是最保险的.\n\n赋值语句\n```JavaScript\nvar x = 1;\n```\n条件判断\n```JavaScript\nif( 1 > 0 ){\n    x = 1;\n}\n```\n\n> 一般规范：4空格缩进,80字换行\n\n另外跟Java一样,JavaScript的注释写法也是`//`和`/* */`,JavaScript也对大小写敏感.\n\n### 变量\n1. JavaScript是动态语言,变量的声明使用**var**,赋值使用**=**.  \n2. 使用var声明的变量其[作用域](##heading-作用域)都在函数内，而不使用var声明的变量则是全局变量.  \n3. 变量名要求由大小写英文,数字,`$`和`_`组成,不可以用数字开头,也不可以使用JavaScript的关键字作为变量名.\n\n## 数据类型\n\n### 基本型\nJavaScript有五种基本类型：\n* number\n* string\n* boolean\n* undefined\n* null\n\n```JavaScript\ntypeof 1;//\"number\"\ntypeof \"abc\";//\"string\"\ntypeof true;//\"boolean\"\ntypeof undefined;//\"undefined\"\ntypeof null;//\"object\"\n```\n\n#### 数字型 Number\nJavaScript中数字型不区分整数和浮点数,正、负、整数、浮点数、NaN、Infinity都是Number型,可直接进行运算.\n> NaN: Not a Number \n>  \n> Infinity: ∞ 无穷大\n\n#### 字符串\nJavaScript中字符串可以用双引号`\"`,也可以用单引号`'`来表示.\n\n#### 布尔型\nJavaScript中的布尔型由true和false构成,以及 **与,或,取反**的运算都与Java相同.\n\n>JavaScript中进行比较的时候,如果使用`==`,会自动转换类型再进行比较,不转换类型的比较则需使用三个等号`===`.  \n> {% asset_img equals.PNG equals %}\n\n\n> NaN与所有Number都不相等,包括它自己,判断NaN的时候只能使用`isNaN()`.\n> ```JavaScript\n> isNaN(NaN) //true\n>// function isNaN(a){\n>//     return a != a;\n>// }\n> ```\n\n> JavaScript的浮点数在运算时会产生误差,直接进行比较会出现错误结果.这点在Java中也是一样，所以要进行精确比较的时候,不应该使用浮点型.\n> 　\n> {% asset_img float.PNG float %}\n> \n> 可以通过检测误差绝对值来进行比较:\n> ```JavaScript\n> Math.abs(1/3 - (1 - 2/3)) < 0.000001; \\\\true\n> ```\n\n#### 空值和未定义\nJavaScript中类似于Java,也通过**null**来表示空值,空值与长度为零的字符串不同.JavScript同时还定义了一个表示未定义的常量**undefined**.一般在检测参数时可以用到,未输入的参数会被当做**undefined**处理.\n\n### 引用类型\n\n#### 数组 Array\nJavaScript通过`[]`来表示数组,使用`,`来分隔元素.也可以用`new Array(1,2,3);`来定义数组.数组中的元素可以是任意的数据类型,通过索引`arr[index]`来访问.\n\n#### 对象 Object\nJavaScript的对象是由成对的**key-value**组成的无序集合.**key**都是字符串,**value**可以是任意数据类型.\n```JavaScript\nvar person = {\n  name: 'Bob',\n  age: 23,\n  tags: ['person', 'young'],\n  married: false,\n  code: null\n}\n```\n通过以下格式获取对象的属性：\n```JavaScript\nperson.name;// Bob\nperson.age; // 23\n```\n\n\n## 作用域\n传统的编程语言,作用域一般是块级,也就是一个`{}`内是一个作用域,所以在`if else while for`的范围内定义的局部变量不会影响到外面.而JavaScript的作用域是函数级,一个`function`为一个作用域,在函数内部定义的变量,不受函数内部语法块的影响.\n```JavaScript\nvar x = 1; // 1\nif(true){\n  var x = 2; //2\n}\ncondole.log(x); //2\n```\n如果一定要实现块作用域的话,便需要插入函数来起到划分的作用\n```JavaScript\nvar x = 1; //1\nif(true){\n  function print(){\n    var x = 2;//2\n  }\n}\nconsole.log(x);//1\n```\n\n#### 函数作用域提升\n函数声明分为：声明式 和 变量式\n\n声明式会自动将声明放在函数最前面,并执行赋值的内容.\n```JavaScript\nfunction name(){\n\n}\n```\n\n所以下面的函数没有问题\n```JavaScript\ntest(\"test\");\nfunction test(arg){\n  console.log(arg); //test\n}\n```\n\n变量式会将声明提升到函数最前,而后再赋值\n```JavaScript\nvar name = funciton(){\n\n}\n```\n所以下面的代码中,函数被声明之后,还没有赋值,便被执行,会报错.\n```JavaScript\nbaz(\"baz\"); //baz is not a function\nvar baz = function(arg){\n  console.log(arg);\n};\n```\n需要注意的是,变量式声明中的函数,是不会被提升作用域的\n```JavaScript\nvar baz = function spam(arg){\n  if(arg < 5){\n    spam(arg + 1);//只在函数的作用域内有效\n  }else{\n    console.log(arg);\n  }\n};\nbaz(1); //5\nspam(1);//spam is not defined\n```\n\n>> 使用var声明的变量或者函数,要放到其作用域的顶端.\n\n\n[runoob]: http://www.runoob.com/js/js-tutorial.html\n[Liaoxuefeng]: https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000\n","slug":"2018-04-26-JavaScript","published":true,"updated":"2025-01-31T15:39:12.832Z","_id":"cm6m2r3wl0007zg9d1u6z1ra0","comments":true,"layout":"post","photos":[],"html":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>JavaScript使用的是ECMA(European Computer Manufacturers Association)的ECMAScript标准,也就是人们常说的ES6,ES7,ES8.而JavaScript本身是网景公司(Netscape)对ES标准的一种实现,JavaScript是该公司的注册商标.(这也是前阵子苹果下架了所有名称里带JavaScript的app的原因)</p>\n<blockquote>\n<p>JavaScript 是Brendan Eich用两周写出来的一种语言.所以有点设计缺陷也可以理解,比如<code>typeof null == &quot;object&quot;</code><br>由于浏览器确定了使用的JavaScript版本,所以写JavaScript程序时,要注意ES版本与浏览器的支持是否匹配.</p>\n</blockquote>\n<h2 id=\"基本\"><a href=\"#基本\" class=\"headerlink\" title=\"基本\"></a>基本</h2><h3 id=\"写在哪里\"><a href=\"#写在哪里\" class=\"headerlink\" title=\"写在哪里\"></a>写在哪里</h3><p>JavaScript的代码可以直接写在网页html里,也可以单独写在js文件中.<br>html里的JavaScript代码要写在 <code>&lt;scrpt&gt;</code> 标签内,标签的 <code>type</code> 属性不需要定义：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    alert(&#x27;Hello, World!&#x27;);</span><br><span class=\"line\">  &lt;/script&gt;:</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;```</span><br><span class=\"line\"></span><br><span class=\"line\">我们也可以把```alert(&#x27;Hello, World!&#x27;)```单独写在一个js文件中,取个名字`hello.js`,然后把js文件的引用写入html的head中(其实写在body里也能跑)</span><br></pre></td></tr></table></figure>\n<html>\n<head>\n  <script src=\"hello.js\"></script>\n</head>\n<body>\n  ...\n</body>\n</html> \n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 简单语法</span><br><span class=\"line\">JavaScript每个语句以`;`结束,JavaScript的引擎会自动添加,所以这里并不强制要求,不过因为自动添加的`;`有时会造成歧义,所以手动添加还是最保险的.</span><br><span class=\"line\"></span><br><span class=\"line\">赋值语句</span><br><span class=\"line\">```JavaScript</span><br><span class=\"line\">var x = 1;</span><br></pre></td></tr></table></figure>\n条件判断\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>( <span class=\"number\">1</span> &gt; <span class=\"number\">0</span> )&#123;</span><br><span class=\"line\">    x = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>一般规范：4空格缩进,80字换行</p>\n</blockquote>\n<p>另外跟Java一样,JavaScript的注释写法也是<code>//</code>和<code>/* */</code>,JavaScript也对大小写敏感.</p>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><ol>\n<li>JavaScript是动态语言,变量的声明使用<strong>var</strong>,赋值使用**&#x3D;**.  </li>\n<li>使用var声明的变量其<a href=\"##heading-%E4%BD%9C%E7%94%A8%E5%9F%9F\">作用域</a>都在函数内，而不使用var声明的变量则是全局变量.  </li>\n<li>变量名要求由大小写英文,数字,<code>$</code>和<code>_</code>组成,不可以用数字开头,也不可以使用JavaScript的关键字作为变量名.</li>\n</ol>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"基本型\"><a href=\"#基本型\" class=\"headerlink\" title=\"基本型\"></a>基本型</h3><p>JavaScript有五种基本类型：</p>\n<ul>\n<li>number</li>\n<li>string</li>\n<li>boolean</li>\n<li>undefined</li>\n<li>null</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"number\">1</span>;<span class=\"comment\">//&quot;number&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"string\">&quot;abc&quot;</span>;<span class=\"comment\">//&quot;string&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">true</span>;<span class=\"comment\">//&quot;boolean&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span>;<span class=\"comment\">//&quot;undefined&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>;<span class=\"comment\">//&quot;object&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数字型-Number\"><a href=\"#数字型-Number\" class=\"headerlink\" title=\"数字型 Number\"></a>数字型 Number</h4><p>JavaScript中数字型不区分整数和浮点数,正、负、整数、浮点数、NaN、Infinity都是Number型,可直接进行运算.</p>\n<blockquote>\n<p>NaN: Not a Number </p>\n<p>Infinity: ∞ 无穷大</p>\n</blockquote>\n<h4 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h4><p>JavaScript中字符串可以用双引号<code>&quot;</code>,也可以用单引号<code>&#39;</code>来表示.</p>\n<h4 id=\"布尔型\"><a href=\"#布尔型\" class=\"headerlink\" title=\"布尔型\"></a>布尔型</h4><p>JavaScript中的布尔型由true和false构成,以及 <strong>与,或,取反</strong>的运算都与Java相同.</p>\n<blockquote>\n<p>JavaScript中进行比较的时候,如果使用<code>==</code>,会自动转换类型再进行比较,不转换类型的比较则需使用三个等号<code>===</code>.  </p>\n</blockquote>\n<blockquote>\n<p>NaN与所有Number都不相等,包括它自己,判断NaN的时候只能使用<code>isNaN()</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"title class_\">NaN</span>) <span class=\"comment\">//true</span></span><br><span class=\"line\">&gt;<span class=\"comment\">// function isNaN(a)&#123;</span></span><br><span class=\"line\">&gt;<span class=\"comment\">//     return a != a;</span></span><br><span class=\"line\">&gt;<span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure></blockquote>\n<blockquote>\n<p>JavaScript的浮点数在运算时会产生误差,直接进行比较会出现错误结果.这点在Java中也是一样，所以要进行精确比较的时候,不应该使用浮点型.\n　</p>\n\n\n<p>可以通过检测误差绝对值来进行比较:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(<span class=\"number\">1</span>/<span class=\"number\">3</span> - (<span class=\"number\">1</span> - <span class=\"number\">2</span>/<span class=\"number\">3</span>)) &lt; <span class=\"number\">0.000001</span>; \\\\<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></blockquote>\n<h4 id=\"空值和未定义\"><a href=\"#空值和未定义\" class=\"headerlink\" title=\"空值和未定义\"></a>空值和未定义</h4><p>JavaScript中类似于Java,也通过<strong>null</strong>来表示空值,空值与长度为零的字符串不同.JavScript同时还定义了一个表示未定义的常量<strong>undefined</strong>.一般在检测参数时可以用到,未输入的参数会被当做<strong>undefined</strong>处理.</p>\n<h3 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h3><h4 id=\"数组-Array\"><a href=\"#数组-Array\" class=\"headerlink\" title=\"数组 Array\"></a>数组 Array</h4><p>JavaScript通过<code>[]</code>来表示数组,使用<code>,</code>来分隔元素.也可以用<code>new Array(1,2,3);</code>来定义数组.数组中的元素可以是任意的数据类型,通过索引<code>arr[index]</code>来访问.</p>\n<h4 id=\"对象-Object\"><a href=\"#对象-Object\" class=\"headerlink\" title=\"对象 Object\"></a>对象 Object</h4><p>JavaScript的对象是由成对的<strong>key-value</strong>组成的无序集合.<strong>key</strong>都是字符串,<strong>value</strong>可以是任意数据类型.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Bob&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">23</span>,</span><br><span class=\"line\">  <span class=\"attr\">tags</span>: [<span class=\"string\">&#x27;person&#x27;</span>, <span class=\"string\">&#x27;young&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">married</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">code</span>: <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过以下格式获取对象的属性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person.<span class=\"property\">name</span>;<span class=\"comment\">// Bob</span></span><br><span class=\"line\">person.<span class=\"property\">age</span>; <span class=\"comment\">// 23</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><p>传统的编程语言,作用域一般是块级,也就是一个<code>&#123;&#125;</code>内是一个作用域,所以在<code>if else while for</code>的范围内定义的局部变量不会影响到外面.而JavaScript的作用域是函数级,一个<code>function</code>为一个作用域,在函数内部定义的变量,不受函数内部语法块的影响.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>; <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> x = <span class=\"number\">2</span>; <span class=\"comment\">//2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">condole.<span class=\"title function_\">log</span>(x); <span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n<p>如果一定要实现块作用域的话,便需要插入函数来起到划分的作用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>; <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">print</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">2</span>;<span class=\"comment\">//2</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x);<span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"函数作用域提升\"><a href=\"#函数作用域提升\" class=\"headerlink\" title=\"函数作用域提升\"></a>函数作用域提升</h4><p>函数声明分为：声明式 和 变量式</p>\n<p>声明式会自动将声明放在函数最前面,并执行赋值的内容.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">name</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以下面的函数没有问题</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">test</span>(<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\">arg</span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arg); <span class=\"comment\">//test</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>变量式会将声明提升到函数最前,而后再赋值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"title function_\">funciton</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以下面的代码中,函数被声明之后,还没有赋值,便被执行,会报错.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">baz</span>(<span class=\"string\">&quot;baz&quot;</span>); <span class=\"comment\">//baz is not a function</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> baz = <span class=\"keyword\">function</span>(<span class=\"params\">arg</span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arg);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>需要注意的是,变量式声明中的函数,是不会被提升作用域的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> baz = <span class=\"keyword\">function</span> <span class=\"title function_\">spam</span>(<span class=\"params\">arg</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(arg &lt; <span class=\"number\">5</span>)&#123;</span><br><span class=\"line\">    <span class=\"title function_\">spam</span>(arg + <span class=\"number\">1</span>);<span class=\"comment\">//只在函数的作用域内有效</span></span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arg);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"title function_\">baz</span>(<span class=\"number\">1</span>); <span class=\"comment\">//5</span></span><br><span class=\"line\"><span class=\"title function_\">spam</span>(<span class=\"number\">1</span>);<span class=\"comment\">//spam is not defined</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<blockquote>\n<p>使用var声明的变量或者函数,要放到其作用域的顶端.</p>\n</blockquote>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>JavaScript使用的是ECMA(European Computer Manufacturers Association)的ECMAScript标准,也就是人们常说的ES6,ES7,ES8.而JavaScript本身是网景公司(Netscape)对ES标准的一种实现,JavaScript是该公司的注册商标.(这也是前阵子苹果下架了所有名称里带JavaScript的app的原因)</p>\n<blockquote>\n<p>JavaScript 是Brendan Eich用两周写出来的一种语言.所以有点设计缺陷也可以理解,比如<code>typeof null == &quot;object&quot;</code><br>由于浏览器确定了使用的JavaScript版本,所以写JavaScript程序时,要注意ES版本与浏览器的支持是否匹配.</p>\n</blockquote>\n<h2 id=\"基本\"><a href=\"#基本\" class=\"headerlink\" title=\"基本\"></a>基本</h2><h3 id=\"写在哪里\"><a href=\"#写在哪里\" class=\"headerlink\" title=\"写在哪里\"></a>写在哪里</h3><p>JavaScript的代码可以直接写在网页html里,也可以单独写在js文件中.<br>html里的JavaScript代码要写在 <code>&lt;scrpt&gt;</code> 标签内,标签的 <code>type</code> 属性不需要定义：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    alert(&#x27;Hello, World!&#x27;);</span><br><span class=\"line\">  &lt;/script&gt;:</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;```</span><br><span class=\"line\"></span><br><span class=\"line\">我们也可以把```alert(&#x27;Hello, World!&#x27;)```单独写在一个js文件中,取个名字`hello.js`,然后把js文件的引用写入html的head中(其实写在body里也能跑)</span><br></pre></td></tr></table></figure>\n<html>\n<head>\n  <script src=\"hello.js\"></script>\n</head>\n<body>\n  ...\n</body>\n</html> \n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 简单语法</span><br><span class=\"line\">JavaScript每个语句以`;`结束,JavaScript的引擎会自动添加,所以这里并不强制要求,不过因为自动添加的`;`有时会造成歧义,所以手动添加还是最保险的.</span><br><span class=\"line\"></span><br><span class=\"line\">赋值语句</span><br><span class=\"line\">```JavaScript</span><br><span class=\"line\">var x = 1;</span><br></pre></td></tr></table></figure>\n条件判断\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>( <span class=\"number\">1</span> &gt; <span class=\"number\">0</span> )&#123;</span><br><span class=\"line\">    x = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>一般规范：4空格缩进,80字换行</p>\n</blockquote>\n<p>另外跟Java一样,JavaScript的注释写法也是<code>//</code>和<code>/* */</code>,JavaScript也对大小写敏感.</p>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><ol>\n<li>JavaScript是动态语言,变量的声明使用<strong>var</strong>,赋值使用**&#x3D;**.  </li>\n<li>使用var声明的变量其<a href=\"##heading-%E4%BD%9C%E7%94%A8%E5%9F%9F\">作用域</a>都在函数内，而不使用var声明的变量则是全局变量.  </li>\n<li>变量名要求由大小写英文,数字,<code>$</code>和<code>_</code>组成,不可以用数字开头,也不可以使用JavaScript的关键字作为变量名.</li>\n</ol>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"基本型\"><a href=\"#基本型\" class=\"headerlink\" title=\"基本型\"></a>基本型</h3><p>JavaScript有五种基本类型：</p>\n<ul>\n<li>number</li>\n<li>string</li>\n<li>boolean</li>\n<li>undefined</li>\n<li>null</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"number\">1</span>;<span class=\"comment\">//&quot;number&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"string\">&quot;abc&quot;</span>;<span class=\"comment\">//&quot;string&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">true</span>;<span class=\"comment\">//&quot;boolean&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span>;<span class=\"comment\">//&quot;undefined&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>;<span class=\"comment\">//&quot;object&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数字型-Number\"><a href=\"#数字型-Number\" class=\"headerlink\" title=\"数字型 Number\"></a>数字型 Number</h4><p>JavaScript中数字型不区分整数和浮点数,正、负、整数、浮点数、NaN、Infinity都是Number型,可直接进行运算.</p>\n<blockquote>\n<p>NaN: Not a Number </p>\n<p>Infinity: ∞ 无穷大</p>\n</blockquote>\n<h4 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h4><p>JavaScript中字符串可以用双引号<code>&quot;</code>,也可以用单引号<code>&#39;</code>来表示.</p>\n<h4 id=\"布尔型\"><a href=\"#布尔型\" class=\"headerlink\" title=\"布尔型\"></a>布尔型</h4><p>JavaScript中的布尔型由true和false构成,以及 <strong>与,或,取反</strong>的运算都与Java相同.</p>\n<blockquote>\n<p>JavaScript中进行比较的时候,如果使用<code>==</code>,会自动转换类型再进行比较,不转换类型的比较则需使用三个等号<code>===</code>.  </p>\n</blockquote>\n<blockquote>\n<p>NaN与所有Number都不相等,包括它自己,判断NaN的时候只能使用<code>isNaN()</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"title class_\">NaN</span>) <span class=\"comment\">//true</span></span><br><span class=\"line\">&gt;<span class=\"comment\">// function isNaN(a)&#123;</span></span><br><span class=\"line\">&gt;<span class=\"comment\">//     return a != a;</span></span><br><span class=\"line\">&gt;<span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure></blockquote>\n<blockquote>\n<p>JavaScript的浮点数在运算时会产生误差,直接进行比较会出现错误结果.这点在Java中也是一样，所以要进行精确比较的时候,不应该使用浮点型.\n　</p>\n\n\n<p>可以通过检测误差绝对值来进行比较:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(<span class=\"number\">1</span>/<span class=\"number\">3</span> - (<span class=\"number\">1</span> - <span class=\"number\">2</span>/<span class=\"number\">3</span>)) &lt; <span class=\"number\">0.000001</span>; \\\\<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></blockquote>\n<h4 id=\"空值和未定义\"><a href=\"#空值和未定义\" class=\"headerlink\" title=\"空值和未定义\"></a>空值和未定义</h4><p>JavaScript中类似于Java,也通过<strong>null</strong>来表示空值,空值与长度为零的字符串不同.JavScript同时还定义了一个表示未定义的常量<strong>undefined</strong>.一般在检测参数时可以用到,未输入的参数会被当做<strong>undefined</strong>处理.</p>\n<h3 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h3><h4 id=\"数组-Array\"><a href=\"#数组-Array\" class=\"headerlink\" title=\"数组 Array\"></a>数组 Array</h4><p>JavaScript通过<code>[]</code>来表示数组,使用<code>,</code>来分隔元素.也可以用<code>new Array(1,2,3);</code>来定义数组.数组中的元素可以是任意的数据类型,通过索引<code>arr[index]</code>来访问.</p>\n<h4 id=\"对象-Object\"><a href=\"#对象-Object\" class=\"headerlink\" title=\"对象 Object\"></a>对象 Object</h4><p>JavaScript的对象是由成对的<strong>key-value</strong>组成的无序集合.<strong>key</strong>都是字符串,<strong>value</strong>可以是任意数据类型.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Bob&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">23</span>,</span><br><span class=\"line\">  <span class=\"attr\">tags</span>: [<span class=\"string\">&#x27;person&#x27;</span>, <span class=\"string\">&#x27;young&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">married</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">code</span>: <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过以下格式获取对象的属性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person.<span class=\"property\">name</span>;<span class=\"comment\">// Bob</span></span><br><span class=\"line\">person.<span class=\"property\">age</span>; <span class=\"comment\">// 23</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><p>传统的编程语言,作用域一般是块级,也就是一个<code>&#123;&#125;</code>内是一个作用域,所以在<code>if else while for</code>的范围内定义的局部变量不会影响到外面.而JavaScript的作用域是函数级,一个<code>function</code>为一个作用域,在函数内部定义的变量,不受函数内部语法块的影响.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>; <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> x = <span class=\"number\">2</span>; <span class=\"comment\">//2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">condole.<span class=\"title function_\">log</span>(x); <span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n<p>如果一定要实现块作用域的话,便需要插入函数来起到划分的作用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>; <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">print</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">2</span>;<span class=\"comment\">//2</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x);<span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"函数作用域提升\"><a href=\"#函数作用域提升\" class=\"headerlink\" title=\"函数作用域提升\"></a>函数作用域提升</h4><p>函数声明分为：声明式 和 变量式</p>\n<p>声明式会自动将声明放在函数最前面,并执行赋值的内容.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">name</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以下面的函数没有问题</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">test</span>(<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\">arg</span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arg); <span class=\"comment\">//test</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>变量式会将声明提升到函数最前,而后再赋值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"title function_\">funciton</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以下面的代码中,函数被声明之后,还没有赋值,便被执行,会报错.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">baz</span>(<span class=\"string\">&quot;baz&quot;</span>); <span class=\"comment\">//baz is not a function</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> baz = <span class=\"keyword\">function</span>(<span class=\"params\">arg</span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arg);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>需要注意的是,变量式声明中的函数,是不会被提升作用域的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> baz = <span class=\"keyword\">function</span> <span class=\"title function_\">spam</span>(<span class=\"params\">arg</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(arg &lt; <span class=\"number\">5</span>)&#123;</span><br><span class=\"line\">    <span class=\"title function_\">spam</span>(arg + <span class=\"number\">1</span>);<span class=\"comment\">//只在函数的作用域内有效</span></span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arg);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"title function_\">baz</span>(<span class=\"number\">1</span>); <span class=\"comment\">//5</span></span><br><span class=\"line\"><span class=\"title function_\">spam</span>(<span class=\"number\">1</span>);<span class=\"comment\">//spam is not defined</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<blockquote>\n<p>使用var声明的变量或者函数,要放到其作用域的顶端.</p>\n</blockquote>\n</blockquote>\n","path":"2018/04/26/2018-04-26-JavaScript/","permalink":"https://xsun4231.github.io/2018/04/26/2018-04-26-JavaScript/","tags":[{"name":"JavaScript","_id":"cm6m2r3wo000hzg9dbwcr5juu","slug":"JavaScript","path":"tags/JavaScript/","permalink":"https://xsun4231.github.io/tags/JavaScript/","length":5}],"categories":[],"prev":{"title":"Java 中的NaN","date":"2018-05-28T15:00:00.000Z","slug":"2018-05-29-NaN","published":true,"updated":"2025-01-31T15:39:12.832Z","_id":"cm6m2r3wm0009zg9d6xit1yrz","layout":"post","photos":[],"excerpt":"","path":"2018/05/29/2018-05-29-NaN/","permalink":"https://xsun4231.github.io/2018/05/29/2018-05-29-NaN/","__post":true},"next":{"title":"IDE使用备忘录","date":"2017-12-21T15:00:00.000Z","slug":"2017-12-22-IDE_memo","published":true,"updated":"2025-01-31T15:39:12.832Z","_id":"cm6m2r3wj0005zg9d2v7d0q17","layout":"post","photos":[],"excerpt":"","path":"2017/12/22/2017-12-22-IDE_memo/","permalink":"https://xsun4231.github.io/2017/12/22/2017-12-22-IDE_memo/","__post":true},"__post":true}