{"title":"Immediately_Invoked_Function -- 立即调用函数的写法","date":"2018-06-19T15:00:00.000Z","source":"_posts/2018-06-20-ImmediatelyInvokedFunctionException.md","raw":"---\ntitle: Immediately_Invoked_Function -- 立即调用函数的写法\ndate: 2018-06-20\ntags: \n  - JavaScript\n---\n\n## 自执行-立即调用的函数表达式\n在某些情况下，我们不需要函数创建多个实例，也不需要对返回值做什么处理，便可以通过在函数声明的后面添加`()`来实现自执行。因为`foo`仅仅是`function(){}`这个表达式的一个引用，在函数表达时候后添加`()`便可以执行。\n```JavaScript\nvar foo = function(){\n  //do something.\n}();\n```\n但如果我们像下面这么写，会报错：\n\n```JavaScript\nfunction(){\n  //do somthing.\n}();\n```\n\n给括号里加入参数的话，可以不报错，但是函数不会执行，因为它会被解析成一个毫不相关的括号。\n报错原因：解析代码的时候，function已经被识别为声明函数用，而不是一个函数表达式。\n所以我们要做的就是把括号前面的内容解析成表达式，以下的写法都可以：\n```JavaScript\n  (function makeCounter(){\n    console.log(\"invoked by ()\");\n  }());\n\n  var x = function makeCounter(){\n    console.log(\"invoked by var with ()\");\n  }();\n\n  !function(){\n    console.log(\"invoked by !\");\n  }();\n  \n  ~function(){\n    console.log(\"invoked by ~\");\n  }();\n\n  +function(){\n    console.log(\"invoked by +\");\n  }();\n\n  -function(){\n    console.log(\"invoked by -\");\n  }();\n\n  new function(){\n    console.log(\"invoked by new\");\n  };\n\n  new function(){\n    console.log(\"invoked by new with ()\");\n  }();\n```","slug":"2018-06-20-ImmediatelyInvokedFunctionException","published":true,"updated":"2025-01-31T15:39:12.832Z","_id":"cm6m2r3wm000czg9dgtnb47y0","comments":true,"layout":"post","photos":[],"html":"<h2 id=\"自执行-立即调用的函数表达式\"><a href=\"#自执行-立即调用的函数表达式\" class=\"headerlink\" title=\"自执行-立即调用的函数表达式\"></a>自执行-立即调用的函数表达式</h2><p>在某些情况下，我们不需要函数创建多个实例，也不需要对返回值做什么处理，便可以通过在函数声明的后面添加<code>()</code>来实现自执行。因为<code>foo</code>仅仅是<code>function()&#123;&#125;</code>这个表达式的一个引用，在函数表达时候后添加<code>()</code>便可以执行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">//do something.</span></span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure>\n<p>但如果我们像下面这么写，会报错：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">//do somthing.</span></span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure>\n\n<p>给括号里加入参数的话，可以不报错，但是函数不会执行，因为它会被解析成一个毫不相关的括号。<br>报错原因：解析代码的时候，function已经被识别为声明函数用，而不是一个函数表达式。<br>所以我们要做的就是把括号前面的内容解析成表达式，以下的写法都可以：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span> <span class=\"title function_\">makeCounter</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;invoked by ()&quot;</span>);</span><br><span class=\"line\">&#125;());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"keyword\">function</span> <span class=\"title function_\">makeCounter</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;invoked by var with ()&quot;</span>);</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"></span><br><span class=\"line\">!<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;invoked by !&quot;</span>);</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"></span><br><span class=\"line\">~<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;invoked by ~&quot;</span>);</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"></span><br><span class=\"line\">+<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;invoked by +&quot;</span>);</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"></span><br><span class=\"line\">-<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;invoked by -&quot;</span>);</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;invoked by new&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;invoked by new with ()&quot;</span>);</span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"自执行-立即调用的函数表达式\"><a href=\"#自执行-立即调用的函数表达式\" class=\"headerlink\" title=\"自执行-立即调用的函数表达式\"></a>自执行-立即调用的函数表达式</h2><p>在某些情况下，我们不需要函数创建多个实例，也不需要对返回值做什么处理，便可以通过在函数声明的后面添加<code>()</code>来实现自执行。因为<code>foo</code>仅仅是<code>function()&#123;&#125;</code>这个表达式的一个引用，在函数表达时候后添加<code>()</code>便可以执行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">//do something.</span></span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure>\n<p>但如果我们像下面这么写，会报错：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">//do somthing.</span></span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure>\n\n<p>给括号里加入参数的话，可以不报错，但是函数不会执行，因为它会被解析成一个毫不相关的括号。<br>报错原因：解析代码的时候，function已经被识别为声明函数用，而不是一个函数表达式。<br>所以我们要做的就是把括号前面的内容解析成表达式，以下的写法都可以：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span> <span class=\"title function_\">makeCounter</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;invoked by ()&quot;</span>);</span><br><span class=\"line\">&#125;());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"keyword\">function</span> <span class=\"title function_\">makeCounter</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;invoked by var with ()&quot;</span>);</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"></span><br><span class=\"line\">!<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;invoked by !&quot;</span>);</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"></span><br><span class=\"line\">~<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;invoked by ~&quot;</span>);</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"></span><br><span class=\"line\">+<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;invoked by +&quot;</span>);</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"></span><br><span class=\"line\">-<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;invoked by -&quot;</span>);</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;invoked by new&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;invoked by new with ()&quot;</span>);</span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure>","path":"2018/06/20/2018-06-20-ImmediatelyInvokedFunctionException/","permalink":"https://xsun4231.github.io/2018/06/20/2018-06-20-ImmediatelyInvokedFunctionException/","tags":[{"name":"JavaScript","_id":"cm6m2r3wo000hzg9dbwcr5juu","slug":"JavaScript","path":"tags/JavaScript/","permalink":"https://xsun4231.github.io/tags/JavaScript/","length":5}],"categories":[],"prev":{"title":"JavaScript 两种常用的函数定义方法","date":"2018-07-16T15:00:00.000Z","slug":"2018-07-17-FunctionDefinition","published":true,"updated":"2025-01-31T15:39:12.832Z","_id":"cm6m2r3wl0008zg9d9oxa2114","layout":"post","photos":[],"excerpt":"","path":"2018/07/17/2018-07-17-FunctionDefinition/","permalink":"https://xsun4231.github.io/2018/07/17/2018-07-17-FunctionDefinition/","__post":true},"next":{"title":"Java 中的NaN","date":"2018-05-28T15:00:00.000Z","slug":"2018-05-29-NaN","published":true,"updated":"2025-01-31T15:39:12.832Z","_id":"cm6m2r3wm0009zg9d6xit1yrz","layout":"post","photos":[],"excerpt":"","path":"2018/05/29/2018-05-29-NaN/","permalink":"https://xsun4231.github.io/2018/05/29/2018-05-29-NaN/","__post":true},"__post":true}