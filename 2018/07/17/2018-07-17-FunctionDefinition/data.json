{"title":"JavaScript 两种常用的函数定义方法","date":"2018-07-16T15:00:00.000Z","source":"_posts/2018-07-17-FunctionDefinition.md","raw":"---\ntitle: JavaScript 两种常用的函数定义方法\ndate: 2018-07-17\ntags: \n    - JavaScript\n---\n\nJavaScript中定义函数，通常会遇到以下两种写法：\n\n写法A\n```JavaScript\nfunction name1(){\n  //...\n}\n```\n写法B\n```JavaScript\nvar name2 = function(){\n  // ...\n};\n```\n\n\n这两种写法有什么区别呢？很久很久以前,[stackoverflow][stackoverflow]上面有人问了一样的问题。\n\n## funciton的基本定义\n首先，在JavaScript中function的最基本定义方法是写法A，这种定义的内容在脚本被编译时就会执行，生成一个有名字的函数对象。\n\n而写法B实际上是定义了一个无名的函数对象，又将这个对象赋给了一个有名字的变量。\n这种写法的存在，方便了我们将函数定义为对象的属性：\n```JavaScript\nvar target = new Object();\ntarget.add = function(a,b){\n  return a+b;\n};\ntarget.add(1,1); //2\n```\n\n所以写法A定义的是一个完整的函数对象，而写法B定义的函数是没有名字的，`name2`是变量的名字，而不是函数的。\n\n## 扩展\n其实还可以使用`new`来声明函数：\n```JavaScript\nvar name = new Function(\"a\", \"b\", \"return a+b;\");\n```\n这里注意使用的是`Function`而不是`function`，这是具体的定义了一个`Function`类型的对象。速度慢，只有在特定情况下使用，比如想要让用户去控制函数内容的时候。\n\n\n\n[tips]:https://www.permadi.com/tutorial/jsFunc/index.html\n\n[stackoverflow]:https://stackoverflow.com/questions/336859/var-functionname-function-vs-function-functionname","slug":"2018-07-17-FunctionDefinition","published":true,"updated":"2025-01-31T15:39:12.832Z","_id":"cm6m2r3wl0008zg9d9oxa2114","comments":true,"layout":"post","photos":[],"html":"<p>JavaScript中定义函数，通常会遇到以下两种写法：</p>\n<p>写法A</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">name1</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>写法B</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name2 = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n<p>这两种写法有什么区别呢？很久很久以前,<a href=\"https://stackoverflow.com/questions/336859/var-functionname-function-vs-function-functionname\">stackoverflow</a>上面有人问了一样的问题。</p>\n<h2 id=\"funciton的基本定义\"><a href=\"#funciton的基本定义\" class=\"headerlink\" title=\"funciton的基本定义\"></a>funciton的基本定义</h2><p>首先，在JavaScript中function的最基本定义方法是写法A，这种定义的内容在脚本被编译时就会执行，生成一个有名字的函数对象。</p>\n<p>而写法B实际上是定义了一个无名的函数对象，又将这个对象赋给了一个有名字的变量。<br>这种写法的存在，方便了我们将函数定义为对象的属性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> target = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">target.<span class=\"property\">add</span> = <span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">target.<span class=\"title function_\">add</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>); <span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n\n<p>所以写法A定义的是一个完整的函数对象，而写法B定义的函数是没有名字的，<code>name2</code>是变量的名字，而不是函数的。</p>\n<h2 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h2><p>其实还可以使用<code>new</code>来声明函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"keyword\">new</span> <span class=\"title class_\">Function</span>(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;return a+b;&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>这里注意使用的是<code>Function</code>而不是<code>function</code>，这是具体的定义了一个<code>Function</code>类型的对象。速度慢，只有在特定情况下使用，比如想要让用户去控制函数内容的时候。</p>\n","excerpt":"","more":"<p>JavaScript中定义函数，通常会遇到以下两种写法：</p>\n<p>写法A</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">name1</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>写法B</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name2 = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n<p>这两种写法有什么区别呢？很久很久以前,<a href=\"https://stackoverflow.com/questions/336859/var-functionname-function-vs-function-functionname\">stackoverflow</a>上面有人问了一样的问题。</p>\n<h2 id=\"funciton的基本定义\"><a href=\"#funciton的基本定义\" class=\"headerlink\" title=\"funciton的基本定义\"></a>funciton的基本定义</h2><p>首先，在JavaScript中function的最基本定义方法是写法A，这种定义的内容在脚本被编译时就会执行，生成一个有名字的函数对象。</p>\n<p>而写法B实际上是定义了一个无名的函数对象，又将这个对象赋给了一个有名字的变量。<br>这种写法的存在，方便了我们将函数定义为对象的属性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> target = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">target.<span class=\"property\">add</span> = <span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">target.<span class=\"title function_\">add</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>); <span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n\n<p>所以写法A定义的是一个完整的函数对象，而写法B定义的函数是没有名字的，<code>name2</code>是变量的名字，而不是函数的。</p>\n<h2 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h2><p>其实还可以使用<code>new</code>来声明函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"keyword\">new</span> <span class=\"title class_\">Function</span>(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;return a+b;&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>这里注意使用的是<code>Function</code>而不是<code>function</code>，这是具体的定义了一个<code>Function</code>类型的对象。速度慢，只有在特定情况下使用，比如想要让用户去控制函数内容的时候。</p>\n","path":"2018/07/17/2018-07-17-FunctionDefinition/","permalink":"https://xsun4231.github.io/2018/07/17/2018-07-17-FunctionDefinition/","tags":[{"name":"JavaScript","_id":"cm6m2r3wo000hzg9dbwcr5juu","slug":"JavaScript","path":"tags/JavaScript/","permalink":"https://xsun4231.github.io/tags/JavaScript/","length":5}],"categories":[],"prev":{"title":"LBL法还原魔方","date":"2019-02-05T13:16:36.000Z","slug":"2019-02-05-rubik-cube","published":true,"updated":"2025-01-31T15:39:12.832Z","_id":"cm6m2r3wn000dzg9d6edthl2c","layout":"post","photos":[],"excerpt":"","path":"2019/02/05/2019-02-05-rubik-cube/","permalink":"https://xsun4231.github.io/2019/02/05/2019-02-05-rubik-cube/","__post":true},"next":{"title":"Immediately_Invoked_Function -- 立即调用函数的写法","date":"2018-06-19T15:00:00.000Z","slug":"2018-06-20-ImmediatelyInvokedFunctionException","published":true,"updated":"2025-01-31T15:39:12.832Z","_id":"cm6m2r3wm000czg9dgtnb47y0","layout":"post","photos":[],"excerpt":"","path":"2018/06/20/2018-06-20-ImmediatelyInvokedFunctionException/","permalink":"https://xsun4231.github.io/2018/06/20/2018-06-20-ImmediatelyInvokedFunctionException/","__post":true},"__post":true}