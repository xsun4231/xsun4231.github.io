{"title":"使用Java读写CSV文件","date":"2020-02-06T01:04:09.000Z","source":"_posts/2020-02-06-java-io-csv.md","raw":"---\ntitle: 使用Java读写CSV文件\ntags:\n  - Java\n  - CSV\ndate: 2020-02-06 10:04:09\n---\n\n最近针对一个Issue，需要给excel文件的读写功能增加CSV的支持，本来以为使用类似的方法可以直接写到DTO里面，结果一查，Java好像对CSV的支持还是最原始最基本的写法（并非贬义，可能是容易了反而不需要什么工具来读写CSV）。\n\n总结成一句话就是，读写CSV就相当于读写一个纯字符串文件。\n\n## 读取CSV  \n\n读取CSV文件大致分为以下几步：\n1. 使用`FileInputStream`读取csv文件\n2. 使用`BufferedReader`来对输入流进行更高效的处理\n3. 将每一行的数据作为字符串读取，使用`split(\",\")`分割\n\n```Java\n// 字符编码 设置下没坏处\nCharset charset = StandardCharsets.UTF_8;\n// 缓存大小 提高读取效率 \nint bufferSize = 5 * 1024 * 1024;\ntry (BufferedReader reader = new BufferedReader(\n        new InputStreamReader(new FileInputStream(\"input/sample.csv\"), charset), bufferSize)) {\n    String line;\n    List<String[]> data = new ArrayList<>();\n    // 这里假设文件不是很大，不然这么些内存是不够用的\n    while (Objects.nonNull(line = reader.readLine())) {\n        data.add(line.split(\",\"));\n    }\n\n    // 然后 想怎么用就怎么用了\n} catch (IOException e) {\n    // IOException 就囊括了读取文件可能发生的全部意外\n    e.printStackTrace();\n}\n```\n\n## 写CSV  \n\n跟上面读取CSV的操作正好反过来，写CSV文件分为以下几步:\n1. 使用`FileOutputStream`输出文件\n2. 将要输出的一行数据使用指定的符号（csv一般是逗号）连接成字符串\n3. 输出到文件，使用`BufferedWriter.write()`的话记得换行\n  \n```Java\n// 文件路径和文件名\nString file = \"output/output.csv\";\n// 指定字符编码\nCharset charset = StandardCharsets.UTF_8;\n// 指定缓存\nint bufferSize = 5 * 1024 * 1024;\ntry (BufferedWriter writer = new BufferedWriter(\n        new OutputStreamWriter(new FileOutputStream(file), charset), bufferSize\n)) {\n    for (String[] datum : data) {\n        writer.write(String.join(\",\", datum));\n        // 换行\n        writer.newLine();\n    }\n} catch (IOException e) {\n    e.printStackTrace();\n}\n```\n","slug":"2020-02-06-java-io-csv","published":true,"updated":"2025-01-31T15:39:12.959Z","_id":"cm6m2r3ww001mzg9dgin6htus","comments":true,"layout":"post","photos":[],"html":"<p>最近针对一个Issue，需要给excel文件的读写功能增加CSV的支持，本来以为使用类似的方法可以直接写到DTO里面，结果一查，Java好像对CSV的支持还是最原始最基本的写法（并非贬义，可能是容易了反而不需要什么工具来读写CSV）。</p>\n<p>总结成一句话就是，读写CSV就相当于读写一个纯字符串文件。</p>\n<h2 id=\"读取CSV\"><a href=\"#读取CSV\" class=\"headerlink\" title=\"读取CSV\"></a>读取CSV</h2><p>读取CSV文件大致分为以下几步：</p>\n<ol>\n<li>使用<code>FileInputStream</code>读取csv文件</li>\n<li>使用<code>BufferedReader</code>来对输入流进行更高效的处理</li>\n<li>将每一行的数据作为字符串读取，使用<code>split(&quot;,&quot;)</code>分割</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 字符编码 设置下没坏处</span></span><br><span class=\"line\"><span class=\"type\">Charset</span> <span class=\"variable\">charset</span> <span class=\"operator\">=</span> StandardCharsets.UTF_8;</span><br><span class=\"line\"><span class=\"comment\">// 缓存大小 提高读取效率 </span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">bufferSize</span> <span class=\"operator\">=</span> <span class=\"number\">5</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> (<span class=\"type\">BufferedReader</span> <span class=\"variable\">reader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;input/sample.csv&quot;</span>), charset), bufferSize)) &#123;</span><br><span class=\"line\">    String line;</span><br><span class=\"line\">    List&lt;String[]&gt; data = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 这里假设文件不是很大，不然这么些内存是不够用的</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (Objects.nonNull(line = reader.readLine())) &#123;</span><br><span class=\"line\">        data.add(line.split(<span class=\"string\">&quot;,&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 然后 想怎么用就怎么用了</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// IOException 就囊括了读取文件可能发生的全部意外</span></span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"写CSV\"><a href=\"#写CSV\" class=\"headerlink\" title=\"写CSV\"></a>写CSV</h2><p>跟上面读取CSV的操作正好反过来，写CSV文件分为以下几步:</p>\n<ol>\n<li>使用<code>FileOutputStream</code>输出文件</li>\n<li>将要输出的一行数据使用指定的符号（csv一般是逗号）连接成字符串</li>\n<li>输出到文件，使用<code>BufferedWriter.write()</code>的话记得换行</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 文件路径和文件名</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;output/output.csv&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 指定字符编码</span></span><br><span class=\"line\"><span class=\"type\">Charset</span> <span class=\"variable\">charset</span> <span class=\"operator\">=</span> StandardCharsets.UTF_8;</span><br><span class=\"line\"><span class=\"comment\">// 指定缓存</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">bufferSize</span> <span class=\"operator\">=</span> <span class=\"number\">5</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> (<span class=\"type\">BufferedWriter</span> <span class=\"variable\">writer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedWriter</span>(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">OutputStreamWriter</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(file), charset), bufferSize</span><br><span class=\"line\">)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String[] datum : data) &#123;</span><br><span class=\"line\">        writer.write(String.join(<span class=\"string\">&quot;,&quot;</span>, datum));</span><br><span class=\"line\">        <span class=\"comment\">// 换行</span></span><br><span class=\"line\">        writer.newLine();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>最近针对一个Issue，需要给excel文件的读写功能增加CSV的支持，本来以为使用类似的方法可以直接写到DTO里面，结果一查，Java好像对CSV的支持还是最原始最基本的写法（并非贬义，可能是容易了反而不需要什么工具来读写CSV）。</p>\n<p>总结成一句话就是，读写CSV就相当于读写一个纯字符串文件。</p>\n<h2 id=\"读取CSV\"><a href=\"#读取CSV\" class=\"headerlink\" title=\"读取CSV\"></a>读取CSV</h2><p>读取CSV文件大致分为以下几步：</p>\n<ol>\n<li>使用<code>FileInputStream</code>读取csv文件</li>\n<li>使用<code>BufferedReader</code>来对输入流进行更高效的处理</li>\n<li>将每一行的数据作为字符串读取，使用<code>split(&quot;,&quot;)</code>分割</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 字符编码 设置下没坏处</span></span><br><span class=\"line\"><span class=\"type\">Charset</span> <span class=\"variable\">charset</span> <span class=\"operator\">=</span> StandardCharsets.UTF_8;</span><br><span class=\"line\"><span class=\"comment\">// 缓存大小 提高读取效率 </span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">bufferSize</span> <span class=\"operator\">=</span> <span class=\"number\">5</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> (<span class=\"type\">BufferedReader</span> <span class=\"variable\">reader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;input/sample.csv&quot;</span>), charset), bufferSize)) &#123;</span><br><span class=\"line\">    String line;</span><br><span class=\"line\">    List&lt;String[]&gt; data = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 这里假设文件不是很大，不然这么些内存是不够用的</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (Objects.nonNull(line = reader.readLine())) &#123;</span><br><span class=\"line\">        data.add(line.split(<span class=\"string\">&quot;,&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 然后 想怎么用就怎么用了</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// IOException 就囊括了读取文件可能发生的全部意外</span></span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"写CSV\"><a href=\"#写CSV\" class=\"headerlink\" title=\"写CSV\"></a>写CSV</h2><p>跟上面读取CSV的操作正好反过来，写CSV文件分为以下几步:</p>\n<ol>\n<li>使用<code>FileOutputStream</code>输出文件</li>\n<li>将要输出的一行数据使用指定的符号（csv一般是逗号）连接成字符串</li>\n<li>输出到文件，使用<code>BufferedWriter.write()</code>的话记得换行</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 文件路径和文件名</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;output/output.csv&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 指定字符编码</span></span><br><span class=\"line\"><span class=\"type\">Charset</span> <span class=\"variable\">charset</span> <span class=\"operator\">=</span> StandardCharsets.UTF_8;</span><br><span class=\"line\"><span class=\"comment\">// 指定缓存</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">bufferSize</span> <span class=\"operator\">=</span> <span class=\"number\">5</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> (<span class=\"type\">BufferedWriter</span> <span class=\"variable\">writer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedWriter</span>(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">OutputStreamWriter</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(file), charset), bufferSize</span><br><span class=\"line\">)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String[] datum : data) &#123;</span><br><span class=\"line\">        writer.write(String.join(<span class=\"string\">&quot;,&quot;</span>, datum));</span><br><span class=\"line\">        <span class=\"comment\">// 换行</span></span><br><span class=\"line\">        writer.newLine();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","path":"2020/02/06/2020-02-06-java-io-csv/","permalink":"https://xsun4231.github.io/2020/02/06/2020-02-06-java-io-csv/","tags":[{"name":"Java","_id":"cm6m2r3wq000qzg9deq8b0ho7","slug":"Java","path":"tags/Java/","permalink":"https://xsun4231.github.io/tags/Java/","length":7},{"name":"CSV","_id":"cm6m2r3x4003jzg9d851t8ybk","slug":"CSV","path":"tags/CSV/","permalink":"https://xsun4231.github.io/tags/CSV/","length":1}],"categories":[],"prev":{"title":"关于Enums的小问题","date":"2020-02-14T04:32:14.000Z","slug":"2020-02-14-oracle-quiz-enums","published":true,"updated":"2025-01-31T15:39:12.959Z","_id":"cm6m2r3wx001pzg9d29zi0749","layout":"post","photos":[],"excerpt":"","path":"2020/02/14/2020-02-14-oracle-quiz-enums/","permalink":"https://xsun4231.github.io/2020/02/14/2020-02-14-oracle-quiz-enums/","__post":true},"next":{"title":"二进制大对象和字符大对象","date":"2020-01-28T07:06:55.000Z","slug":"2020-01-28-clob-octet","published":true,"updated":"2025-01-31T15:39:12.949Z","_id":"cm6m2r3wv001jzg9d4q1z0iyf","layout":"post","photos":[],"excerpt":"","path":"2020/01/28/2020-01-28-clob-octet/","permalink":"https://xsun4231.github.io/2020/01/28/2020-01-28-clob-octet/","__post":true},"__post":true}