{"title":"AngularJS 页面载入事件的相关方法","date":"2020-01-21T00:46:17.000Z","source":"_posts/2020-01-21-ng-state-event.md","raw":"---\ntitle: AngularJS 页面载入事件的相关方法\ntags:\n  - null\ndate: 2020-01-21 09:46:17\n---\n\n\nAngularJS的uirouter一个重要的内容就是使用`state`的使用，这里记录一组关于`state`的事件，每当路由转移过程中发生对应事件时，都会在`$rootScrope`广播，使用`$rootScope.$on('$stateEventName', function(event, ...))`获取该事件。\n\n## 0. 引入router.state.events\n首先引入JavaScript源文件：\n```html\n<script src=\"stateEvents.js\"></script>\n```\n然后导入模块：\n```JavaScript\nangular.module(\"myApplication\", ['ui.router', 'ui.router.state.events']\n```\n\n## 1. [事件](https://ui-router.github.io/ng1/docs/latest/modules/ng1_state_events.html)\n\n1. $stateChangeCancel\n2. $stateChangeStart\n3. $stateNotFound\n4. $stateChangeError\n5. $stateChangeSuccess\n\n### $stateChangeCancel\n当一个页面的转移被取消时，会在`$rootScope`广播`$stateChangeCancel`事件\n有以下参数可以使用：\n* toState 目标state\n* toParams 前往目标state时的参数\n* fromState 来源state\n* fromParams 带来的参数\n* options 选项\n* $transition$ \n\n和开始事件`$stateChangeStart` ， 成功事件`$stateChangeSuccess` 提供的参数相同\n\n### $stateChangeError\n相比于开始和成功的事件，错误事件多一个参数`error`，其内容当然是错误信息。\n\n### $stateNotFound\n没有找到state时的事件，提供一下参数可以用：\n* unfoudState 未找到的state信息，提供`to` `toParams` `options`等属性\n* fromState 来源state\n* fromParams 来源参数\n* options 选项\n\n\n## 2. 更新到 [Transition Hooks](https://ui-router.github.io/ng1/docs/1.0.0/classes/transition.transitionservice.html)\n\nuirouter已经更新了IHookRegistry接口，可以对`transition`进行更为详细控制。\n`$transition` 和`$transitionService`都实现了该接口，但是`$transition`对象只能在转换开始前使用。  \n\n该接口提供以下方法：\n1. getHooks 返回所有已登录的hook方法，参数时方法名，比如`onBefore onEnter`等等\n2. onBefore 开始前\n8. onStart 开始后\n5. onExit 退出，onStart之后transition会推出state\n7. onRetain 保留，onExit之后onRetain会被执行，子state会被优先执行\n3. onEnter 进入，在onRetain结束后，transition会进入state\n6. onFinish 结束前，这是最后可以取消或者定向transition的方法\n4. onError 错误\n9. onSuccess 成功\n","slug":"2020-01-21-ng-state-event","published":true,"updated":"2025-01-31T15:39:12.949Z","_id":"cm6m2r3wv001gzg9dfi8kgrgv","comments":true,"layout":"post","photos":[],"html":"<p>AngularJS的uirouter一个重要的内容就是使用<code>state</code>的使用，这里记录一组关于<code>state</code>的事件，每当路由转移过程中发生对应事件时，都会在<code>$rootScrope</code>广播，使用<code>$rootScope.$on(&#39;$stateEventName&#39;, function(event, ...))</code>获取该事件。</p>\n<h2 id=\"0-引入router-state-events\"><a href=\"#0-引入router-state-events\" class=\"headerlink\" title=\"0. 引入router.state.events\"></a>0. 引入router.state.events</h2><p>首先引入JavaScript源文件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;stateEvents.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后导入模块：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.<span class=\"title function_\">module</span>(<span class=\"string\">&quot;myApplication&quot;</span>, [<span class=\"string\">&#x27;ui.router&#x27;</span>, <span class=\"string\">&#x27;ui.router.state.events&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-事件\"><a href=\"#1-事件\" class=\"headerlink\" title=\"1. 事件\"></a>1. <a href=\"https://ui-router.github.io/ng1/docs/latest/modules/ng1_state_events.html\">事件</a></h2><ol>\n<li>$stateChangeCancel</li>\n<li>$stateChangeStart</li>\n<li>$stateNotFound</li>\n<li>$stateChangeError</li>\n<li>$stateChangeSuccess</li>\n</ol>\n<h3 id=\"stateChangeCancel\"><a href=\"#stateChangeCancel\" class=\"headerlink\" title=\"$stateChangeCancel\"></a>$stateChangeCancel</h3><p>当一个页面的转移被取消时，会在<code>$rootScope</code>广播<code>$stateChangeCancel</code>事件<br>有以下参数可以使用：</p>\n<ul>\n<li>toState 目标state</li>\n<li>toParams 前往目标state时的参数</li>\n<li>fromState 来源state</li>\n<li>fromParams 带来的参数</li>\n<li>options 选项</li>\n<li>$transition$</li>\n</ul>\n<p>和开始事件<code>$stateChangeStart</code> ， 成功事件<code>$stateChangeSuccess</code> 提供的参数相同</p>\n<h3 id=\"stateChangeError\"><a href=\"#stateChangeError\" class=\"headerlink\" title=\"$stateChangeError\"></a>$stateChangeError</h3><p>相比于开始和成功的事件，错误事件多一个参数<code>error</code>，其内容当然是错误信息。</p>\n<h3 id=\"stateNotFound\"><a href=\"#stateNotFound\" class=\"headerlink\" title=\"$stateNotFound\"></a>$stateNotFound</h3><p>没有找到state时的事件，提供一下参数可以用：</p>\n<ul>\n<li>unfoudState 未找到的state信息，提供<code>to</code> <code>toParams</code> <code>options</code>等属性</li>\n<li>fromState 来源state</li>\n<li>fromParams 来源参数</li>\n<li>options 选项</li>\n</ul>\n<h2 id=\"2-更新到-Transition-Hooks\"><a href=\"#2-更新到-Transition-Hooks\" class=\"headerlink\" title=\"2. 更新到 Transition Hooks\"></a>2. 更新到 <a href=\"https://ui-router.github.io/ng1/docs/1.0.0/classes/transition.transitionservice.html\">Transition Hooks</a></h2><p>uirouter已经更新了IHookRegistry接口，可以对<code>transition</code>进行更为详细控制。<br><code>$transition</code> 和<code>$transitionService</code>都实现了该接口，但是<code>$transition</code>对象只能在转换开始前使用。  </p>\n<p>该接口提供以下方法：</p>\n<ol>\n<li>getHooks 返回所有已登录的hook方法，参数时方法名，比如<code>onBefore onEnter</code>等等</li>\n<li>onBefore 开始前</li>\n<li>onStart 开始后</li>\n<li>onExit 退出，onStart之后transition会推出state</li>\n<li>onRetain 保留，onExit之后onRetain会被执行，子state会被优先执行</li>\n<li>onEnter 进入，在onRetain结束后，transition会进入state</li>\n<li>onFinish 结束前，这是最后可以取消或者定向transition的方法</li>\n<li>onError 错误</li>\n<li>onSuccess 成功</li>\n</ol>\n","excerpt":"","more":"<p>AngularJS的uirouter一个重要的内容就是使用<code>state</code>的使用，这里记录一组关于<code>state</code>的事件，每当路由转移过程中发生对应事件时，都会在<code>$rootScrope</code>广播，使用<code>$rootScope.$on(&#39;$stateEventName&#39;, function(event, ...))</code>获取该事件。</p>\n<h2 id=\"0-引入router-state-events\"><a href=\"#0-引入router-state-events\" class=\"headerlink\" title=\"0. 引入router.state.events\"></a>0. 引入router.state.events</h2><p>首先引入JavaScript源文件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;stateEvents.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后导入模块：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.<span class=\"title function_\">module</span>(<span class=\"string\">&quot;myApplication&quot;</span>, [<span class=\"string\">&#x27;ui.router&#x27;</span>, <span class=\"string\">&#x27;ui.router.state.events&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-事件\"><a href=\"#1-事件\" class=\"headerlink\" title=\"1. 事件\"></a>1. <a href=\"https://ui-router.github.io/ng1/docs/latest/modules/ng1_state_events.html\">事件</a></h2><ol>\n<li>$stateChangeCancel</li>\n<li>$stateChangeStart</li>\n<li>$stateNotFound</li>\n<li>$stateChangeError</li>\n<li>$stateChangeSuccess</li>\n</ol>\n<h3 id=\"stateChangeCancel\"><a href=\"#stateChangeCancel\" class=\"headerlink\" title=\"$stateChangeCancel\"></a>$stateChangeCancel</h3><p>当一个页面的转移被取消时，会在<code>$rootScope</code>广播<code>$stateChangeCancel</code>事件<br>有以下参数可以使用：</p>\n<ul>\n<li>toState 目标state</li>\n<li>toParams 前往目标state时的参数</li>\n<li>fromState 来源state</li>\n<li>fromParams 带来的参数</li>\n<li>options 选项</li>\n<li>$transition$</li>\n</ul>\n<p>和开始事件<code>$stateChangeStart</code> ， 成功事件<code>$stateChangeSuccess</code> 提供的参数相同</p>\n<h3 id=\"stateChangeError\"><a href=\"#stateChangeError\" class=\"headerlink\" title=\"$stateChangeError\"></a>$stateChangeError</h3><p>相比于开始和成功的事件，错误事件多一个参数<code>error</code>，其内容当然是错误信息。</p>\n<h3 id=\"stateNotFound\"><a href=\"#stateNotFound\" class=\"headerlink\" title=\"$stateNotFound\"></a>$stateNotFound</h3><p>没有找到state时的事件，提供一下参数可以用：</p>\n<ul>\n<li>unfoudState 未找到的state信息，提供<code>to</code> <code>toParams</code> <code>options</code>等属性</li>\n<li>fromState 来源state</li>\n<li>fromParams 来源参数</li>\n<li>options 选项</li>\n</ul>\n<h2 id=\"2-更新到-Transition-Hooks\"><a href=\"#2-更新到-Transition-Hooks\" class=\"headerlink\" title=\"2. 更新到 Transition Hooks\"></a>2. 更新到 <a href=\"https://ui-router.github.io/ng1/docs/1.0.0/classes/transition.transitionservice.html\">Transition Hooks</a></h2><p>uirouter已经更新了IHookRegistry接口，可以对<code>transition</code>进行更为详细控制。<br><code>$transition</code> 和<code>$transitionService</code>都实现了该接口，但是<code>$transition</code>对象只能在转换开始前使用。  </p>\n<p>该接口提供以下方法：</p>\n<ol>\n<li>getHooks 返回所有已登录的hook方法，参数时方法名，比如<code>onBefore onEnter</code>等等</li>\n<li>onBefore 开始前</li>\n<li>onStart 开始后</li>\n<li>onExit 退出，onStart之后transition会推出state</li>\n<li>onRetain 保留，onExit之后onRetain会被执行，子state会被优先执行</li>\n<li>onEnter 进入，在onRetain结束后，transition会进入state</li>\n<li>onFinish 结束前，这是最后可以取消或者定向transition的方法</li>\n<li>onError 错误</li>\n<li>onSuccess 成功</li>\n</ol>\n","path":"2020/01/21/2020-01-21-ng-state-event/","permalink":"https://xsun4231.github.io/2020/01/21/2020-01-21-ng-state-event/","tags":[],"categories":[],"prev":{"title":"Git Prune命令","date":"2020-01-24T05:45:42.000Z","slug":"2020-01-24-git-prune","published":true,"updated":"2025-01-31T15:39:12.949Z","_id":"cm6m2r3wu001ezg9ddujf2hu5","layout":"post","photos":[],"excerpt":"","path":"2020/01/24/2020-01-24-git-prune/","permalink":"https://xsun4231.github.io/2020/01/24/2020-01-24-git-prune/","__post":true},"next":{"title":"CSS 文字对齐","date":"2020-01-16T12:09:17.000Z","slug":"2020-01-16-css-vertical-align","published":true,"updated":"2025-01-31T15:39:12.949Z","_id":"cm6m2r3wu001czg9dh2q638pm","layout":"post","photos":[],"excerpt":"","path":"2020/01/16/2020-01-16-css-vertical-align/","permalink":"https://xsun4231.github.io/2020/01/16/2020-01-16-css-vertical-align/","__post":true},"__post":true}