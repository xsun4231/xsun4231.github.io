{"title":"Day2 面向对象相关","date":"2020-12-07T06:50:24.000Z","source":"_posts/2020-12-07-day-2.md","raw":"---\ntitle: Day2 面向对象相关\ntags:\n  - 100 days of code\ndate: 2020-12-07 15:50:24\n---\n2/100\n\n## 定义类\npython使用关键字`class`来定义类，在类名后的括号里写父类。\n```python\nclass Student(object):\n\n  # 相当于Java的构造体，类的field可以直接赋值，不用事先定义\n  def __init__(self, name, age):\n      self.name = name \n      self.age = age\n\n  # 参数self相当于Java中的this，在调用方法的时候不需要指定，单如果没有这个参数就无法使用类的field\n  def study(self, course):\n      print(f'studing: {course}')\n\n  def watch_movie(self):\n        if self.age < 18:\n            print('%s只能观看《熊出没》.' % self.name)\n        else:\n            #  这是原作者 [jackfrued] 的爱好\n            print('%s正在观看岛国爱情大电影.' % self.name)\n\n```\n**可见性**\n\npython并没有复杂而严格的可见性设置，虽然可以通过在方法和变量前加两个下划线来设置私有性，但这其实只是改变了访问规则而已。\n\n```python\nclass Test:\n\n    def __init__(self, foo):\n        self.__foo = foo\n\n    def __bar(self):\n        print(self.__foo)\n        print('__bar')\n\n\ndef main():\n    test = Test('hello')\n    # AttributeError: 'Test' object has no attribute '__bar'\n    test.__bar()\n    # AttributeError: 'Test' object has no attribute '__foo'\n    print(test.__foo)\n\n    # 在前面添加 _Test 就可以访问了\n    test._Test__bar()\n    print(test._Test__foo)\n\n\nif __name__ == \"__main__\":\n    main()\n\n```\n\n一般使用单下划线来表明方法或变量是受保护的，但这也只是一种隐含的意思而已。\n\n\n`@property`装饰器\n可以使用@property来包装属性，这样属性将会被封装起来，使用@property装饰的方法可以作为getter来使用，想要使用setter则需要@xxx.setter来修饰。\n\n```python\nclass Person(object):\n\n    def __init__(self, name, age):\n        self._name = name¬\n        self._age = age¬\n\n    # 如果没有这个修饰，下面的person.name = 'Bob' 就不会报错\n    @property\n    def name(self):\n        return self._name\n\n\n    @property\n    def age(self):\n        return self._age\n\n\n    @age.setter\n    def age(self, age):\n        self._age = age\n\n\n    def play(self):\n        if self.age <= 16:\n            print('plage game')\n        else:¬\n            print('work')\n\n\ndef main():\n    person = Person('Alcie', 12)\n    person.play()\n    person.age = 22\n    person.play()\n    # AttributeError: can't set attribute\n    person.name = 'Bob'\n\n\nif __name__ == '__main__':\n    main()\n\n```","slug":"2020-12-07-day-2","published":true,"updated":"2025-01-31T15:39:12.962Z","_id":"cm6m2r3wz001xzg9d3bi6aua8","comments":true,"layout":"post","photos":[],"html":"<p>2&#x2F;100</p>\n<h2 id=\"定义类\"><a href=\"#定义类\" class=\"headerlink\" title=\"定义类\"></a>定义类</h2><p>python使用关键字<code>class</code>来定义类，在类名后的括号里写父类。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 相当于Java的构造体，类的field可以直接赋值，不用事先定义</span></span><br><span class=\"line\">  <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name, age</span>):</span><br><span class=\"line\">      <span class=\"variable language_\">self</span>.name = name </span><br><span class=\"line\">      <span class=\"variable language_\">self</span>.age = age</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 参数self相当于Java中的this，在调用方法的时候不需要指定，单如果没有这个参数就无法使用类的field</span></span><br><span class=\"line\">  <span class=\"keyword\">def</span> <span class=\"title function_\">study</span>(<span class=\"params\">self, course</span>):</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;studing: <span class=\"subst\">&#123;course&#125;</span>&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">def</span> <span class=\"title function_\">watch_movie</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.age &lt; <span class=\"number\">18</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;%s只能观看《熊出没》.&#x27;</span> % <span class=\"variable language_\">self</span>.name)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"comment\">#  这是原作者 [jackfrued] 的爱好</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;%s正在观看岛国爱情大电影.&#x27;</span> % <span class=\"variable language_\">self</span>.name)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>可见性</strong></p>\n<p>python并没有复杂而严格的可见性设置，虽然可以通过在方法和变量前加两个下划线来设置私有性，但这其实只是改变了访问规则而已。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, foo</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.__foo = foo</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__bar</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"variable language_\">self</span>.__foo)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;__bar&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    test = Test(<span class=\"string\">&#x27;hello&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># AttributeError: &#x27;Test&#x27; object has no attribute &#x27;__bar&#x27;</span></span><br><span class=\"line\">    test.__bar()</span><br><span class=\"line\">    <span class=\"comment\"># AttributeError: &#x27;Test&#x27; object has no attribute &#x27;__foo&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(test.__foo)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 在前面添加 _Test 就可以访问了</span></span><br><span class=\"line\">    test._Test__bar()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(test._Test__foo)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    main()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>一般使用单下划线来表明方法或变量是受保护的，但这也只是一种隐含的意思而已。</p>\n<p><code>@property</code>装饰器<br>可以使用@property来包装属性，这样属性将会被封装起来，使用@property装饰的方法可以作为getter来使用，想要使用setter则需要@xxx.setter来修饰。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name, age</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>._name = name¬</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>._age = age¬</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 如果没有这个修饰，下面的person.name = &#x27;Bob&#x27; 就不会报错</span></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">name</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>._name</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">age</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>._age</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @age.setter</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">age</span>(<span class=\"params\">self, age</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>._age = age</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">play</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.age &lt;= <span class=\"number\">16</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;plage game&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:¬</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;work&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    person = Person(<span class=\"string\">&#x27;Alcie&#x27;</span>, <span class=\"number\">12</span>)</span><br><span class=\"line\">    person.play()</span><br><span class=\"line\">    person.age = <span class=\"number\">22</span></span><br><span class=\"line\">    person.play()</span><br><span class=\"line\">    <span class=\"comment\"># AttributeError: can&#x27;t set attribute</span></span><br><span class=\"line\">    person.name = <span class=\"string\">&#x27;Bob&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","excerpt":"","more":"<p>2&#x2F;100</p>\n<h2 id=\"定义类\"><a href=\"#定义类\" class=\"headerlink\" title=\"定义类\"></a>定义类</h2><p>python使用关键字<code>class</code>来定义类，在类名后的括号里写父类。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 相当于Java的构造体，类的field可以直接赋值，不用事先定义</span></span><br><span class=\"line\">  <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name, age</span>):</span><br><span class=\"line\">      <span class=\"variable language_\">self</span>.name = name </span><br><span class=\"line\">      <span class=\"variable language_\">self</span>.age = age</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 参数self相当于Java中的this，在调用方法的时候不需要指定，单如果没有这个参数就无法使用类的field</span></span><br><span class=\"line\">  <span class=\"keyword\">def</span> <span class=\"title function_\">study</span>(<span class=\"params\">self, course</span>):</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;studing: <span class=\"subst\">&#123;course&#125;</span>&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">def</span> <span class=\"title function_\">watch_movie</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.age &lt; <span class=\"number\">18</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;%s只能观看《熊出没》.&#x27;</span> % <span class=\"variable language_\">self</span>.name)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"comment\">#  这是原作者 [jackfrued] 的爱好</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;%s正在观看岛国爱情大电影.&#x27;</span> % <span class=\"variable language_\">self</span>.name)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>可见性</strong></p>\n<p>python并没有复杂而严格的可见性设置，虽然可以通过在方法和变量前加两个下划线来设置私有性，但这其实只是改变了访问规则而已。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, foo</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.__foo = foo</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__bar</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"variable language_\">self</span>.__foo)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;__bar&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    test = Test(<span class=\"string\">&#x27;hello&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># AttributeError: &#x27;Test&#x27; object has no attribute &#x27;__bar&#x27;</span></span><br><span class=\"line\">    test.__bar()</span><br><span class=\"line\">    <span class=\"comment\"># AttributeError: &#x27;Test&#x27; object has no attribute &#x27;__foo&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(test.__foo)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 在前面添加 _Test 就可以访问了</span></span><br><span class=\"line\">    test._Test__bar()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(test._Test__foo)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    main()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>一般使用单下划线来表明方法或变量是受保护的，但这也只是一种隐含的意思而已。</p>\n<p><code>@property</code>装饰器<br>可以使用@property来包装属性，这样属性将会被封装起来，使用@property装饰的方法可以作为getter来使用，想要使用setter则需要@xxx.setter来修饰。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name, age</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>._name = name¬</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>._age = age¬</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 如果没有这个修饰，下面的person.name = &#x27;Bob&#x27; 就不会报错</span></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">name</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>._name</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">age</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>._age</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @age.setter</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">age</span>(<span class=\"params\">self, age</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>._age = age</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">play</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.age &lt;= <span class=\"number\">16</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;plage game&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:¬</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;work&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    person = Person(<span class=\"string\">&#x27;Alcie&#x27;</span>, <span class=\"number\">12</span>)</span><br><span class=\"line\">    person.play()</span><br><span class=\"line\">    person.age = <span class=\"number\">22</span></span><br><span class=\"line\">    person.play()</span><br><span class=\"line\">    <span class=\"comment\"># AttributeError: can&#x27;t set attribute</span></span><br><span class=\"line\">    person.name = <span class=\"string\">&#x27;Bob&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","path":"2020/12/07/2020-12-07-day-2/","permalink":"https://xsun4231.github.io/2020/12/07/2020-12-07-day-2/","tags":[{"name":"100 days of code","_id":"cm6m2r3x5003qzg9d3gua65ga","slug":"100-days-of-code","path":"tags/100-days-of-code/","permalink":"https://xsun4231.github.io/tags/100-days-of-code/","length":3}],"categories":[],"prev":{"title":"Day 3 面向对象进阶","date":"2020-12-07T14:59:08.000Z","slug":"2020-12-07-day-3","published":true,"updated":"2025-01-31T15:39:12.963Z","_id":"cm6m2r3wz001zzg9d4kamhuc8","layout":"post","photos":[],"excerpt":"","path":"2020/12/07/2020-12-07-day-3/","permalink":"https://xsun4231.github.io/2020/12/07/2020-12-07-day-3/","__post":true},"next":{"title":"Day1 Python 基础","date":"2020-12-06T09:54:13.000Z","slug":"2020-12-06-day-1","published":true,"updated":"2025-01-31T15:39:12.962Z","_id":"cm6m2r3wy001uzg9d1cnvgjc4","layout":"post","photos":[],"excerpt":"","path":"2020/12/06/2020-12-06-day-1/","permalink":"https://xsun4231.github.io/2020/12/06/2020-12-06-day-1/","__post":true},"__post":true}