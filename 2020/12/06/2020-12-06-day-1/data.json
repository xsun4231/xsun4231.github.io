{"title":"Day1 Python 基础","date":"2020-12-06T09:54:13.000Z","source":"_posts/2020-12-06-day-1.md","raw":"---\ntitle: Day1 Python 基础\ntags:\n  - 100 days of code\ndate: 2020-12-06 18:54:13\n---\n1/100\n\n## 【1】基本元素\n\n### 常见数据类型\n1. 整形 python3开始整数不区分int和long，支持二，八，十六进制。\n2. 浮点型 可以理解成小数\n3. 字符串 单引号 双引号都可以，三个引号输入多行内容\n4. 布尔型 True False 开头大写\n\n> 变量名使用_连接 `my_var_name`  \n> `_name_`  单下划线开头为受保护的实例属性\n> `__name__`  双下划线开头的为私有属性\n\n使用 `type()` 来确认类型，使用下面的方法来转换类型：\n```python\nint() #转换成整数 \nfloat() #转换成浮点数\nstr() #转换成字符串，可以是字符编码\nchr() #字符串编码（整数）转换成字符串\nord() #活的字符串对应的编码（整数）\n```\n\n## 【2】逻辑语句\n\n### 运算符\n\n除了常见的运算符外，python常用的还有：\n\n```python\nis \nis not\n\nin \nnot in\n```\n\n### if分支\npython的if分支跟函数，类一样都是使用缩进来表示代码的层次结构。\n\n```python\nif name == 'a':\n    print('a')\nelif name == 'b':\n    print('b')\nelse:\n    print('c')\n```\n\n\n###  循环结构\n\nfor-in\npython一般使用`for name in collection`的方式来写循环语句\n\n```python\nsum = 0\nfor x in range(100):\n    sum += x\nprint(sum)\n```\n\n## 【3】函数\n\n### 函数定义和参数\n定义函数的关键字是 `def`\n```python\ndef foo(a):\n    print(a)\n```\n\npython中函数的参数可以设置默认值，所以使用的时候可以忽略部分参数或者直接指定某些参数，所以python的函数不需要像Java一样重载\n\n```python\ndef add(a=0, b=0, c=0):\n    return a + b + c\n```\n\n还可以定义可变参数来接收无法确定个数的参数：\n```python\ndef add(*args):\n    total = 0\n    for val in args:\n        total += val\n    return total\n\n```\n\n### 模块\npython一个文件就算一个模块，通过`import`来导入指定模块的内容。\n\n```python\n# module1.py\ndef foo():\n    print('hello, world')\n```\n\n```python\n# module2.py\ndef foo():\n    print('hello, world')\n```\n\n```python\n# test\nimport module1 as m1\nimport module2 as m2\n\nm1.foo()\nm2.foo()\n\n```\n\n还可以直接从模块导入具体的函数\n```python\nfrom module1 import foo\nfrom module2 import foo\n\n#  后导入的foo会覆盖之前导入的foo，所以这里使用的是module2的foo\nfoo()\n\n```\n\n### __name__ == '__main__'\n模块中如果需要写入可执行语句，一般需要包装在 `__name__ == '__main__'` 中，这样除非直接运行该模块，这些可执行语句是不会被执行的\n```python\ndef foo():\n    print('hello, world')\n\n\nif __name__ == '__main__':\n    foo()\n```\n\n`__name__` 是python的一个隐藏属性：模块名。 被python解释器直接执行的模块名字叫 `__main__`","slug":"2020-12-06-day-1","published":true,"updated":"2025-01-31T15:39:12.962Z","_id":"cm6m2r3wy001uzg9d1cnvgjc4","comments":true,"layout":"post","photos":[],"html":"<p>1&#x2F;100</p>\n<h2 id=\"【1】基本元素\"><a href=\"#【1】基本元素\" class=\"headerlink\" title=\"【1】基本元素\"></a>【1】基本元素</h2><h3 id=\"常见数据类型\"><a href=\"#常见数据类型\" class=\"headerlink\" title=\"常见数据类型\"></a>常见数据类型</h3><ol>\n<li>整形 python3开始整数不区分int和long，支持二，八，十六进制。</li>\n<li>浮点型 可以理解成小数</li>\n<li>字符串 单引号 双引号都可以，三个引号输入多行内容</li>\n<li>布尔型 True False 开头大写</li>\n</ol>\n<blockquote>\n<p>变量名使用_连接 <code>my_var_name</code><br><code>_name_</code>  单下划线开头为受保护的实例属性<br><code>__name__</code>  双下划线开头的为私有属性</p>\n</blockquote>\n<p>使用 <code>type()</code> 来确认类型，使用下面的方法来转换类型：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span>() <span class=\"comment\">#转换成整数 </span></span><br><span class=\"line\"><span class=\"built_in\">float</span>() <span class=\"comment\">#转换成浮点数</span></span><br><span class=\"line\"><span class=\"built_in\">str</span>() <span class=\"comment\">#转换成字符串，可以是字符编码</span></span><br><span class=\"line\"><span class=\"built_in\">chr</span>() <span class=\"comment\">#字符串编码（整数）转换成字符串</span></span><br><span class=\"line\"><span class=\"built_in\">ord</span>() <span class=\"comment\">#活的字符串对应的编码（整数）</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"【2】逻辑语句\"><a href=\"#【2】逻辑语句\" class=\"headerlink\" title=\"【2】逻辑语句\"></a>【2】逻辑语句</h2><h3 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h3><p>除了常见的运算符外，python常用的还有：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">is</span> </span><br><span class=\"line\"><span class=\"keyword\">is</span> <span class=\"keyword\">not</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">in</span> </span><br><span class=\"line\"><span class=\"keyword\">not</span> <span class=\"keyword\">in</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"if分支\"><a href=\"#if分支\" class=\"headerlink\" title=\"if分支\"></a>if分支</h3><p>python的if分支跟函数，类一样都是使用缩进来表示代码的层次结构。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> name == <span class=\"string\">&#x27;a&#x27;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> name == <span class=\"string\">&#x27;b&#x27;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;b&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;c&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"循环结构\"><a href=\"#循环结构\" class=\"headerlink\" title=\"循环结构\"></a>循环结构</h3><p>for-in<br>python一般使用<code>for name in collection</code>的方式来写循环语句</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sum</span> = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100</span>):</span><br><span class=\"line\">    <span class=\"built_in\">sum</span> += x</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">sum</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"【3】函数\"><a href=\"#【3】函数\" class=\"headerlink\" title=\"【3】函数\"></a>【3】函数</h2><h3 id=\"函数定义和参数\"><a href=\"#函数定义和参数\" class=\"headerlink\" title=\"函数定义和参数\"></a>函数定义和参数</h3><p>定义函数的关键字是 <code>def</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">foo</span>(<span class=\"params\">a</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(a)</span><br></pre></td></tr></table></figure>\n\n<p>python中函数的参数可以设置默认值，所以使用的时候可以忽略部分参数或者直接指定某些参数，所以python的函数不需要像Java一样重载</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">a=<span class=\"number\">0</span>, b=<span class=\"number\">0</span>, c=<span class=\"number\">0</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b + c</span><br></pre></td></tr></table></figure>\n\n<p>还可以定义可变参数来接收无法确定个数的参数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">*args</span>):</span><br><span class=\"line\">    total = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> val <span class=\"keyword\">in</span> args:</span><br><span class=\"line\">        total += val</span><br><span class=\"line\">    <span class=\"keyword\">return</span> total</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h3><p>python一个文件就算一个模块，通过<code>import</code>来导入指定模块的内容。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># module1.py</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">foo</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;hello, world&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># module2.py</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">foo</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;hello, world&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># test</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> module1 <span class=\"keyword\">as</span> m1</span><br><span class=\"line\"><span class=\"keyword\">import</span> module2 <span class=\"keyword\">as</span> m2</span><br><span class=\"line\"></span><br><span class=\"line\">m1.foo()</span><br><span class=\"line\">m2.foo()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>还可以直接从模块导入具体的函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> module1 <span class=\"keyword\">import</span> foo</span><br><span class=\"line\"><span class=\"keyword\">from</span> module2 <span class=\"keyword\">import</span> foo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#  后导入的foo会覆盖之前导入的foo，所以这里使用的是module2的foo</span></span><br><span class=\"line\">foo()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"name-‘main‘\"><a href=\"#name-‘main‘\" class=\"headerlink\" title=\"name &#x3D;&#x3D; ‘main‘\"></a><strong>name</strong> &#x3D;&#x3D; ‘<strong>main</strong>‘</h3><p>模块中如果需要写入可执行语句，一般需要包装在 <code>__name__ == &#39;__main__&#39;</code> 中，这样除非直接运行该模块，这些可执行语句是不会被执行的</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">foo</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;hello, world&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    foo()</span><br></pre></td></tr></table></figure>\n\n<p><code>__name__</code> 是python的一个隐藏属性：模块名。 被python解释器直接执行的模块名字叫 <code>__main__</code></p>\n","excerpt":"","more":"<p>1&#x2F;100</p>\n<h2 id=\"【1】基本元素\"><a href=\"#【1】基本元素\" class=\"headerlink\" title=\"【1】基本元素\"></a>【1】基本元素</h2><h3 id=\"常见数据类型\"><a href=\"#常见数据类型\" class=\"headerlink\" title=\"常见数据类型\"></a>常见数据类型</h3><ol>\n<li>整形 python3开始整数不区分int和long，支持二，八，十六进制。</li>\n<li>浮点型 可以理解成小数</li>\n<li>字符串 单引号 双引号都可以，三个引号输入多行内容</li>\n<li>布尔型 True False 开头大写</li>\n</ol>\n<blockquote>\n<p>变量名使用_连接 <code>my_var_name</code><br><code>_name_</code>  单下划线开头为受保护的实例属性<br><code>__name__</code>  双下划线开头的为私有属性</p>\n</blockquote>\n<p>使用 <code>type()</code> 来确认类型，使用下面的方法来转换类型：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span>() <span class=\"comment\">#转换成整数 </span></span><br><span class=\"line\"><span class=\"built_in\">float</span>() <span class=\"comment\">#转换成浮点数</span></span><br><span class=\"line\"><span class=\"built_in\">str</span>() <span class=\"comment\">#转换成字符串，可以是字符编码</span></span><br><span class=\"line\"><span class=\"built_in\">chr</span>() <span class=\"comment\">#字符串编码（整数）转换成字符串</span></span><br><span class=\"line\"><span class=\"built_in\">ord</span>() <span class=\"comment\">#活的字符串对应的编码（整数）</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"【2】逻辑语句\"><a href=\"#【2】逻辑语句\" class=\"headerlink\" title=\"【2】逻辑语句\"></a>【2】逻辑语句</h2><h3 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h3><p>除了常见的运算符外，python常用的还有：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">is</span> </span><br><span class=\"line\"><span class=\"keyword\">is</span> <span class=\"keyword\">not</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">in</span> </span><br><span class=\"line\"><span class=\"keyword\">not</span> <span class=\"keyword\">in</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"if分支\"><a href=\"#if分支\" class=\"headerlink\" title=\"if分支\"></a>if分支</h3><p>python的if分支跟函数，类一样都是使用缩进来表示代码的层次结构。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> name == <span class=\"string\">&#x27;a&#x27;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> name == <span class=\"string\">&#x27;b&#x27;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;b&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;c&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"循环结构\"><a href=\"#循环结构\" class=\"headerlink\" title=\"循环结构\"></a>循环结构</h3><p>for-in<br>python一般使用<code>for name in collection</code>的方式来写循环语句</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sum</span> = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100</span>):</span><br><span class=\"line\">    <span class=\"built_in\">sum</span> += x</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">sum</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"【3】函数\"><a href=\"#【3】函数\" class=\"headerlink\" title=\"【3】函数\"></a>【3】函数</h2><h3 id=\"函数定义和参数\"><a href=\"#函数定义和参数\" class=\"headerlink\" title=\"函数定义和参数\"></a>函数定义和参数</h3><p>定义函数的关键字是 <code>def</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">foo</span>(<span class=\"params\">a</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(a)</span><br></pre></td></tr></table></figure>\n\n<p>python中函数的参数可以设置默认值，所以使用的时候可以忽略部分参数或者直接指定某些参数，所以python的函数不需要像Java一样重载</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">a=<span class=\"number\">0</span>, b=<span class=\"number\">0</span>, c=<span class=\"number\">0</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b + c</span><br></pre></td></tr></table></figure>\n\n<p>还可以定义可变参数来接收无法确定个数的参数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">*args</span>):</span><br><span class=\"line\">    total = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> val <span class=\"keyword\">in</span> args:</span><br><span class=\"line\">        total += val</span><br><span class=\"line\">    <span class=\"keyword\">return</span> total</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h3><p>python一个文件就算一个模块，通过<code>import</code>来导入指定模块的内容。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># module1.py</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">foo</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;hello, world&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># module2.py</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">foo</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;hello, world&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># test</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> module1 <span class=\"keyword\">as</span> m1</span><br><span class=\"line\"><span class=\"keyword\">import</span> module2 <span class=\"keyword\">as</span> m2</span><br><span class=\"line\"></span><br><span class=\"line\">m1.foo()</span><br><span class=\"line\">m2.foo()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>还可以直接从模块导入具体的函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> module1 <span class=\"keyword\">import</span> foo</span><br><span class=\"line\"><span class=\"keyword\">from</span> module2 <span class=\"keyword\">import</span> foo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#  后导入的foo会覆盖之前导入的foo，所以这里使用的是module2的foo</span></span><br><span class=\"line\">foo()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"name-‘main‘\"><a href=\"#name-‘main‘\" class=\"headerlink\" title=\"name &#x3D;&#x3D; ‘main‘\"></a><strong>name</strong> &#x3D;&#x3D; ‘<strong>main</strong>‘</h3><p>模块中如果需要写入可执行语句，一般需要包装在 <code>__name__ == &#39;__main__&#39;</code> 中，这样除非直接运行该模块，这些可执行语句是不会被执行的</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">foo</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;hello, world&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    foo()</span><br></pre></td></tr></table></figure>\n\n<p><code>__name__</code> 是python的一个隐藏属性：模块名。 被python解释器直接执行的模块名字叫 <code>__main__</code></p>\n","path":"2020/12/06/2020-12-06-day-1/","permalink":"https://xsun4231.github.io/2020/12/06/2020-12-06-day-1/","tags":[{"name":"100 days of code","_id":"cm6m2r3x5003qzg9d3gua65ga","slug":"100-days-of-code","path":"tags/100-days-of-code/","permalink":"https://xsun4231.github.io/tags/100-days-of-code/","length":3}],"categories":[],"prev":{"title":"Day2 面向对象相关","date":"2020-12-07T06:50:24.000Z","slug":"2020-12-07-day-2","published":true,"updated":"2025-01-31T15:39:12.962Z","_id":"cm6m2r3wz001xzg9d3bi6aua8","layout":"post","photos":[],"excerpt":"","path":"2020/12/07/2020-12-07-day-2/","permalink":"https://xsun4231.github.io/2020/12/07/2020-12-07-day-2/","__post":true},"next":{"title":"PlantUML（一） 类图","date":"2020-10-12T08:35:23.000Z","slug":"2020-10-12-er-1","published":true,"updated":"2025-01-31T15:39:12.961Z","_id":"cm6m2r3ww001ozg9db4qb867m","layout":"post","photos":[],"excerpt":"","path":"2020/10/12/2020-10-12-er-1/","permalink":"https://xsun4231.github.io/2020/10/12/2020-10-12-er-1/","__post":true},"__post":true}