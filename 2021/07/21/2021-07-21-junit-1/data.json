{"title":"Mockito使い始めて見る","date":"2021-07-21T00:57:31.000Z","source":"_posts/2021-07-21-junit-1.md","raw":"---\ntitle: Mockito使い始めて見る\ntags:\n  - Mockito\n  - JUnit\ndate: 2021-07-21 09:57:31\n---\n\n\nMockitoはクラスの偽のオブジェクトを作ってくれます。\n\n`when().thenReturn()`を利用して、`public`メソッドの戻る値を指定できます。\n```Java\n    @Test\n    public void add_with_when() {\n        List<String> mockedList = mock(List.class);\n        when(mockedList.size()).thenReturn(10);\n        assertThat(mockedList.size(), is(10));\n    }\n```\n\nここは1つ注意しなければならないことがあります。モックで作成したオブジェクトの全てのメソッドが偽物になります。下記の`add()`はモックされたため、リストに追加する処理はありません。\n```Java\n    @Test\n    public void add_without_when() {\n        List<String> mockedList = mock(List.class);\n        mockedList.add(\"A\");\n        mockedList.add(\"B\");\n        mockedList.add(\"C\");\n        assertThat(mockedList.size(), is(0));    \n```\n\n`Answers.CALL_REAL_METHODS`を利用すれば、本物のメソッドを呼べます。\n\n```Java\n    @Test\n    public void call_real_method() {\n        Employee employee = mock(Employee.class, Answers.CALLS_REAL_METHODS);\n        employee.setName(new Name(\"Alice\"));\n        assertThat(employee.getName(), is(\"Alice\"));\n    }\n\n    @Test\n    public void call_real_method_with_when() {\n        Employee employee = mock(Employee.class, Answers.CALLS_REAL_METHODS);\n        employee.setName(new Name(\"Alice\"));\n        when(employee.getName()).thenReturn(new Name(\"Bob\"));\n        assertThat(employee.getName(), is(\"Bob\"));\n    }\n```\n\n","slug":"2021-07-21-junit-1","published":true,"updated":"2025-01-31T15:39:12.964Z","_id":"cm6m2r3x00026zg9dejrm0c7l","comments":true,"layout":"post","photos":[],"html":"<p>Mockitoはクラスの偽のオブジェクトを作ってくれます。</p>\n<p><code>when().thenReturn()</code>を利用して、<code>public</code>メソッドの戻る値を指定できます。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add_with_when</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    List&lt;String&gt; mockedList = mock(List.class);</span><br><span class=\"line\">    <span class=\"keyword\">when</span>(mockedList.size()).thenReturn(<span class=\"number\">10</span>);</span><br><span class=\"line\">    assertThat(mockedList.size(), is(<span class=\"number\">10</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ここは1つ注意しなければならないことがあります。モックで作成したオブジェクトの全てのメソッドが偽物になります。下記の<code>add()</code>はモックされたため、リストに追加する処理はありません。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add_without_when</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    List&lt;String&gt; mockedList = mock(List.class);</span><br><span class=\"line\">    mockedList.add(<span class=\"string\">&quot;A&quot;</span>);</span><br><span class=\"line\">    mockedList.add(<span class=\"string\">&quot;B&quot;</span>);</span><br><span class=\"line\">    mockedList.add(<span class=\"string\">&quot;C&quot;</span>);</span><br><span class=\"line\">    assertThat(mockedList.size(), is(<span class=\"number\">0</span>));    </span><br></pre></td></tr></table></figure>\n\n<p><code>Answers.CALL_REAL_METHODS</code>を利用すれば、本物のメソッドを呼べます。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">call_real_method</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Employee</span> <span class=\"variable\">employee</span> <span class=\"operator\">=</span> mock(Employee.class, Answers.CALLS_REAL_METHODS);</span><br><span class=\"line\">    employee.setName(<span class=\"keyword\">new</span> <span class=\"title class_\">Name</span>(<span class=\"string\">&quot;Alice&quot;</span>));</span><br><span class=\"line\">    assertThat(employee.getName(), is(<span class=\"string\">&quot;Alice&quot;</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">call_real_method_with_when</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Employee</span> <span class=\"variable\">employee</span> <span class=\"operator\">=</span> mock(Employee.class, Answers.CALLS_REAL_METHODS);</span><br><span class=\"line\">    employee.setName(<span class=\"keyword\">new</span> <span class=\"title class_\">Name</span>(<span class=\"string\">&quot;Alice&quot;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">when</span>(employee.getName()).thenReturn(<span class=\"keyword\">new</span> <span class=\"title class_\">Name</span>(<span class=\"string\">&quot;Bob&quot;</span>));</span><br><span class=\"line\">    assertThat(employee.getName(), is(<span class=\"string\">&quot;Bob&quot;</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<p>Mockitoはクラスの偽のオブジェクトを作ってくれます。</p>\n<p><code>when().thenReturn()</code>を利用して、<code>public</code>メソッドの戻る値を指定できます。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add_with_when</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    List&lt;String&gt; mockedList = mock(List.class);</span><br><span class=\"line\">    <span class=\"keyword\">when</span>(mockedList.size()).thenReturn(<span class=\"number\">10</span>);</span><br><span class=\"line\">    assertThat(mockedList.size(), is(<span class=\"number\">10</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ここは1つ注意しなければならないことがあります。モックで作成したオブジェクトの全てのメソッドが偽物になります。下記の<code>add()</code>はモックされたため、リストに追加する処理はありません。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add_without_when</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    List&lt;String&gt; mockedList = mock(List.class);</span><br><span class=\"line\">    mockedList.add(<span class=\"string\">&quot;A&quot;</span>);</span><br><span class=\"line\">    mockedList.add(<span class=\"string\">&quot;B&quot;</span>);</span><br><span class=\"line\">    mockedList.add(<span class=\"string\">&quot;C&quot;</span>);</span><br><span class=\"line\">    assertThat(mockedList.size(), is(<span class=\"number\">0</span>));    </span><br></pre></td></tr></table></figure>\n\n<p><code>Answers.CALL_REAL_METHODS</code>を利用すれば、本物のメソッドを呼べます。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">call_real_method</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Employee</span> <span class=\"variable\">employee</span> <span class=\"operator\">=</span> mock(Employee.class, Answers.CALLS_REAL_METHODS);</span><br><span class=\"line\">    employee.setName(<span class=\"keyword\">new</span> <span class=\"title class_\">Name</span>(<span class=\"string\">&quot;Alice&quot;</span>));</span><br><span class=\"line\">    assertThat(employee.getName(), is(<span class=\"string\">&quot;Alice&quot;</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">call_real_method_with_when</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Employee</span> <span class=\"variable\">employee</span> <span class=\"operator\">=</span> mock(Employee.class, Answers.CALLS_REAL_METHODS);</span><br><span class=\"line\">    employee.setName(<span class=\"keyword\">new</span> <span class=\"title class_\">Name</span>(<span class=\"string\">&quot;Alice&quot;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">when</span>(employee.getName()).thenReturn(<span class=\"keyword\">new</span> <span class=\"title class_\">Name</span>(<span class=\"string\">&quot;Bob&quot;</span>));</span><br><span class=\"line\">    assertThat(employee.getName(), is(<span class=\"string\">&quot;Bob&quot;</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","path":"2021/07/21/2021-07-21-junit-1/","permalink":"https://xsun4231.github.io/2021/07/21/2021-07-21-junit-1/","tags":[{"name":"Mockito","_id":"cm6m2r3x6003zzg9d5shndjz8","slug":"Mockito","path":"tags/Mockito/","permalink":"https://xsun4231.github.io/tags/Mockito/","length":1},{"name":"JUnit","_id":"cm6m2r3x60042zg9de5wyhm1x","slug":"JUnit","path":"tags/JUnit/","permalink":"https://xsun4231.github.io/tags/JUnit/","length":1}],"categories":[],"prev":{"title":"InjectMocksのインジェクト方法","date":"2021-08-04T02:10:32.000Z","slug":"2021-08-04-injectMocks","published":true,"updated":"2025-01-31T15:39:12.964Z","_id":"cm6m2r3x00028zg9d1w9rfc0i","layout":"post","photos":[],"excerpt":"","path":"2021/08/04/2021-08-04-injectMocks/","permalink":"https://xsun4231.github.io/2021/08/04/2021-08-04-injectMocks/","__post":true},"next":{"title":"web.xml 的Servlet配置","date":"2021-04-22T10:40:50.000Z","slug":"2021-04-22-servlet-2-xml","published":true,"updated":"2025-01-31T15:39:12.963Z","_id":"cm6m2r3x00023zg9d59vi15kv","layout":"post","photos":[],"excerpt":"","path":"2021/04/22/2021-04-22-servlet-2-xml/","permalink":"https://xsun4231.github.io/2021/04/22/2021-04-22-servlet-2-xml/","__post":true},"__post":true}