{"title":"InjectMocksのインジェクト方法","date":"2021-08-04T02:10:32.000Z","source":"_posts/2021-08-04-injectMocks.md","raw":"---\ntitle: InjectMocksのインジェクト方法\ntags:\n  - null\ndate: 2021-08-04 11:10:32\n---\n\nテスト対象のインスタンスに `@InjectMocks`をつけると、対象インスタンスのフィルドに`@Mock`されたインスタンスを差し込むことができる。\n\n```java\n    @InjectMocks\n    Manager manager;\n\n    @Mock\n    Name name; // manager.nameはモックされる\n```\n\n## 実現方法\n`InjectMocks`のJavadocを読むと、フィルドのinject方法は3つあります。  \n\n1. Constructor injection;   \n1つ目はコンストラクターを利用してモックインスタンスを設定する。この方法はデフォルトで引数の数が一番多いコンストラクターを利用する。\n要注意なことは、必要なモックインスタンスが見つからない場合、その引数は`null`となる。  \n引数にモックできないタイプ（基本型）がある場合、デフォルトのコンストラクターで`InjectMocks`のインスタンスを作って別の方法でInjectを実現する。\n\n2. Property setter injection; \n2つ目はとてもわかりやすくて、フィルドの`setter`メソッドを利用して、モックインスタンスを差し込む。\n該当の`setter`メソッドを探すとき、まずフィルドのタイプを利用する。同じタイプのフィルドが存在する場合、モックインスタンスの名前を利用する。  \nという理由で、モックインスタンスを定義するとき、できる限り`Inject`対象のフィルドと同じ名前にする方がいい。  \n`Constructor Injection`でデフォルトコンストラクターを利用する場合、モックインスタンスの差し込むはこの方法で実現される。\n\n\n3. Field injection; \nフィルドの`setter`がない場合、直接設定で`Inject`を実現する。ルールは`Property setter injection`と同じ。\n\n","slug":"2021-08-04-injectMocks","published":true,"updated":"2025-01-31T15:39:12.964Z","_id":"cm6m2r3x00028zg9d1w9rfc0i","comments":true,"layout":"post","photos":[],"html":"<p>テスト対象のインスタンスに <code>@InjectMocks</code>をつけると、対象インスタンスのフィルドに<code>@Mock</code>されたインスタンスを差し込むことができる。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@InjectMocks</span></span><br><span class=\"line\">Manager manager;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Mock</span></span><br><span class=\"line\">Name name; <span class=\"comment\">// manager.nameはモックされる</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"実現方法\"><a href=\"#実現方法\" class=\"headerlink\" title=\"実現方法\"></a>実現方法</h2><p><code>InjectMocks</code>のJavadocを読むと、フィルドのinject方法は3つあります。  </p>\n<ol>\n<li><p>Constructor injection;<br>1つ目はコンストラクターを利用してモックインスタンスを設定する。この方法はデフォルトで引数の数が一番多いコンストラクターを利用する。<br>要注意なことは、必要なモックインスタンスが見つからない場合、その引数は<code>null</code>となる。<br>引数にモックできないタイプ（基本型）がある場合、デフォルトのコンストラクターで<code>InjectMocks</code>のインスタンスを作って別の方法でInjectを実現する。</p>\n</li>\n<li><p>Property setter injection;<br>2つ目はとてもわかりやすくて、フィルドの<code>setter</code>メソッドを利用して、モックインスタンスを差し込む。<br>該当の<code>setter</code>メソッドを探すとき、まずフィルドのタイプを利用する。同じタイプのフィルドが存在する場合、モックインスタンスの名前を利用する。<br>という理由で、モックインスタンスを定義するとき、できる限り<code>Inject</code>対象のフィルドと同じ名前にする方がいい。<br><code>Constructor Injection</code>でデフォルトコンストラクターを利用する場合、モックインスタンスの差し込むはこの方法で実現される。</p>\n</li>\n<li><p>Field injection;<br>フィルドの<code>setter</code>がない場合、直接設定で<code>Inject</code>を実現する。ルールは<code>Property setter injection</code>と同じ。</p>\n</li>\n</ol>\n","excerpt":"","more":"<p>テスト対象のインスタンスに <code>@InjectMocks</code>をつけると、対象インスタンスのフィルドに<code>@Mock</code>されたインスタンスを差し込むことができる。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@InjectMocks</span></span><br><span class=\"line\">Manager manager;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Mock</span></span><br><span class=\"line\">Name name; <span class=\"comment\">// manager.nameはモックされる</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"実現方法\"><a href=\"#実現方法\" class=\"headerlink\" title=\"実現方法\"></a>実現方法</h2><p><code>InjectMocks</code>のJavadocを読むと、フィルドのinject方法は3つあります。  </p>\n<ol>\n<li><p>Constructor injection;<br>1つ目はコンストラクターを利用してモックインスタンスを設定する。この方法はデフォルトで引数の数が一番多いコンストラクターを利用する。<br>要注意なことは、必要なモックインスタンスが見つからない場合、その引数は<code>null</code>となる。<br>引数にモックできないタイプ（基本型）がある場合、デフォルトのコンストラクターで<code>InjectMocks</code>のインスタンスを作って別の方法でInjectを実現する。</p>\n</li>\n<li><p>Property setter injection;<br>2つ目はとてもわかりやすくて、フィルドの<code>setter</code>メソッドを利用して、モックインスタンスを差し込む。<br>該当の<code>setter</code>メソッドを探すとき、まずフィルドのタイプを利用する。同じタイプのフィルドが存在する場合、モックインスタンスの名前を利用する。<br>という理由で、モックインスタンスを定義するとき、できる限り<code>Inject</code>対象のフィルドと同じ名前にする方がいい。<br><code>Constructor Injection</code>でデフォルトコンストラクターを利用する場合、モックインスタンスの差し込むはこの方法で実現される。</p>\n</li>\n<li><p>Field injection;<br>フィルドの<code>setter</code>がない場合、直接設定で<code>Inject</code>を実現する。ルールは<code>Property setter injection</code>と同じ。</p>\n</li>\n</ol>\n","path":"2021/08/04/2021-08-04-injectMocks/","permalink":"https://xsun4231.github.io/2021/08/04/2021-08-04-injectMocks/","tags":[],"categories":[],"prev":{"title":"JUnit5から使える @ParameterizedTest","date":"2021-10-20T08:00:16.000Z","slug":"2021-10-20-parameterizedtest","published":true,"updated":"2025-01-31T15:39:12.965Z","_id":"cm6m2r3x70045zg9dfl6qbbym","layout":"post","photos":[],"excerpt":"","path":"2021/10/20/2021-10-20-parameterizedtest/","permalink":"https://xsun4231.github.io/2021/10/20/2021-10-20-parameterizedtest/","__post":true},"next":{"title":"Mockito使い始めて見る","date":"2021-07-21T00:57:31.000Z","slug":"2021-07-21-junit-1","published":true,"updated":"2025-01-31T15:39:12.964Z","_id":"cm6m2r3x00026zg9dejrm0c7l","layout":"post","photos":[],"excerpt":"","path":"2021/07/21/2021-07-21-junit-1/","permalink":"https://xsun4231.github.io/2021/07/21/2021-07-21-junit-1/","__post":true},"__post":true}