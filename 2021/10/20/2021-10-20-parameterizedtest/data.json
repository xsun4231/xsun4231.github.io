{"title":"JUnit5から使える @ParameterizedTest","date":"2021-10-20T08:00:16.000Z","source":"_posts/2021-10-20-parameterizedtest.md","raw":"---\ntitle: JUnit5から使える @ParameterizedTest\ntags:\n  - null\ndate: 2021-10-20 17:00:16\n---\n\n\n`@ParameterizedTest`は指定のテストメソッドに違う引数を順番に渡して処理することで、複数のテストを実現する方法。  \nJUnit5の新しい機能として、使うとき以下のパッケージを依存関係に追加する必要がある。\n```\norg.junit.jupiter:junit-jupiter-params\n```\n\n## 使ってみる\n`@ParameterizedTest`でパラメーター指定のテストケースを声明する。そして`@ValueSource`を利用してパラメーターを指定する（整数:1,2,3）。\n\n\n```java\n    @ParameterizedTest\n    @ValueSource(ints = {1, 2, 3})\n    void test(int i) {\n        System.out.println(i);\n    }\n```\n\nこれで１つのメソッドでテストを3回実行した。  \n`@ParameterizedTest`は`org.junit.jupiter.params.provider`パッケージ下のインタフェースと一緒に使う必要がある。\n\n## DisplayName of ParameterizedTest\n`@ParameterizedTest`はパラメーターごとにテストケースを命名できる。\n\n```java\n    @ParameterizedTest(name = \"input is {0} {1} {2}\")\n    @CsvSource(value = {\"1,a,true\"})\n    void test(int a, String b, boolean c) {\n\n    }\n\n```\n\n使えるplaceholderは以下となる。\n* `{index}` テストケースの番号\n* `{0~n}` 指定番号の引数の値（0から）\n* `{arguments}` 全ても引数\n* `{displayName}` `@DisplayName`で指定する内容、`@DisplayName`がない場合はテストメソッドの名前","slug":"2021-10-20-parameterizedtest","published":true,"updated":"2025-01-31T15:39:12.965Z","_id":"cm6m2r3x70045zg9dfl6qbbym","comments":true,"layout":"post","photos":[],"html":"<p><code>@ParameterizedTest</code>は指定のテストメソッドに違う引数を順番に渡して処理することで、複数のテストを実現する方法。<br>JUnit5の新しい機能として、使うとき以下のパッケージを依存関係に追加する必要がある。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.junit.jupiter:junit-jupiter-params</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使ってみる\"><a href=\"#使ってみる\" class=\"headerlink\" title=\"使ってみる\"></a>使ってみる</h2><p><code>@ParameterizedTest</code>でパラメーター指定のテストケースを声明する。そして<code>@ValueSource</code>を利用してパラメーターを指定する（整数:1,2,3）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ParameterizedTest</span></span><br><span class=\"line\"><span class=\"meta\">@ValueSource(ints = &#123;1, 2, 3&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">    System.out.println(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>これで１つのメソッドでテストを3回実行した。<br><code>@ParameterizedTest</code>は<code>org.junit.jupiter.params.provider</code>パッケージ下のインタフェースと一緒に使う必要がある。</p>\n<h2 id=\"DisplayName-of-ParameterizedTest\"><a href=\"#DisplayName-of-ParameterizedTest\" class=\"headerlink\" title=\"DisplayName of ParameterizedTest\"></a>DisplayName of ParameterizedTest</h2><p><code>@ParameterizedTest</code>はパラメーターごとにテストケースを命名できる。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ParameterizedTest(name = &quot;input is &#123;0&#125; &#123;1&#125; &#123;2&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@CsvSource(value = &#123;&quot;1,a,true&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">(<span class=\"type\">int</span> a, String b, <span class=\"type\">boolean</span> c)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>使えるplaceholderは以下となる。</p>\n<ul>\n<li><code>&#123;index&#125;</code> テストケースの番号</li>\n<li><code>&#123;0~n&#125;</code> 指定番号の引数の値（0から）</li>\n<li><code>&#123;arguments&#125;</code> 全ても引数</li>\n<li><code>&#123;displayName&#125;</code> <code>@DisplayName</code>で指定する内容、<code>@DisplayName</code>がない場合はテストメソッドの名前</li>\n</ul>\n","excerpt":"","more":"<p><code>@ParameterizedTest</code>は指定のテストメソッドに違う引数を順番に渡して処理することで、複数のテストを実現する方法。<br>JUnit5の新しい機能として、使うとき以下のパッケージを依存関係に追加する必要がある。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.junit.jupiter:junit-jupiter-params</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使ってみる\"><a href=\"#使ってみる\" class=\"headerlink\" title=\"使ってみる\"></a>使ってみる</h2><p><code>@ParameterizedTest</code>でパラメーター指定のテストケースを声明する。そして<code>@ValueSource</code>を利用してパラメーターを指定する（整数:1,2,3）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ParameterizedTest</span></span><br><span class=\"line\"><span class=\"meta\">@ValueSource(ints = &#123;1, 2, 3&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">    System.out.println(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>これで１つのメソッドでテストを3回実行した。<br><code>@ParameterizedTest</code>は<code>org.junit.jupiter.params.provider</code>パッケージ下のインタフェースと一緒に使う必要がある。</p>\n<h2 id=\"DisplayName-of-ParameterizedTest\"><a href=\"#DisplayName-of-ParameterizedTest\" class=\"headerlink\" title=\"DisplayName of ParameterizedTest\"></a>DisplayName of ParameterizedTest</h2><p><code>@ParameterizedTest</code>はパラメーターごとにテストケースを命名できる。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ParameterizedTest(name = &quot;input is &#123;0&#125; &#123;1&#125; &#123;2&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@CsvSource(value = &#123;&quot;1,a,true&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">(<span class=\"type\">int</span> a, String b, <span class=\"type\">boolean</span> c)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>使えるplaceholderは以下となる。</p>\n<ul>\n<li><code>&#123;index&#125;</code> テストケースの番号</li>\n<li><code>&#123;0~n&#125;</code> 指定番号の引数の値（0から）</li>\n<li><code>&#123;arguments&#125;</code> 全ても引数</li>\n<li><code>&#123;displayName&#125;</code> <code>@DisplayName</code>で指定する内容、<code>@DisplayName</code>がない場合はテストメソッドの名前</li>\n</ul>\n","path":"2021/10/20/2021-10-20-parameterizedtest/","permalink":"https://xsun4231.github.io/2021/10/20/2021-10-20-parameterizedtest/","tags":[],"categories":[],"prev":{"title":"Vue.js プロジェクトの構造","date":"2021-11-12T11:55:02.000Z","slug":"2021-11-12-vue-project","published":true,"updated":"2025-01-31T15:39:12.965Z","_id":"cm6m2r3x70047zg9ddkikaix4","layout":"post","photos":[],"excerpt":"","path":"2021/11/12/2021-11-12-vue-project/","permalink":"https://xsun4231.github.io/2021/11/12/2021-11-12-vue-project/","__post":true},"next":{"title":"InjectMocksのインジェクト方法","date":"2021-08-04T02:10:32.000Z","slug":"2021-08-04-injectMocks","published":true,"updated":"2025-01-31T15:39:12.964Z","_id":"cm6m2r3x00028zg9d1w9rfc0i","layout":"post","photos":[],"excerpt":"","path":"2021/08/04/2021-08-04-injectMocks/","permalink":"https://xsun4231.github.io/2021/08/04/2021-08-04-injectMocks/","__post":true},"__post":true}