<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Define Functions in JavaScript</title>
      <link href="/2018/07/17/2018-07-17-FunctionDefinition/"/>
      <url>/2018/07/17/2018-07-17-FunctionDefinition/</url>
      
        <content type="html"><![CDATA[<blockquote><p>需要什么，就去学什么咯。</p></blockquote><p>JavaScript中定义函数，通常会遇到以下两种写法：</p><p>写法A<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">name1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>写法B<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>这两种写法有什么区别呢？很久很久以前,<a href="https://stackoverflow.com/questions/336859/var-functionname-function-vs-function-functionname" target="_blank" rel="noopener">stackoverflow</a>上面有人问了一样的问题。</p><h2 id="funciton的基本定义"><a href="#funciton的基本定义" class="headerlink" title="funciton的基本定义"></a>funciton的基本定义</h2><p>首先，在JavaScript中function的最基本定义方法是写法A，这种定义的内容在脚本被编译时就会执行，生成一个有名字的函数对象。</p><p>而写法B实际上是定义了一个无名的函数对象，又将这个对象赋给了一个有名字的变量。<br>这种写法的存在，方便了我们将函数定义为对象的属性：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> target = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">target.add = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;;</span><br><span class="line">target.add(<span class="number">1</span>,<span class="number">1</span>); <span class="comment">//2</span></span><br></pre></td></tr></table></figure></p><p>所以写法A定义的是一个完整的函数对象，而写法B定义的函数是没有名字的，<code>name2</code>是变量的名字，而不是函数的。</p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>其实还可以使用<code>new</code>来声明函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"return a+b;"</span>);</span><br></pre></td></tr></table></figure></p><p>这里注意使用的是<code>Function</code>而不是<code>function</code>，这是具体的定义了一个<code>Function</code>类型的对象。速度慢，只有在特定情况下使用，比如想要让用户去控制函数内容的时候。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Immediately Invoked Function Exception in JavaScript</title>
      <link href="/2018/06/20/2018-06-20-ImmediatelyInvokedFunctionException/"/>
      <url>/2018/06/20/2018-06-20-ImmediatelyInvokedFunctionException/</url>
      
        <content type="html"><![CDATA[<blockquote><p>需要什么，就去学什么咯。</p></blockquote><h1 id="自执行-立即调用的函数表达式"><a href="#自执行-立即调用的函数表达式" class="headerlink" title="自执行-立即调用的函数表达式"></a>自执行-立即调用的函数表达式</h1><p>在某些情况下，我们不需要函数创建多个实例，也不需要对返回值做什么处理，便可以通过在函数声明的后面添加<code>()</code>来实现自执行。因为<code>foo</code>仅仅是<code>function(){}</code>这个表达式的一个引用，在函数表达时候后添加<code>()</code>便可以执行。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//do something.</span></span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure></p><p>但如果我们像下面这么写，会报错：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//do somthing.</span></span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><p>给括号里加入参数的话，可以不报错，但是函数不会执行，因为它会被解析成一个毫不相关的括号。<br>报错原因：解析代码的时候，function已经被识别为声明函数用，而不是一个函数表达式。<br>所以我们要做的就是把括号前面的内容解析成表达式，以下的写法都可以：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">makeCounter</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"invoked by ()"</span>);</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="function"><span class="keyword">function</span> <span class="title">makeCounter</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"invoked by var with ()"</span>);</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"invoked by !"</span>);</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">~<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"invoked by ~"</span>);</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">+<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"invoked by +"</span>);</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">-<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"invoked by -"</span>);</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"invoked by new"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"invoked by new with ()"</span>);</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>About NaN in Java</title>
      <link href="/2018/05/29/2018-05-29-NaN/"/>
      <url>/2018/05/29/2018-05-29-NaN/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>在学习JavaScript时看到了Number类型中的NaN和Infinity，因为概念本身是通用的，所以趁机总结了一下Java中的NaN和Infinity。</p><h1 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h1><p>Java的Float型和Double型各有三个很特别的常量：NaN(非数），POSITIVE_INFINITY(正无穷)，NEGATIVE_INFINITY(负无穷)</p><p><strong>Float</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A constant holding the positive infinity of type</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> float&#125;. It is equal to the value returned by</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> Float.intBitsToFloat(0x7f800000)&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> POSITIVE_INFINITY = <span class="number">1.0f</span> / <span class="number">0.0f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A constant holding the negative infinity of type</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> float&#125;. It is equal to the value returned by</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> Float.intBitsToFloat(0xff800000)&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> NEGATIVE_INFINITY = -<span class="number">1.0f</span> / <span class="number">0.0f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A constant holding a Not-a-Number (NaN) value of type</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> float&#125;.  It is equivalent to the value returned by</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> Float.intBitsToFloat(0x7fc00000)&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> NaN = <span class="number">0.0f</span> / <span class="number">0.0f</span>;</span><br></pre></td></tr></table></figure></p><p><strong>Double</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A constant holding the positive infinity of type</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> double&#125;. It is equal to the value returned by</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> Double.longBitsToDouble(0x7ff0000000000000L)&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> POSITIVE_INFINITY = <span class="number">1.0</span> / <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A constant holding the negative infinity of type</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> double&#125;. It is equal to the value returned by</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> Double.longBitsToDouble(0xfff0000000000000L)&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> NEGATIVE_INFINITY = -<span class="number">1.0</span> / <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A constant holding a Not-a-Number (NaN) value of type</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> double&#125;. It is equivalent to the value returned by</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> Double.longBitsToDouble(0x7ff8000000000000L)&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> NaN = <span class="number">0.0</span>d / <span class="number">0.0</span>;</span><br></pre></td></tr></table></figure></p><h1 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h1><p>NaN是<code>Not a Number</code>的缩写，表示未定义或者不可表示的值，NaN有一个特性，那就是它与任何数都不相等，包括它自己。判断一个数是不是NaN，<strong>只能</strong>使用Float或者Double的<code>isNaN()</code>方法，那么这个方法是怎么判断的呢？我们看一看(查看的是Float版，Double除了参数类型都一样，下面二者没有区别的部分都直接使用Float的内容来说明)：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns &#123;<span class="doctag">@code</span> true&#125; if the specified number is a</span></span><br><span class="line"><span class="comment"> * Not-a-Number (NaN) value, &#123;<span class="doctag">@code</span> false&#125; otherwise.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   v   the value to be tested.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  &#123;<span class="doctag">@code</span> true&#125; if the argument is NaN;</span></span><br><span class="line"><span class="comment"> *          &#123;<span class="doctag">@code</span> false&#125; otherwise.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNaN</span><span class="params">(<span class="keyword">float</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (v != v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以，跟自己不相等的数字，就是NaN.</p><h2 id="计算中产生的NaN"><a href="#计算中产生的NaN" class="headerlink" title="计算中产生的NaN"></a>计算中产生的NaN</h2><p>什么时候会产生NaN呢？首先，任何与NaN进行的运算，其结果都是NaN.比如下面的运算，不要去想太多，结果就是<code>NaN</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">var</span> x = Float.NaN;</span><br><span class="line"><span class="keyword">var</span> y = x - x + <span class="number">1</span>;</span><br><span class="line">System.out.println(y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其次，从数学角度讲，无法进行的运算(<code>N/0</code>)或者会产生复数的运算(<code>sqrt(-N)</code>)，都会产生NaN。</p><p>(咕咕咕，后面的笔记被鸽了)</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript Memo</title>
      <link href="/2018/04/26/2018-04-26-JavaScript/"/>
      <url>/2018/04/26/2018-04-26-JavaScript/</url>
      
        <content type="html"><![CDATA[<p>Successes differ from errors in that their body may not be a simple response object with a code and a message. The headers however are consistent across all calls:</p><ul><li><code>GET</code>, <code>PUT</code>, <code>DELETE</code> returns <code>200 OK</code> on success,</li><li><code>POST</code> returns 201 on success,</li></ul><p>When <a href="#get-stuff">retrieving stuff</a> for example:</p><figure class="highlight plain"><figcaption><span>200 OK```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">```&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        id: thing_1,</span><br><span class="line">        name: &apos;My first thing&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        id: thing_2,</span><br><span class="line">        name: &apos;My second thing&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h3><p>Error responses are simply returning <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" target="_blank" rel="noopener">standard HTTP error codes</a> along with some additional information:</p><ul><li>The error code is sent back as a status header,</li><li>The body includes an object describing both the code and message (for debugging and/or display purposes),</li></ul><p>For a call with an invalid authentication token for example:</p><figure class="highlight plain"><figcaption><span>401 Access denied```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">```&#123;</span><br><span class="line">    code: 401,</span><br><span class="line">    message: &apos;Access denied: invalid authentication token.&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>JavaScript使用的是ECMA(European Computer Manufacturers Association)的ECMAScript标准,也就是人们常说的ES6,ES7,ES8.而JavaScript本身是网景公司(Netscape)对ES标准的一种实现,JavaScript是该公司的注册商标.(这也是前阵子苹果下架了所有名称里带JavaScript的app的原因)</p><blockquote><p>JavaScript 是Brendan Eich用两周写出来的一种语言.所以有点设计缺陷也可以理解,比如<code>typeof null == &quot;object&quot;</code><br>由于浏览器确定了使用的JavaScript版本,所以写JavaScript程序时,要注意ES版本与浏览器的支持是否匹配.</p></blockquote><h1 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h1><h2 id="写在哪里"><a href="#写在哪里" class="headerlink" title="写在哪里"></a>写在哪里</h2><p>JavaScript的代码可以直接写在网页html里,也可以单独写在js文件中.<br>html里的JavaScript代码要写在 <code>&lt;scrpt&gt;</code> 标签内,标签的 <code>type</code> 属性不需要定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    alert(&apos;Hello, World!&apos;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>我们也可以把<figure class="highlight plain"><figcaption><span>World!')```单独写在一个js文件中,取个名字`hello.js`,然后把js文件的引用写入html的head中(其实写在body里也能跑)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;script src=&quot;hello.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h2 id="简单语法"><a href="#简单语法" class="headerlink" title="简单语法"></a>简单语法</h2><p>JavaScript每个语句以<code>;</code>结束,JavaScript的引擎会自动添加,所以这里并不强制要求,不过因为自动添加的<code>;</code>有时会造成歧义,所以手动添加还是最保险的.</p><p>赋值语句<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p><p>条件判断<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( <span class="number">1</span> &gt; <span class="number">0</span> )&#123;</span><br><span class="line">    x = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>一般规范：4空格缩进,80字换行</p></blockquote><p>另外跟Java一样,JavaScript的注释写法也是<code>//</code>和<code>/* */</code>,JavaScript也对大小写敏感.</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ol><li>JavaScript是动态语言,变量的声明使用<strong>var</strong>,赋值使用<strong>=</strong>.  </li><li>使用var声明的变量其<a href="#heading-作用域">作用域</a>都在函数内，而不使用var声明的变量则是全局变量.  </li><li>变量名要求由大小写英文,数字,<code>$</code>和<code>_</code>组成,不可以用数字开头,也不可以使用JavaScript的关键字作为变量名.</li></ol><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="基本型"><a href="#基本型" class="headerlink" title="基本型"></a>基本型</h2><p>JavaScript有五种基本类型：</p><ul><li>number</li><li>string</li><li>boolean</li><li>undefined</li><li>null</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">1</span>;<span class="comment">//"number"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">"abc"</span>;<span class="comment">//"string"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span>;<span class="comment">//"boolean"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>;<span class="comment">//"undefined"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>;<span class="comment">//"object"</span></span><br></pre></td></tr></table></figure><h3 id="数字型-Number"><a href="#数字型-Number" class="headerlink" title="数字型 Number"></a>数字型 Number</h3><p>JavaScript中数字型不区分整数和浮点数,正、负、整数、浮点数、NaN、Infinity都是Number型,可直接进行运算.</p><blockquote><p>NaN: Not a Number </p><p>Infinity: ∞ 无穷大</p></blockquote><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>JavaScript中字符串可以用双引号<code>&quot;</code>,也可以用单引号<code>&#39;</code>来表示.</p><h3 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h3><p>JavaScript中的布尔型由true和false构成,以及 <strong>与,或,取反</strong>的运算都与Java相同.</p><blockquote><p>JavaScript中进行比较的时候,如果使用<code>==</code>,会自动转换类型再进行比较,不转换类型的比较则需使用三个等号<code>===</code>.<br><img src="/img/JavaScript/equals.PNG" alt="比较运算"></p></blockquote><blockquote><p>NaN与所有Number都不相等,包括它自己,判断NaN的时候只能使用<code>isNaN()</code>.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">isNaN</span>(<span class="literal">NaN</span>) <span class="comment">//true</span></span><br><span class="line">&gt;<span class="comment">// function isNaN(a)&#123;</span></span><br><span class="line">&gt;<span class="comment">//     return a != a;</span></span><br><span class="line">&gt;<span class="comment">// &#125;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>JavaScript的浮点数在运算时会产生误差,直接进行比较会出现错误结果.这点在Java中也是一样，所以要进行精确比较的时候,不应该使用浮点型.<br>　<br><img src="/img/JavaScript/float.PNG" alt="浮点误差">  </p><p>可以通过检测误差绝对值来进行比较:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">Math</span>.abs(<span class="number">1</span>/<span class="number">3</span> - (<span class="number">1</span> - <span class="number">2</span>/<span class="number">3</span>)) &lt; <span class="number">0.000001</span>; \\<span class="literal">true</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="空值和未定义"><a href="#空值和未定义" class="headerlink" title="空值和未定义"></a>空值和未定义</h3><p>JavaScript中类似于Java,也通过<strong>null</strong>来表示空值,空值与长度为零的字符串不同.JavScript同时还定义了一个表示未定义的常量<strong>undefined</strong>.一般在检测参数时可以用到,未输入的参数会被当做<strong>undefined</strong>处理.</p><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><h3 id="数组-Array"><a href="#数组-Array" class="headerlink" title="数组 Array"></a>数组 Array</h3><p>JavaScript通过<code>[]</code>来表示数组,使用<code>,</code>来分隔元素.也可以用<code>new Array(1,2,3);</code>来定义数组.数组中的元素可以是任意的数据类型,通过索引<code>arr[index]</code>来访问.</p><h3 id="对象-Object"><a href="#对象-Object" class="headerlink" title="对象 Object"></a>对象 Object</h3><p>JavaScript的对象是由成对的<strong>key-value</strong>组成的无序集合.<strong>key</strong>都是字符串,<strong>value</strong>可以是任意数据类型.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: <span class="string">'Bob'</span>,</span><br><span class="line">  age: <span class="number">23</span>,</span><br><span class="line">  tags: [<span class="string">'person'</span>, <span class="string">'young'</span>],</span><br><span class="line">  married: <span class="literal">false</span>,</span><br><span class="line">  code: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过以下格式获取对象的属性：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">person.name;<span class="comment">// Bob</span></span><br><span class="line">person.age; <span class="comment">// 23</span></span><br></pre></td></tr></table></figure></p><h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><p>传统的编程语言,作用域一般是块级,也就是一个<code>{}</code>内是一个作用域,所以在<code>if else while for</code>的范围内定义的局部变量不会影响到外面.而JavaScript的作用域是函数级,一个<code>function</code>为一个作用域,在函数内部定义的变量,不受函数内部语法块的影响.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>; <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">2</span>; <span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line">condole.log(x); <span class="comment">//2</span></span><br></pre></td></tr></table></figure></p><p>如果一定要实现块作用域的话,便需要插入函数来起到划分的作用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>; <span class="comment">//1</span></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">2</span>;<span class="comment">//2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(x);<span class="comment">//1</span></span><br></pre></td></tr></table></figure></p><h3 id="函数作用域提升"><a href="#函数作用域提升" class="headerlink" title="函数作用域提升"></a>函数作用域提升</h3><p>函数声明分为：声明式 和 变量式</p><p>声明式会自动将声明放在函数最前面,并执行赋值的内容.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以下面的函数没有问题<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="string">"test"</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">arg</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg); <span class="comment">//test</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>变量式会将声明提升到函数最前,而后再赋值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = funciton()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以下面的代码中,函数被声明之后,还没有赋值,便被执行,会报错.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">baz(<span class="string">"baz"</span>); <span class="comment">//baz is not a function</span></span><br><span class="line"><span class="keyword">var</span> baz = <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>需要注意的是,变量式声明中的函数,是不会被提升作用域的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> baz = <span class="function"><span class="keyword">function</span> <span class="title">spam</span>(<span class="params">arg</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(arg &lt; <span class="number">5</span>)&#123;</span><br><span class="line">    spam(arg + <span class="number">1</span>);<span class="comment">//只在函数的作用域内有效</span></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">baz(<span class="number">1</span>); <span class="comment">//5</span></span><br><span class="line">spam(<span class="number">1</span>);<span class="comment">//spam is not defined</span></span><br></pre></td></tr></table></figure></p><blockquote><blockquote><p>使用var声明的变量或者函数,要放到其作用域的顶端.</p></blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Couch Backup Memo</title>
      <link href="/2018/04/13/2018-4-13-CouchDB_couchbackup/"/>
      <url>/2018/04/13/2018-4-13-CouchDB_couchbackup/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文 <a href="https://github.com/cloudant/couchbackup" target="_blank" rel="noopener">couchbackup</a>。</p></blockquote><h1 id="前提介绍"><a href="#前提介绍" class="headerlink" title="前提介绍"></a>前提介绍</h1><p>CouchBackup 是一个用来备份和还原数据的命令行工具，它只是简单的生成或者读取一个保存数据的文件，并不支持过于复杂的数据库结构，比如在数据库中插入其他文件。<br>安装使用CouchBackup前要确认已经安装了正确版本的<code>Node.js</code>和<code>CouchDB</code><br>安装couchbackup的命令是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @cloudant/couchbackup</span><br></pre></td></tr></table></figure></p><h1 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h1><p>设置CouchDB的URl可以使用下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export COUCH_URL=http://localhost:5984</span><br></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export COUCH_URL=https://myusername:mypassword@myhost.cloudant.com</span><br></pre></td></tr></table></figure></p><p>指定数据库的名字可以使用以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export COUCH_DATABASE=animal_db</span><br></pre></td></tr></table></figure></p><p>不过我们可以在备份还原的时候直接指定参数<code>--url</code>和<code>--db</code></p><h1 id="备份和还原"><a href="#备份和还原" class="headerlink" title="备份和还原"></a>备份和还原</h1><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><p>可以使用以下的指令对环境变量指定的数据库进行备份：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">couchbackup &gt; fileName.txt</span><br></pre></td></tr></table></figure></p><p>也可以使用参数指定备份的数据库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Couchbackup --db animal_db &gt; fileName.txt</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Intellj IDEA Memo</title>
      <link href="/2018/03/05/2018-03-05-IntellJ_IDEA/"/>
      <url>/2018/03/05/2018-03-05-IntellJ_IDEA/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“这里应该怎么设置来着？ ”</p></blockquote><h1 id="配置propertity文件时，显示UTF-8编码的方法"><a href="#配置propertity文件时，显示UTF-8编码的方法" class="headerlink" title="配置propertity文件时，显示UTF-8编码的方法"></a>配置propertity文件时，显示UTF-8编码的方法</h1><p>直接打开propertity文件的话，UTF-8编码会直接显示ASCII编码而不是文字，可以在设置里修改：<br><code>File -&gt; Setting -&gt; Editor -&gt; File Encoding</code><br>下找到.propertity文件的设置，勾选<br><code>transparent native to ascii conversion</code></p><h1 id="Uppercase-amp-lowercase"><a href="#Uppercase-amp-lowercase" class="headerlink" title="Uppercase &amp; lowercase"></a>Uppercase &amp; lowercase</h1><p>It is possible to encode non-ASCII symbols using both uppercase and lowercase hex sequences (for example, <strong>\u00E3</strong> and <strong>\u00e3</strong>). By default, only uppercase sequences are enabled. To use lowercase hex sequences, set the <code>idea.native2ascii.lowercase</code> property in the <strong>idea.properties</strong> file to <code>true</code>.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Eclipse Memo</title>
      <link href="/2017/12/22/2017-12-22-Eclipse/"/>
      <url>/2017/12/22/2017-12-22-Eclipse/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“这里应该怎么设置来着？ ”</p></blockquote><h1 id="Web-Application-Library添加本地工程"><a href="#Web-Application-Library添加本地工程" class="headerlink" title="Web Application Library添加本地工程"></a>Web Application Library添加本地工程</h1><p>在一个项目的Web App Libraries 中添加jar包便可以为项目添加功能,<br>那么开发中的工程如何添加到libraries中呢？</p><p>在项目上右键 -&gt; Deployment Assembly -&gt; add -&gt; project.</p><h1 id="显示-隐藏-空白符号"><a href="#显示-隐藏-空白符号" class="headerlink" title="显示/隐藏 空白符号"></a>显示/隐藏 空白符号</h1><p>图中的缩进和换行处出现的符号，可以在设置中改为不显示</p><p><img src="/img/eclipse/space/3.PNG" alt="whitespace"></p><p>具体的设置在<br><code>Windows/Preferences/General/Editors/Text Editors</code></p><p><img src="/img/eclipse/space/2.PNG" alt="setting"></p><p>取消勾选 <code>Show whitespace characters</code></p><p><del>或者在 <code>configure visibility</code> 中进行详细的设置.</del></p><p>然后世界就干净了：</p><p><img src="/img/eclipse/space/1.PNG" alt="OK"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>markdown</title>
      <link href="/2017/11/18/2017-11-18-Markdown/"/>
      <url>/2017/11/18/2017-11-18-Markdown/</url>
      
        <content type="html"><![CDATA[<blockquote><p>内容整理自 <a href="https://www.markdowntutorial.com/" target="_blank" rel="noopener">markdowntutorial</a>,绝对30分钟学会一门语言。</p></blockquote><h2 id="粗体和斜体"><a href="#粗体和斜体" class="headerlink" title="粗体和斜体"></a>粗体和斜体</h2><h4 id="斜体"><a href="#斜体" class="headerlink" title="_斜体_"></a>_斜体_</h4><p><code>_Italic_</code><br>输入内容的前后添加下划线，使字体变为斜体。</p><h4 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a><strong>粗体</strong></h4><p><code>**Bold**</code><br>输入内容的前后添加星号，使字体变为粗体。</p><h4 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a><del>删除线</del></h4><p><code>~~删除线~~</code><br>输入内容的前后加波浪线，在文字上添加删除划线。</p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Header one</span><br><span class="line">## Header two</span><br><span class="line">### Header three</span><br><span class="line">#### Header four</span><br><span class="line">##### Header five</span><br><span class="line">###### Header six</span><br></pre></td></tr></table></figure><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><h4 id="完整的链接"><a href="#完整的链接" class="headerlink" title="完整的链接"></a>完整的链接</h4><p><code>[Iterator的主页](http://www.iterator-sun.com)</code> <a href="http://www.iterator-sun.com" target="_blank" rel="noopener">Iterator的主页</a><br>链接的书写格式： 方括号+圆括号的组合 方括号内为页面显示内容，圆括号内为链接URL</p><h4 id="参照"><a href="#参照" class="headerlink" title="参照"></a>参照</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">巴拉巴拉巴拉巴拉 [从这里进入][链接标签]</span><br><span class="line">巴拉巴拉巴拉巴拉巴拉</span><br><span class="line"></span><br><span class="line">[链接标签]: http://www.iterator-sun.com</span><br></pre></td></tr></table></figure><p>巴拉巴拉巴拉巴拉 <a href="http://www.iterator-sun.com" target="_blank" rel="noopener">从这里进入</a><br>巴拉巴拉巴拉巴拉巴拉</p><p>设置参照与设置链接方法基本相同，只是在链接URL前面单独设置一个标签，标签可反复使用。</p><h2 id="插入（图片）"><a href="#插入（图片）" class="headerlink" title="插入（图片）"></a>插入（图片）</h2><p><code>![这是一张很可爱的图片](https://octodex.github.com/images/spidertocat.png)</code></p><p><img src="https://octodex.github.com/images/spidertocat.png" alt="这是一张很可爱的图片"></p><p>图片的是指方法与链接的设置方法基本相同，只是在方括号前面添加叹号。</p><blockquote><p>图片的链接同样可以设置为参照</p></blockquote><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><code>&gt; 孟子曰：孔子说的对。</code></p><blockquote><p>孟子曰：孔子说的对。</p></blockquote><p>在文字块(以换行结束)前添加大于号(右尖括号)，则将整个文字块设置成引用。<br>将多个段落设置成一个引用块时，在每一个新段落(换行后)添加大于号。</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">* milk</span><br><span class="line">* egg</span><br><span class="line">* apple</span><br><span class="line">    1. fuji</span><br><span class="line">    2. fuji2</span><br><span class="line">    3. fuji3</span><br><span class="line">* banana</span><br><span class="line">* people</span><br><span class="line">    1. AAA</span><br><span class="line">    1. BBB</span><br><span class="line">    1. CCC</span><br></pre></td></tr></table></figure><ul><li>milk</li><li>egg</li><li>apple<ol><li>fuji</li><li>fuji2</li><li>fuji3</li></ol></li><li>banana<ol><li>AAA</li><li>BBB</li><li>CCC</li></ol></li></ul><p>列表用星号来标记，在星号前添加缩进来增加层次，使用数字代替星号可以将标签变为数字。</p><blockquote><p>数字内容与显示的标签顺序，参照banana</p></blockquote><h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一段</span><br><span class="line">第二段</span><br><span class="line">第三段</span><br></pre></td></tr></table></figure><p>代码块外的单一换行不会被识别，可以使用多个换行来制造强制换行，不过会造成很大的间距。</p><p><strong>第一段</strong><br><strong>第二段</strong></p><p><strong>第三段</strong></p><p>标准的换行是在行位添加两个空格：</p><p><strong>第一段</strong><br><strong>第二段</strong><br><strong>第三段</strong></p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># A comment</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'hello world'</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">三个` python</span><br><span class="line">@requires_authorization</span><br><span class="line">class SomeClass:</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    # A comment</span><br><span class="line">    print &apos;hello world&apos;</span><br><span class="line"></span><br><span class="line">三个`</span><br></pre></td></tr></table></figure><h2 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| ID     | NAME | AGE   |</span><br><span class="line">| :---- | ----: | :---: |</span><br><span class="line">| 00001 | AAAA |  5    |</span><br><span class="line">| 002 | BB |  12   |</span><br><span class="line">| 03 | CCC |  9  |</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">ID</th><th style="text-align:right">NAME</th><th style="text-align:center">AGE</th></tr></thead><tbody><tr><td style="text-align:left">00001</td><td style="text-align:right">AAAA</td><td style="text-align:center">5</td></tr><tr><td style="text-align:left">002</td><td style="text-align:right">BB</td><td style="text-align:center">12</td></tr><tr><td style="text-align:left">03</td><td style="text-align:right">CCC</td><td style="text-align:center">9</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> tool </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
