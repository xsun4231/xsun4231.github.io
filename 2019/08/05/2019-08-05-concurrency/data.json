{"title":"Concurrency - Java的并发编程","date":"2019-08-05T01:30:11.000Z","source":"_posts/2019-08-05-concurrency.md","raw":"---\ntitle: Concurrency - Java的并发编程\ntags:\n  - 未填之坑\ndate: 2019-08-05 10:30:11\n---\nConcurrency的意思是并发性，或者并行性（日语），顾名思义指的是同时处理不同的任务。并发编程的核心线程，可以简单地理解成RTS游戏里的“工人“单位:一个工人同一时间只能执行一个建造任务，增加工人可以增加建造序列的数量，也可以通过给工人切换建造任务来**看起来**增加建造序列，而这里的微操，全都是由系统来控制的。\n所以，并发编程并不针对多核CPU，即使只有一个CPU，也可以通过分时段的线程切换来实现多个线程的并发执行。\n\n## Java的基本多线程写法\n首先是线程的最基本写法。Java中有两种最基本的线程编写方法：\n1. 继承Thread类，在`run()`中书写程序内容，使用`start()`来启动线程。\n```Java\npublic class Sample{\n    public static void main(String... args) {\n        WorkerA a = new WorkerA();\n        WorkerB b = new WorkerB();\n        // 这里我们有两个工人，可以同时启动两个建造任务了\n        a.start();\n        b.start();\n    }\n}\n\nclass WorkerA extends Thread {\n    /**\n    * 在run里写上具体要给这个工人分配的任务\n    */\n    @Override\n    public void run() {\n        for (int i = 0; i < 10; i++) {\n            System.out.print(\"Yes, my lord. \" + i);\n        }\n        System.out.println(\"Building cpmolete.\");\n    }\n}\n\nclass WorkerB extends Thread {\n    @Override\n    public void run() {\n        for (int i = 0; i < 10; i++) {\n            System.out.print(\"了解。\" + i);\n        }\n        System.out.println(\"任務完了。\");\n    }\n}\n\n```\n\n2. 实现Runnable接口。`Thread`的构造体可以接受一个Runnable的参数，所以我们也可以通过写一个实现了Runnable接口的类来生成线程。虽然也是在run方法中写所要执行的任务，但是实现Runnable的类是作为生成线程的参数来使用，所以我们可以理解为创建了一类工作，然后以该工作为参数创建(灵魂召唤)多个工人来执行。\n```Java\n  public class Sample {\n    public static void main(String[] args) {\n        // 我们创建了两个同样的工人，会执行同一种建造任务，比如都去造房子（卡人口不可取）\n        Work work = new Work();\n\n        Thread workerA = new Thread(work);\n        Thread workerB = new Thread(work);\n\n        workerA.start();\n        workerB.start();\n    }\n}\n\nclass Work implements Runnable {\n    @Override\n    public void run() {\n        for (int i = 0; i < 10; i++) {\n            System.out.print(\"Yes, my lord. \" + i);\n        }\n        System.out.println(\"Building cpmolete.\");\n    }\n}\n\n```\n**Runnable也可以使用Lambda表达式来定义**，这样我们就可以直接写run方法的内容而不用去定义一整个类了。\n```Java\nThread c = new Thread(() -> {\n    for (int i = 0; i < 10; i++) {\n        System.out.println(\"C \" + i);\n    }\n});\nc.start();\n```\n\n### 线程的状态和优先级\n`java.lang`的列举型Thread.State中定义了6中线程状态：\n```Java\n/**\n* A Thread which has not yet started.\n*/\nNEW,\n/**\n* A Thread which is running or suspended.\n*/\nRUNNABLE,\n/**\n* A Thread which is blocked on a monitor.\n*/\nBLOCKED, \n/**\n* A Thread which is waiting with no timeout.\n*/\nWAITING,\n/**\n* A Thread which is waiting with a timeout.\n*/\nTIMED_WAITING, \n/**\n* A thread which is no longer alive.\n*/\nTERMINATED\n```\n\n一个线程只能由`start()`启动一次，多次启动会产生`IllegalThreadStateException`\n\n在Thread类中定义了三个优先级常数：\n```Java\n\t/**\n\t * The maximum priority value for a Thread.\n\t */\n\tpublic final static int MAX_PRIORITY = 10;\t\t// Maximum allowed priority for a thread\n\t/**\n\t * The minimum priority value for a Thread.\n\t */\n\tpublic final static int MIN_PRIORITY = 1;\t\t\t// Minimum allowed priority for a thread\n\t/**\n\t * The default priority value for a Thread.\n\t */\n\tpublic final static int NORM_PRIORITY = 5;\t\t// Normal priority for a thread\n```\n线程的优先级可以通过`priority`的getter和setter来设置和确认，当两个进行中的线程发生冲突时，一般优先级高的线程会先运行，但这并不等于说优先级高的线程一定会被优先启动。系统在启动线程的时候并不看优先级的高低。\n### Thread类\nThread类提供了各种用来控制线程启动，暂停，再开，终止的方法，这里记录以下两个点的理解：\n1. InterruptedException. 当线程进入待机或者睡眠等状态时，就需要针对InterruptedException写一个try-catch，简单理解就是被人吵醒时应该怎么办。\n2. sleep可以设置一定的时间，但并不等于时间到了线程就会停止挂起，继续运行。sleep只是线程在不被interrupt的情况下最短的睡眠时长，时间到了之后，也要视系统的资源分配情况来决定什么时候继续运行。\n\n### 同步与排他\n并发编程一个很常见的问题就是不同线程对同一资源的读写控制，这里就要提到两个很基本的概念，同步和排他（锁）。  \n排他锁比较好理解，就是通过关键字或者方法来指定某一部分同一时间只能被一个线程使用，被调用时这部分资源会被锁定，其他想要使用该资源的线程则会被挂起，知道资源解锁，轮班使用。\n`synchronized`是用来指定锁定资源的关键字，可以用来修饰方法，也可以用来指定代码块。\n```Java\npublic synchronized void add(int a){...}\n\n// 或者\npublic void add(int a){\n    synchronized(想要锁定的对象){\n        //指定的对象在这段代码运行过程中被上锁\n    }\n}\n```\n  \n同步则是指使用wait(),notify(),notifyAll()等方法，具体的控制线程的运行。  \nwait()可以指定也可以不指定超时的值，wait可以让线程进入等待，直到等待超时或者其他的线程使用了notify(),notifyAll()或者interrupt()方法，使等待的线程进入可执行的状态。  \nnotify()会随机让一个等待的线程再开，notifyAll()则是让所有该对象的线程再开。\nwait(),notify(),notifyAll()都是用来控制线程访问被锁资源的，所以如果没有synchronized锁定资源，这些方法的会抛出`IllegalMonitorStateException`  \n\n排他锁无法避免会出现不同的线程锁定不同的资源大家都干不了活儿的局面，这就是死锁；或者因为要使用的资源不断被其他线程占用而导致某一线程进展缓慢，这叫活锁。  \n死锁和活锁都不会在编译或者运行时报错，所以要留意设置超时，一定时间后手动解锁资源。等待资源访问时线程会处于`饥饿`的状态，饥饿的线程越多，则说明程序效率越低。为了减少饥饿，资源的调用顺序，锁定的粒度都需要好好思考。\n\n### 并发集合\n\n## 高效的线程管理\n\n### 执行器\n\n### 线程池\n\n#### 线程池的四种 BlockedQueue\n\n## 多线程中的问题\n\n### 内存释放 shutdown 和 shutdownNow\n\n### InterruptException\n\n### 使用TimeUnit\n\n### ","slug":"2019-08-05-concurrency","published":true,"updated":"2025-01-31T15:39:12.848Z","_id":"cm6m2r3ws0012zg9dgsmmgyou","comments":true,"layout":"post","photos":[],"html":"<p>Concurrency的意思是并发性，或者并行性（日语），顾名思义指的是同时处理不同的任务。并发编程的核心线程，可以简单地理解成RTS游戏里的“工人“单位:一个工人同一时间只能执行一个建造任务，增加工人可以增加建造序列的数量，也可以通过给工人切换建造任务来<strong>看起来</strong>增加建造序列，而这里的微操，全都是由系统来控制的。<br>所以，并发编程并不针对多核CPU，即使只有一个CPU，也可以通过分时段的线程切换来实现多个线程的并发执行。</p>\n<h2 id=\"Java的基本多线程写法\"><a href=\"#Java的基本多线程写法\" class=\"headerlink\" title=\"Java的基本多线程写法\"></a>Java的基本多线程写法</h2><p>首先是线程的最基本写法。Java中有两种最基本的线程编写方法：</p>\n<ol>\n<li>继承Thread类，在<code>run()</code>中书写程序内容，使用<code>start()</code>来启动线程。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Sample</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String... args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">WorkerA</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WorkerA</span>();</span><br><span class=\"line\">        <span class=\"type\">WorkerB</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WorkerB</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 这里我们有两个工人，可以同时启动两个建造任务了</span></span><br><span class=\"line\">        a.start();</span><br><span class=\"line\">        b.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">WorkerA</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 在run里写上具体要给这个工人分配的任务</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            System.out.print(<span class=\"string\">&quot;Yes, my lord. &quot;</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Building cpmolete.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">WorkerB</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            System.out.print(<span class=\"string\">&quot;了解。&quot;</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;任務完了。&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>实现Runnable接口。<code>Thread</code>的构造体可以接受一个Runnable的参数，所以我们也可以通过写一个实现了Runnable接口的类来生成线程。虽然也是在run方法中写所要执行的任务，但是实现Runnable的类是作为生成线程的参数来使用，所以我们可以理解为创建了一类工作，然后以该工作为参数创建(灵魂召唤)多个工人来执行。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Sample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 我们创建了两个同样的工人，会执行同一种建造任务，比如都去造房子（卡人口不可取）</span></span><br><span class=\"line\">        <span class=\"type\">Work</span> <span class=\"variable\">work</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Work</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">workerA</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(work);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">workerB</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(work);</span><br><span class=\"line\"></span><br><span class=\"line\">        workerA.start();</span><br><span class=\"line\">        workerB.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Work</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            System.out.print(<span class=\"string\">&quot;Yes, my lord. &quot;</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Building cpmolete.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>Runnable也可以使用Lambda表达式来定义</strong>，这样我们就可以直接写run方法的内容而不用去定义一整个类了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Thread</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;C &quot;</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">c.start();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"线程的状态和优先级\"><a href=\"#线程的状态和优先级\" class=\"headerlink\" title=\"线程的状态和优先级\"></a>线程的状态和优先级</h3><p><code>java.lang</code>的列举型Thread.State中定义了6中线程状态：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* A Thread which has not yet started.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">NEW,</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* A Thread which is running or suspended.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">RUNNABLE,</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* A Thread which is blocked on a monitor.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">BLOCKED, </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* A Thread which is waiting with no timeout.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">WAITING,</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* A Thread which is waiting with a timeout.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">TIMED_WAITING, </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* A thread which is no longer alive.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">TERMINATED</span><br></pre></td></tr></table></figure>\n\n<p>一个线程只能由<code>start()</code>启动一次，多次启动会产生<code>IllegalThreadStateException</code></p>\n<p>在Thread类中定义了三个优先级常数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * The maximum priority value for a Thread.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">MAX_PRIORITY</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;\t\t<span class=\"comment\">// Maximum allowed priority for a thread</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * The minimum priority value for a Thread.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">MIN_PRIORITY</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;\t\t\t<span class=\"comment\">// Minimum allowed priority for a thread</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * The default priority value for a Thread.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">NORM_PRIORITY</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;\t\t<span class=\"comment\">// Normal priority for a thread</span></span><br></pre></td></tr></table></figure>\n<p>线程的优先级可以通过<code>priority</code>的getter和setter来设置和确认，当两个进行中的线程发生冲突时，一般优先级高的线程会先运行，但这并不等于说优先级高的线程一定会被优先启动。系统在启动线程的时候并不看优先级的高低。</p>\n<h3 id=\"Thread类\"><a href=\"#Thread类\" class=\"headerlink\" title=\"Thread类\"></a>Thread类</h3><p>Thread类提供了各种用来控制线程启动，暂停，再开，终止的方法，这里记录以下两个点的理解：</p>\n<ol>\n<li>InterruptedException. 当线程进入待机或者睡眠等状态时，就需要针对InterruptedException写一个try-catch，简单理解就是被人吵醒时应该怎么办。</li>\n<li>sleep可以设置一定的时间，但并不等于时间到了线程就会停止挂起，继续运行。sleep只是线程在不被interrupt的情况下最短的睡眠时长，时间到了之后，也要视系统的资源分配情况来决定什么时候继续运行。</li>\n</ol>\n<h3 id=\"同步与排他\"><a href=\"#同步与排他\" class=\"headerlink\" title=\"同步与排他\"></a>同步与排他</h3><p>并发编程一个很常见的问题就是不同线程对同一资源的读写控制，这里就要提到两个很基本的概念，同步和排他（锁）。<br>排他锁比较好理解，就是通过关键字或者方法来指定某一部分同一时间只能被一个线程使用，被调用时这部分资源会被锁定，其他想要使用该资源的线程则会被挂起，知道资源解锁，轮班使用。<br><code>synchronized</code>是用来指定锁定资源的关键字，可以用来修饰方法，也可以用来指定代码块。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> a)</span>&#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> a)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(想要锁定的对象)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//指定的对象在这段代码运行过程中被上锁</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同步则是指使用wait(),notify(),notifyAll()等方法，具体的控制线程的运行。<br>wait()可以指定也可以不指定超时的值，wait可以让线程进入等待，直到等待超时或者其他的线程使用了notify(),notifyAll()或者interrupt()方法，使等待的线程进入可执行的状态。<br>notify()会随机让一个等待的线程再开，notifyAll()则是让所有该对象的线程再开。<br>wait(),notify(),notifyAll()都是用来控制线程访问被锁资源的，所以如果没有synchronized锁定资源，这些方法的会抛出<code>IllegalMonitorStateException</code>  </p>\n<p>排他锁无法避免会出现不同的线程锁定不同的资源大家都干不了活儿的局面，这就是死锁；或者因为要使用的资源不断被其他线程占用而导致某一线程进展缓慢，这叫活锁。<br>死锁和活锁都不会在编译或者运行时报错，所以要留意设置超时，一定时间后手动解锁资源。等待资源访问时线程会处于<code>饥饿</code>的状态，饥饿的线程越多，则说明程序效率越低。为了减少饥饿，资源的调用顺序，锁定的粒度都需要好好思考。</p>\n<h3 id=\"并发集合\"><a href=\"#并发集合\" class=\"headerlink\" title=\"并发集合\"></a>并发集合</h3><h2 id=\"高效的线程管理\"><a href=\"#高效的线程管理\" class=\"headerlink\" title=\"高效的线程管理\"></a>高效的线程管理</h2><h3 id=\"执行器\"><a href=\"#执行器\" class=\"headerlink\" title=\"执行器\"></a>执行器</h3><h3 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h3><h4 id=\"线程池的四种-BlockedQueue\"><a href=\"#线程池的四种-BlockedQueue\" class=\"headerlink\" title=\"线程池的四种 BlockedQueue\"></a>线程池的四种 BlockedQueue</h4><h2 id=\"多线程中的问题\"><a href=\"#多线程中的问题\" class=\"headerlink\" title=\"多线程中的问题\"></a>多线程中的问题</h2><h3 id=\"内存释放-shutdown-和-shutdownNow\"><a href=\"#内存释放-shutdown-和-shutdownNow\" class=\"headerlink\" title=\"内存释放 shutdown 和 shutdownNow\"></a>内存释放 shutdown 和 shutdownNow</h3><h3 id=\"InterruptException\"><a href=\"#InterruptException\" class=\"headerlink\" title=\"InterruptException\"></a>InterruptException</h3><h3 id=\"使用TimeUnit\"><a href=\"#使用TimeUnit\" class=\"headerlink\" title=\"使用TimeUnit\"></a>使用TimeUnit</h3><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3>","excerpt":"","more":"<p>Concurrency的意思是并发性，或者并行性（日语），顾名思义指的是同时处理不同的任务。并发编程的核心线程，可以简单地理解成RTS游戏里的“工人“单位:一个工人同一时间只能执行一个建造任务，增加工人可以增加建造序列的数量，也可以通过给工人切换建造任务来<strong>看起来</strong>增加建造序列，而这里的微操，全都是由系统来控制的。<br>所以，并发编程并不针对多核CPU，即使只有一个CPU，也可以通过分时段的线程切换来实现多个线程的并发执行。</p>\n<h2 id=\"Java的基本多线程写法\"><a href=\"#Java的基本多线程写法\" class=\"headerlink\" title=\"Java的基本多线程写法\"></a>Java的基本多线程写法</h2><p>首先是线程的最基本写法。Java中有两种最基本的线程编写方法：</p>\n<ol>\n<li>继承Thread类，在<code>run()</code>中书写程序内容，使用<code>start()</code>来启动线程。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Sample</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String... args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">WorkerA</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WorkerA</span>();</span><br><span class=\"line\">        <span class=\"type\">WorkerB</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WorkerB</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 这里我们有两个工人，可以同时启动两个建造任务了</span></span><br><span class=\"line\">        a.start();</span><br><span class=\"line\">        b.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">WorkerA</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 在run里写上具体要给这个工人分配的任务</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            System.out.print(<span class=\"string\">&quot;Yes, my lord. &quot;</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Building cpmolete.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">WorkerB</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            System.out.print(<span class=\"string\">&quot;了解。&quot;</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;任務完了。&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>实现Runnable接口。<code>Thread</code>的构造体可以接受一个Runnable的参数，所以我们也可以通过写一个实现了Runnable接口的类来生成线程。虽然也是在run方法中写所要执行的任务，但是实现Runnable的类是作为生成线程的参数来使用，所以我们可以理解为创建了一类工作，然后以该工作为参数创建(灵魂召唤)多个工人来执行。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Sample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 我们创建了两个同样的工人，会执行同一种建造任务，比如都去造房子（卡人口不可取）</span></span><br><span class=\"line\">        <span class=\"type\">Work</span> <span class=\"variable\">work</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Work</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">workerA</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(work);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">workerB</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(work);</span><br><span class=\"line\"></span><br><span class=\"line\">        workerA.start();</span><br><span class=\"line\">        workerB.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Work</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            System.out.print(<span class=\"string\">&quot;Yes, my lord. &quot;</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Building cpmolete.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>Runnable也可以使用Lambda表达式来定义</strong>，这样我们就可以直接写run方法的内容而不用去定义一整个类了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Thread</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;C &quot;</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">c.start();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"线程的状态和优先级\"><a href=\"#线程的状态和优先级\" class=\"headerlink\" title=\"线程的状态和优先级\"></a>线程的状态和优先级</h3><p><code>java.lang</code>的列举型Thread.State中定义了6中线程状态：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* A Thread which has not yet started.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">NEW,</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* A Thread which is running or suspended.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">RUNNABLE,</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* A Thread which is blocked on a monitor.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">BLOCKED, </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* A Thread which is waiting with no timeout.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">WAITING,</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* A Thread which is waiting with a timeout.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">TIMED_WAITING, </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* A thread which is no longer alive.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">TERMINATED</span><br></pre></td></tr></table></figure>\n\n<p>一个线程只能由<code>start()</code>启动一次，多次启动会产生<code>IllegalThreadStateException</code></p>\n<p>在Thread类中定义了三个优先级常数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * The maximum priority value for a Thread.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">MAX_PRIORITY</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;\t\t<span class=\"comment\">// Maximum allowed priority for a thread</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * The minimum priority value for a Thread.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">MIN_PRIORITY</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;\t\t\t<span class=\"comment\">// Minimum allowed priority for a thread</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * The default priority value for a Thread.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">NORM_PRIORITY</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;\t\t<span class=\"comment\">// Normal priority for a thread</span></span><br></pre></td></tr></table></figure>\n<p>线程的优先级可以通过<code>priority</code>的getter和setter来设置和确认，当两个进行中的线程发生冲突时，一般优先级高的线程会先运行，但这并不等于说优先级高的线程一定会被优先启动。系统在启动线程的时候并不看优先级的高低。</p>\n<h3 id=\"Thread类\"><a href=\"#Thread类\" class=\"headerlink\" title=\"Thread类\"></a>Thread类</h3><p>Thread类提供了各种用来控制线程启动，暂停，再开，终止的方法，这里记录以下两个点的理解：</p>\n<ol>\n<li>InterruptedException. 当线程进入待机或者睡眠等状态时，就需要针对InterruptedException写一个try-catch，简单理解就是被人吵醒时应该怎么办。</li>\n<li>sleep可以设置一定的时间，但并不等于时间到了线程就会停止挂起，继续运行。sleep只是线程在不被interrupt的情况下最短的睡眠时长，时间到了之后，也要视系统的资源分配情况来决定什么时候继续运行。</li>\n</ol>\n<h3 id=\"同步与排他\"><a href=\"#同步与排他\" class=\"headerlink\" title=\"同步与排他\"></a>同步与排他</h3><p>并发编程一个很常见的问题就是不同线程对同一资源的读写控制，这里就要提到两个很基本的概念，同步和排他（锁）。<br>排他锁比较好理解，就是通过关键字或者方法来指定某一部分同一时间只能被一个线程使用，被调用时这部分资源会被锁定，其他想要使用该资源的线程则会被挂起，知道资源解锁，轮班使用。<br><code>synchronized</code>是用来指定锁定资源的关键字，可以用来修饰方法，也可以用来指定代码块。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> a)</span>&#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> a)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(想要锁定的对象)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//指定的对象在这段代码运行过程中被上锁</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同步则是指使用wait(),notify(),notifyAll()等方法，具体的控制线程的运行。<br>wait()可以指定也可以不指定超时的值，wait可以让线程进入等待，直到等待超时或者其他的线程使用了notify(),notifyAll()或者interrupt()方法，使等待的线程进入可执行的状态。<br>notify()会随机让一个等待的线程再开，notifyAll()则是让所有该对象的线程再开。<br>wait(),notify(),notifyAll()都是用来控制线程访问被锁资源的，所以如果没有synchronized锁定资源，这些方法的会抛出<code>IllegalMonitorStateException</code>  </p>\n<p>排他锁无法避免会出现不同的线程锁定不同的资源大家都干不了活儿的局面，这就是死锁；或者因为要使用的资源不断被其他线程占用而导致某一线程进展缓慢，这叫活锁。<br>死锁和活锁都不会在编译或者运行时报错，所以要留意设置超时，一定时间后手动解锁资源。等待资源访问时线程会处于<code>饥饿</code>的状态，饥饿的线程越多，则说明程序效率越低。为了减少饥饿，资源的调用顺序，锁定的粒度都需要好好思考。</p>\n<h3 id=\"并发集合\"><a href=\"#并发集合\" class=\"headerlink\" title=\"并发集合\"></a>并发集合</h3><h2 id=\"高效的线程管理\"><a href=\"#高效的线程管理\" class=\"headerlink\" title=\"高效的线程管理\"></a>高效的线程管理</h2><h3 id=\"执行器\"><a href=\"#执行器\" class=\"headerlink\" title=\"执行器\"></a>执行器</h3><h3 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h3><h4 id=\"线程池的四种-BlockedQueue\"><a href=\"#线程池的四种-BlockedQueue\" class=\"headerlink\" title=\"线程池的四种 BlockedQueue\"></a>线程池的四种 BlockedQueue</h4><h2 id=\"多线程中的问题\"><a href=\"#多线程中的问题\" class=\"headerlink\" title=\"多线程中的问题\"></a>多线程中的问题</h2><h3 id=\"内存释放-shutdown-和-shutdownNow\"><a href=\"#内存释放-shutdown-和-shutdownNow\" class=\"headerlink\" title=\"内存释放 shutdown 和 shutdownNow\"></a>内存释放 shutdown 和 shutdownNow</h3><h3 id=\"InterruptException\"><a href=\"#InterruptException\" class=\"headerlink\" title=\"InterruptException\"></a>InterruptException</h3><h3 id=\"使用TimeUnit\"><a href=\"#使用TimeUnit\" class=\"headerlink\" title=\"使用TimeUnit\"></a>使用TimeUnit</h3><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3>","path":"2019/08/05/2019-08-05-concurrency/","permalink":"https://xsun4231.github.io/2019/08/05/2019-08-05-concurrency/","tags":[{"name":"未填之坑","_id":"cm6m2r3wu001azg9ddqkxcay0","slug":"未填之坑","path":"tags/未填之坑/","permalink":"https://xsun4231.github.io/tags/%E6%9C%AA%E5%A1%AB%E4%B9%8B%E5%9D%91/","length":4}],"categories":[],"prev":{"title":"HAS-A 和 IS-A的区别","date":"2019-11-14T04:39:09.000Z","slug":"2019-11-14-has-a-and-is-a","published":true,"updated":"2025-01-31T15:39:12.949Z","_id":"cm6m2r3ws0011zg9d0b6y3lh8","layout":"post","photos":[],"excerpt":"","path":"2019/11/14/2019-11-14-has-a-and-is-a/","permalink":"https://xsun4231.github.io/2019/11/14/2019-11-14-has-a-and-is-a/","__post":true},"next":{"title":"Dockerfile 命令","date":"2019-07-30T01:29:30.000Z","slug":"2019-07-30-docker-instruction-commands","published":true,"updated":"2025-01-31T15:39:12.845Z","_id":"cm6m2r3wr000yzg9d988h005u","layout":"post","photos":[],"excerpt":"","path":"2019/07/30/2019-07-30-docker-instruction-commands/","permalink":"https://xsun4231.github.io/2019/07/30/2019-07-30-docker-instruction-commands/","__post":true},"__post":true}