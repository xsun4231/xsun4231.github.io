{"title":"Dockerfile 命令","date":"2019-07-30T01:29:30.000Z","source":"_posts/2019-07-30-docker-instruction-commands.md","raw":"---\ntitle: Dockerfile 命令\ntags:\n  - null\ndate: 2019-07-30 10:29:30\n---\n\n\n内容整理自[Docker入门到实践][1]\n\n## 什么是Dockerfile\n\nDockerfile 是一种用来定制镜像的文本文件。我们可以在Dockerfile中指定基础镜像，执行命令，开放端口，设置环境变量等等。\n**每一条指令**会构建一层。参考[docker 文档][2]，docker的镜像具有下面的层结构(image layers)，增加层的厚度自然会增加镜像的大小，所以写Dockerfile时，尽量使用`\\` 和 `&&` 巧妙地将命令的内容合并到一层。\n{% asset_img layer.png layer %}\n\n比如[Docker入门到实践][1]中的例子，写一个构建`nginx`镜像的Dockerfile：\n\n```Dockerfile\nFROM nginx\nRUN echo '<h1>Hello, Docker!</h1>' > /usr/share/nginx/html/index.html\n```\n\n这个Dockerfile包含了两个指令，`FROM`制定了基础镜像，基础镜像可以是各种服务类的官方镜像，也可以是干净的操作系统镜像，还可以是空白镜像`scratch`。`RUN`是最常用的指令，用来执行命令行命令。\n\n接下来我们执行\n```cmd\ndocker build -t nginx:v3 .\n```\n来构建镜像，`it nginx:v3`的的意思是构建的目标名为nginx，标签为v3。\n\ndocker构建镜像的log将每一条指令分的很清楚，每一条指令作为一个step来执行，完成后我们就可以看到新的镜像`nginx:v3`了。\n\n执行下面命令，通过新构建的镜像生成一个容器：\n```cmd\ndocker run --name hello -d -p 8080:80 nginx:v3\n```\n然后我们访问 `localhost:8080` 就可以看到欢迎页了：\n{% asset_img hello.png hello %}\n\n### Dockerfile中用到的命令  \ndocker的指令一般有两种书写方式，一种是指令后跟命令行，一种是使用`[]`的函数调用写法，这里主要记录一下命令行写法。\n\n* COPY  \n  `COPY <context path> <target path>`  \n  这个指令将上下文目录中的文件或者目录复制到新一层的目标路径中，要复制的文件或者目录可以有多个，可以使用通配符（符合golang的filepath.Match规则)，目标路径可以是绝对路径，也可以是工作目录的相对路径。  \n  还可以加上`--chown=<user>:<group>`来改变文件的所属用户和所属组\n\n  > 上下文路径？context path?\n* ADD  \n  使用方法跟COPY基本一样。功能会丰富一点，比如源路径可以设置为url，使用url路径时docker会讲文件打包下载到目标路径。因为需要多余的RUN来处理权限，解压缩，筛选内容，这个命令并不是很实用。\n\n* CMD  \n  用于指定默认的容器主进程的启动命令。指令的写法也有两种：  \n  * shell 格式 `CMD 命令`\n  * exec 格式 `CMD [\"可执行文件\", \"参数\", ...\"参数\" ]`  \n\n  使用shell格式写的内容会被解析为`CMD [\"sh\", \"-c\", \"命令\"]`，所以命令中可以使用环境变量，但是命令必须前台执行，如果命令结束后直接结束了`sh`程序，则容器也会推出。\n\n  Dockerfile中设置的启动命令可以在运行时重新指定，比如我们写`docker run -it imagename`的话，就会执行默认的命令，在镜像名后面添加命令，比如`cat etc/os-release`，就可以了。\n\n* ENTRYPOINT\n  跟CMD一样用来设置启动时的命令行和参数，不过在重新定义的时候，要在`docker run`后面使用命令`--entrypoint`来设置。\n  ENTRYPOINT和CMD共存的意义在于，定义了ENTRYPOINT之后，CMD的内容将不再被直接执行，而是作为参数传递给ENTRYPOINT。比如[Docker入门-Dockerfile指令详解-NETRYPOINT入口点][1]里面介绍的例子：\n  1. 如果我们想在执行的时候为`CMD [ \"curl\", \"-s\", \"https://ip.cn\" ]`添加参数，直接在镜像名后面加肯定是不行的，那样会替换掉所有命令（全部重写那就另当别论了），如果使用CMD来获取参数，定义`ENTRYPOINT [ \"curl\", \"-s\", \"https://ip.cn\" ]`，就可以实现参数的自由设置了。\n  2. 用ENTRYPOINT来处理CMD做不到的工作。\n      ```Docker\n      FROM alpine:3.4\n      ...\n      RUN addgroup -S redis && adduser -S -G redis redis\n      ...\n      ENTRYPOINT [\"docker-entrypoint.sh\"]\n\n      EXPOSE 6379\n      CMD [ \"redis-server\" ]\n      ```\n      docker-entrypoint.sh的内容为：\n      \n      ```bash\n      #!/bin/sh\n      ...\n      # allow the container to be started with `--user`\n      if [ \"$1\" = 'redis-server' -a \"$(id -u)\" = '0' ]; then\n          chown -R redis .\n          exec su-exec redis \"$0\" \"$@\"\n      fi\n\n      exec \"$@\"\n      ```\n\n      这里将cmd作为参数获取的方法，在ENTRYPOINT中设置了一个脚本，通过参数的内容来区别启动用户的身份。\n  \n* ENV\n  定义环境变量，就这么简单。可以用`=`，可以用空格，可以用等号加空格一行定义一群，也可以用`\\`加入换行。\n\n* ARG\n  定义参数。参数和环境变量不同的是，参数只在构建的时候有用，在容器运行时不会被引入容器内部。参数的定义可以在`docker build`时使用`--build-arg <name>=<value>`的格式来覆盖。\n\n* VOLUME\n  匿名卷\n\n* EXPOSE\n  暴露端口\n\n\n* WORKDIR\n  指定工作目录\n\n* USER\n  指定当前用户\n\n* HEALTHCHECK\n  健康检查\n\n* ONBUILD\n  构建时执行\n\n\n## 镜像的使用\n\n### 镜像的获取，管理和删除\n\n### commit 命令\n\n[1]:https://legacy.gitbook.com/book/yeasy/docker_practice/details\n[2]:https://docs.docker.com/storage/storagedriver/","slug":"2019-07-30-docker-instruction-commands","published":true,"updated":"2025-01-31T15:39:12.845Z","_id":"cm6m2r3wr000yzg9d988h005u","comments":true,"layout":"post","photos":[],"html":"<p>内容整理自<a href=\"https://legacy.gitbook.com/book/yeasy/docker_practice/details\">Docker入门到实践</a></p>\n<h2 id=\"什么是Dockerfile\"><a href=\"#什么是Dockerfile\" class=\"headerlink\" title=\"什么是Dockerfile\"></a>什么是Dockerfile</h2><p>Dockerfile 是一种用来定制镜像的文本文件。我们可以在Dockerfile中指定基础镜像，执行命令，开放端口，设置环境变量等等。<br><strong>每一条指令</strong>会构建一层。参考<a href=\"https://docs.docker.com/storage/storagedriver/\">docker 文档</a>，docker的镜像具有下面的层结构(image layers)，增加层的厚度自然会增加镜像的大小，所以写Dockerfile时，尽量使用<code>\\</code> 和 <code>&amp;&amp;</code> 巧妙地将命令的内容合并到一层。</p>\n\n\n<p>比如<a href=\"https://legacy.gitbook.com/book/yeasy/docker_practice/details\">Docker入门到实践</a>中的例子，写一个构建<code>nginx</code>镜像的Dockerfile：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> nginx</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&#x27;</span> &gt; /usr/share/nginx/html/index.html</span></span><br></pre></td></tr></table></figure>\n\n<p>这个Dockerfile包含了两个指令，<code>FROM</code>制定了基础镜像，基础镜像可以是各种服务类的官方镜像，也可以是干净的操作系统镜像，还可以是空白镜像<code>scratch</code>。<code>RUN</code>是最常用的指令，用来执行命令行命令。</p>\n<p>接下来我们执行</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t nginx:v3 .</span><br></pre></td></tr></table></figure>\n<p>来构建镜像，<code>it nginx:v3</code>的的意思是构建的目标名为nginx，标签为v3。</p>\n<p>docker构建镜像的log将每一条指令分的很清楚，每一条指令作为一个step来执行，完成后我们就可以看到新的镜像<code>nginx:v3</code>了。</p>\n<p>执行下面命令，通过新构建的镜像生成一个容器：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name hello -d -p <span class=\"number\">8080</span>:<span class=\"number\">80</span> nginx:v3</span><br></pre></td></tr></table></figure>\n<p>然后我们访问 <code>localhost:8080</code> 就可以看到欢迎页了：</p>\n\n\n<h3 id=\"Dockerfile中用到的命令\"><a href=\"#Dockerfile中用到的命令\" class=\"headerlink\" title=\"Dockerfile中用到的命令\"></a>Dockerfile中用到的命令</h3><p>docker的指令一般有两种书写方式，一种是指令后跟命令行，一种是使用<code>[]</code>的函数调用写法，这里主要记录一下命令行写法。</p>\n<ul>\n<li><p>COPY<br><code>COPY &lt;context path&gt; &lt;target path&gt;</code><br>这个指令将上下文目录中的文件或者目录复制到新一层的目标路径中，要复制的文件或者目录可以有多个，可以使用通配符（符合golang的filepath.Match规则)，目标路径可以是绝对路径，也可以是工作目录的相对路径。<br>还可以加上<code>--chown=&lt;user&gt;:&lt;group&gt;</code>来改变文件的所属用户和所属组</p>\n<blockquote>\n<p>上下文路径？context path?</p>\n</blockquote>\n</li>\n<li><p>ADD<br>使用方法跟COPY基本一样。功能会丰富一点，比如源路径可以设置为url，使用url路径时docker会讲文件打包下载到目标路径。因为需要多余的RUN来处理权限，解压缩，筛选内容，这个命令并不是很实用。</p>\n</li>\n<li><p>CMD<br>用于指定默认的容器主进程的启动命令。指令的写法也有两种：  </p>\n<ul>\n<li>shell 格式 <code>CMD 命令</code></li>\n<li>exec 格式 <code>CMD [&quot;可执行文件&quot;, &quot;参数&quot;, ...&quot;参数&quot; ]</code></li>\n</ul>\n<p>使用shell格式写的内容会被解析为<code>CMD [&quot;sh&quot;, &quot;-c&quot;, &quot;命令&quot;]</code>，所以命令中可以使用环境变量，但是命令必须前台执行，如果命令结束后直接结束了<code>sh</code>程序，则容器也会推出。</p>\n<p>Dockerfile中设置的启动命令可以在运行时重新指定，比如我们写<code>docker run -it imagename</code>的话，就会执行默认的命令，在镜像名后面添加命令，比如<code>cat etc/os-release</code>，就可以了。</p>\n</li>\n<li><p>ENTRYPOINT<br>跟CMD一样用来设置启动时的命令行和参数，不过在重新定义的时候，要在<code>docker run</code>后面使用命令<code>--entrypoint</code>来设置。<br>ENTRYPOINT和CMD共存的意义在于，定义了ENTRYPOINT之后，CMD的内容将不再被直接执行，而是作为参数传递给ENTRYPOINT。比如<a href=\"https://legacy.gitbook.com/book/yeasy/docker_practice/details\">Docker入门-Dockerfile指令详解-NETRYPOINT入口点</a>里面介绍的例子：</p>\n<ol>\n<li><p>如果我们想在执行的时候为<code>CMD [ &quot;curl&quot;, &quot;-s&quot;, &quot;https://ip.cn&quot; ]</code>添加参数，直接在镜像名后面加肯定是不行的，那样会替换掉所有命令（全部重写那就另当别论了），如果使用CMD来获取参数，定义<code>ENTRYPOINT [ &quot;curl&quot;, &quot;-s&quot;, &quot;https://ip.cn&quot; ]</code>，就可以实现参数的自由设置了。</p>\n</li>\n<li><p>用ENTRYPOINT来处理CMD做不到的工作。</p>\n <figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> alpine:<span class=\"number\">3.4</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> addgroup -S redis &amp;&amp; adduser -S -G redis redis</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;docker-entrypoint.sh&quot;</span>]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">6379</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [ <span class=\"string\">&quot;redis-server&quot;</span> ]</span></span><br></pre></td></tr></table></figure>\n<p> docker-entrypoint.sh的内容为：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\"># allow the container to be started with `--user`</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> = <span class=\"string\">&#x27;redis-server&#x27;</span> -a <span class=\"string\">&quot;<span class=\"subst\">$(id -u)</span>&quot;</span> = <span class=\"string\">&#x27;0&#x27;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">chown</span> -R redis .</span><br><span class=\"line\">    <span class=\"built_in\">exec</span> su-exec redis <span class=\"string\">&quot;<span class=\"variable\">$0</span>&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$@</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exec</span> <span class=\"string\">&quot;<span class=\"variable\">$@</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p> 这里将cmd作为参数获取的方法，在ENTRYPOINT中设置了一个脚本，通过参数的内容来区别启动用户的身份。</p>\n</li>\n</ol>\n</li>\n<li><p>ENV<br>定义环境变量，就这么简单。可以用<code>=</code>，可以用空格，可以用等号加空格一行定义一群，也可以用<code>\\</code>加入换行。</p>\n</li>\n<li><p>ARG<br>定义参数。参数和环境变量不同的是，参数只在构建的时候有用，在容器运行时不会被引入容器内部。参数的定义可以在<code>docker build</code>时使用<code>--build-arg &lt;name&gt;=&lt;value&gt;</code>的格式来覆盖。</p>\n</li>\n<li><p>VOLUME<br>匿名卷</p>\n</li>\n<li><p>EXPOSE<br>暴露端口</p>\n</li>\n<li><p>WORKDIR<br>指定工作目录</p>\n</li>\n<li><p>USER<br>指定当前用户</p>\n</li>\n<li><p>HEALTHCHECK<br>健康检查</p>\n</li>\n<li><p>ONBUILD<br>构建时执行</p>\n</li>\n</ul>\n<h2 id=\"镜像的使用\"><a href=\"#镜像的使用\" class=\"headerlink\" title=\"镜像的使用\"></a>镜像的使用</h2><h3 id=\"镜像的获取，管理和删除\"><a href=\"#镜像的获取，管理和删除\" class=\"headerlink\" title=\"镜像的获取，管理和删除\"></a>镜像的获取，管理和删除</h3><h3 id=\"commit-命令\"><a href=\"#commit-命令\" class=\"headerlink\" title=\"commit 命令\"></a>commit 命令</h3>","excerpt":"","more":"<p>内容整理自<a href=\"https://legacy.gitbook.com/book/yeasy/docker_practice/details\">Docker入门到实践</a></p>\n<h2 id=\"什么是Dockerfile\"><a href=\"#什么是Dockerfile\" class=\"headerlink\" title=\"什么是Dockerfile\"></a>什么是Dockerfile</h2><p>Dockerfile 是一种用来定制镜像的文本文件。我们可以在Dockerfile中指定基础镜像，执行命令，开放端口，设置环境变量等等。<br><strong>每一条指令</strong>会构建一层。参考<a href=\"https://docs.docker.com/storage/storagedriver/\">docker 文档</a>，docker的镜像具有下面的层结构(image layers)，增加层的厚度自然会增加镜像的大小，所以写Dockerfile时，尽量使用<code>\\</code> 和 <code>&amp;&amp;</code> 巧妙地将命令的内容合并到一层。</p>\n\n\n<p>比如<a href=\"https://legacy.gitbook.com/book/yeasy/docker_practice/details\">Docker入门到实践</a>中的例子，写一个构建<code>nginx</code>镜像的Dockerfile：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> nginx</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&#x27;</span> &gt; /usr/share/nginx/html/index.html</span></span><br></pre></td></tr></table></figure>\n\n<p>这个Dockerfile包含了两个指令，<code>FROM</code>制定了基础镜像，基础镜像可以是各种服务类的官方镜像，也可以是干净的操作系统镜像，还可以是空白镜像<code>scratch</code>。<code>RUN</code>是最常用的指令，用来执行命令行命令。</p>\n<p>接下来我们执行</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t nginx:v3 .</span><br></pre></td></tr></table></figure>\n<p>来构建镜像，<code>it nginx:v3</code>的的意思是构建的目标名为nginx，标签为v3。</p>\n<p>docker构建镜像的log将每一条指令分的很清楚，每一条指令作为一个step来执行，完成后我们就可以看到新的镜像<code>nginx:v3</code>了。</p>\n<p>执行下面命令，通过新构建的镜像生成一个容器：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name hello -d -p <span class=\"number\">8080</span>:<span class=\"number\">80</span> nginx:v3</span><br></pre></td></tr></table></figure>\n<p>然后我们访问 <code>localhost:8080</code> 就可以看到欢迎页了：</p>\n\n\n<h3 id=\"Dockerfile中用到的命令\"><a href=\"#Dockerfile中用到的命令\" class=\"headerlink\" title=\"Dockerfile中用到的命令\"></a>Dockerfile中用到的命令</h3><p>docker的指令一般有两种书写方式，一种是指令后跟命令行，一种是使用<code>[]</code>的函数调用写法，这里主要记录一下命令行写法。</p>\n<ul>\n<li><p>COPY<br><code>COPY &lt;context path&gt; &lt;target path&gt;</code><br>这个指令将上下文目录中的文件或者目录复制到新一层的目标路径中，要复制的文件或者目录可以有多个，可以使用通配符（符合golang的filepath.Match规则)，目标路径可以是绝对路径，也可以是工作目录的相对路径。<br>还可以加上<code>--chown=&lt;user&gt;:&lt;group&gt;</code>来改变文件的所属用户和所属组</p>\n<blockquote>\n<p>上下文路径？context path?</p>\n</blockquote>\n</li>\n<li><p>ADD<br>使用方法跟COPY基本一样。功能会丰富一点，比如源路径可以设置为url，使用url路径时docker会讲文件打包下载到目标路径。因为需要多余的RUN来处理权限，解压缩，筛选内容，这个命令并不是很实用。</p>\n</li>\n<li><p>CMD<br>用于指定默认的容器主进程的启动命令。指令的写法也有两种：  </p>\n<ul>\n<li>shell 格式 <code>CMD 命令</code></li>\n<li>exec 格式 <code>CMD [&quot;可执行文件&quot;, &quot;参数&quot;, ...&quot;参数&quot; ]</code></li>\n</ul>\n<p>使用shell格式写的内容会被解析为<code>CMD [&quot;sh&quot;, &quot;-c&quot;, &quot;命令&quot;]</code>，所以命令中可以使用环境变量，但是命令必须前台执行，如果命令结束后直接结束了<code>sh</code>程序，则容器也会推出。</p>\n<p>Dockerfile中设置的启动命令可以在运行时重新指定，比如我们写<code>docker run -it imagename</code>的话，就会执行默认的命令，在镜像名后面添加命令，比如<code>cat etc/os-release</code>，就可以了。</p>\n</li>\n<li><p>ENTRYPOINT<br>跟CMD一样用来设置启动时的命令行和参数，不过在重新定义的时候，要在<code>docker run</code>后面使用命令<code>--entrypoint</code>来设置。<br>ENTRYPOINT和CMD共存的意义在于，定义了ENTRYPOINT之后，CMD的内容将不再被直接执行，而是作为参数传递给ENTRYPOINT。比如<a href=\"https://legacy.gitbook.com/book/yeasy/docker_practice/details\">Docker入门-Dockerfile指令详解-NETRYPOINT入口点</a>里面介绍的例子：</p>\n<ol>\n<li><p>如果我们想在执行的时候为<code>CMD [ &quot;curl&quot;, &quot;-s&quot;, &quot;https://ip.cn&quot; ]</code>添加参数，直接在镜像名后面加肯定是不行的，那样会替换掉所有命令（全部重写那就另当别论了），如果使用CMD来获取参数，定义<code>ENTRYPOINT [ &quot;curl&quot;, &quot;-s&quot;, &quot;https://ip.cn&quot; ]</code>，就可以实现参数的自由设置了。</p>\n</li>\n<li><p>用ENTRYPOINT来处理CMD做不到的工作。</p>\n <figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> alpine:<span class=\"number\">3.4</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> addgroup -S redis &amp;&amp; adduser -S -G redis redis</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;docker-entrypoint.sh&quot;</span>]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">6379</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [ <span class=\"string\">&quot;redis-server&quot;</span> ]</span></span><br></pre></td></tr></table></figure>\n<p> docker-entrypoint.sh的内容为：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\"># allow the container to be started with `--user`</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> = <span class=\"string\">&#x27;redis-server&#x27;</span> -a <span class=\"string\">&quot;<span class=\"subst\">$(id -u)</span>&quot;</span> = <span class=\"string\">&#x27;0&#x27;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">chown</span> -R redis .</span><br><span class=\"line\">    <span class=\"built_in\">exec</span> su-exec redis <span class=\"string\">&quot;<span class=\"variable\">$0</span>&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$@</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exec</span> <span class=\"string\">&quot;<span class=\"variable\">$@</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p> 这里将cmd作为参数获取的方法，在ENTRYPOINT中设置了一个脚本，通过参数的内容来区别启动用户的身份。</p>\n</li>\n</ol>\n</li>\n<li><p>ENV<br>定义环境变量，就这么简单。可以用<code>=</code>，可以用空格，可以用等号加空格一行定义一群，也可以用<code>\\</code>加入换行。</p>\n</li>\n<li><p>ARG<br>定义参数。参数和环境变量不同的是，参数只在构建的时候有用，在容器运行时不会被引入容器内部。参数的定义可以在<code>docker build</code>时使用<code>--build-arg &lt;name&gt;=&lt;value&gt;</code>的格式来覆盖。</p>\n</li>\n<li><p>VOLUME<br>匿名卷</p>\n</li>\n<li><p>EXPOSE<br>暴露端口</p>\n</li>\n<li><p>WORKDIR<br>指定工作目录</p>\n</li>\n<li><p>USER<br>指定当前用户</p>\n</li>\n<li><p>HEALTHCHECK<br>健康检查</p>\n</li>\n<li><p>ONBUILD<br>构建时执行</p>\n</li>\n</ul>\n<h2 id=\"镜像的使用\"><a href=\"#镜像的使用\" class=\"headerlink\" title=\"镜像的使用\"></a>镜像的使用</h2><h3 id=\"镜像的获取，管理和删除\"><a href=\"#镜像的获取，管理和删除\" class=\"headerlink\" title=\"镜像的获取，管理和删除\"></a>镜像的获取，管理和删除</h3><h3 id=\"commit-命令\"><a href=\"#commit-命令\" class=\"headerlink\" title=\"commit 命令\"></a>commit 命令</h3>","path":"2019/07/30/2019-07-30-docker-instruction-commands/","permalink":"https://xsun4231.github.io/2019/07/30/2019-07-30-docker-instruction-commands/","tags":[],"categories":[],"prev":{"title":"Concurrency - Java的并发编程","date":"2019-08-05T01:30:11.000Z","slug":"2019-08-05-concurrency","published":true,"updated":"2025-01-31T15:39:12.848Z","_id":"cm6m2r3ws0012zg9dgsmmgyou","layout":"post","photos":[],"excerpt":"","path":"2019/08/05/2019-08-05-concurrency/","permalink":"https://xsun4231.github.io/2019/08/05/2019-08-05-concurrency/","__post":true},"next":{"title":"使用DB2的Docker镜像建立本地开发用的数据库","date":"2019-07-23T05:36:40.000Z","slug":"2019-07-23-docker-ibmdb2","published":true,"updated":"2025-01-31T15:39:12.845Z","_id":"cm6m2r3wr000xzg9ddz5y7e20","layout":"post","photos":[],"excerpt":"","path":"2019/07/23/2019-07-23-docker-ibmdb2/","permalink":"https://xsun4231.github.io/2019/07/23/2019-07-23-docker-ibmdb2/","__post":true},"__post":true}