{"title":"代码重构 - 简化条件语句","date":"2019-04-22T05:22:37.000Z","source":"_posts/2019-04-22-C9.md","raw":"---\ntitle: 代码重构 - 简化条件语句\ntags:\n  - Refactoring\n  - 重构\n  - 未填之坑\ndate: 2019-04-22 14:22:37\n---\n\n\n> 原文 [publisher logo Refactoring: Improving the Design of Existing Code](https://books.google.co.jp/books/about/Refactoring.html?id=HmrDHwgkbPsC&printsec=frontcover&source=kp_read_button&redir_esc=y#v=onepage&q&f=false) Chapter 9 Simplifying Conditianal Expressions\n\n\n## 分离条件 - Decompose Conditional\n\n很多程序之所以“复杂难懂”，是因为出现了“复杂难懂”的条件语句。当人们看到条件语句时，最想获取的信息是：if XXX 的时候，do YYY； else do ZZZ。所以简化条件语句最简单直接的方法就是把长长的判断语句或者大段大段的处理分离出来，留下最基本的`if else`结构，一目了然，至于具体的判断方法和处理内容，则去具体的方法中查看。\n\n> 遇到有嵌套结构的条件语句时，不妨先试试先整理成卫语句(Guard Clauses)，行不通再进行分解处理。\n\n比如我们遇到下面这段代码：\n```Java\nif (date.before (SUMMER_START) || date.after(SUMMER_END)){\n  charge = quantity * winterRate + winterServiceCharge;\n}else{\n  charge = quantity * summerRate;\n}\n```\n\n对条件和判断后的代码分别施放**Extract Method**法术:\n```Java\nif (notSummer(date)){\n  charge = winterCharge(quantity);\n} else {\n  charge = summerCharge (quantity);\n}\n\nprivate boolean notSummer(Date date) {\n  return date.before (SUMMER_START) || date.after(SUMMER_END);\n}\n\nprivate double summerCharge(int quantity) {\n  return quantity * summerRate;\n}\n\nprivate double winterCharge(int quantity) {\n  return quantity * winterRate + winterServiceCharge;\n}\n```\n\n当然，每次抽离出方法的时候，都不要忘记进行测试，**保证重构不会影响原本的处理结果**，很多时候条件语句并不是十分复杂，看起来好像没有抽离成为方法的必要，这就要看条件语句读起来是否顺畅易懂了，如果可以把原本机器感十足的语句变得更像一段流畅直白的描述，条件语句的重构就是有意义的。\n\n## 整合条件 - Consolidate Conditional Expression\n有些条件语句的虽然有着不同的判断条件，却执行着相同的动作。如果可以确定这些判断不需要完全的独立，不妨整合到一起，再抽离出一个方法，这样，条件语句就更有“一个判断”的感觉了。\n\n比如下面的代码：\n\n```Java\ndouble disabilityAmount() {\n  if (_seniority < 2) return 0;\n  if (_monthsDisabled > 12) return 0;\n  if (_isPartTime) return 0;\n  // compute the disability amount\n```\n\n可以整合成：\n```Java\ndouble disabilityAmount() {\n  if (isNotEligableForDisability()) return 0;\n  // compute the disability amount\n```\n\n整合的对象不仅仅是同等级的条件语句(使用ors），有一些嵌套的条件语句更有整合的必要（使用ands）：\n\n```Java\nif (onVacation())\n    if (lengthOfService() > 10)\n        return 1;\nreturn 0.5;\n```\n\n如果内层的`if`只是起到筛选的作用，而没有产生分支，就可以将内层条件语句跟外层整合到一起：\n```Java\nif (onVacation() && lengthOfService() > 10) return 1;\nelse return 0.5;\n```\n\n如果条件语句的处理只是返回不同的值，不妨使用**三元运算符(ternary operator)** 。不过要注意，三元运算符的使用因人而异，有些项目并不喜欢代码里出现三元运算符。\n```Java\nreturn (onVacation() && lengthOfService() > 10) ? 1 : 0.5;\n```\n\n\n## 整合重复的条件语句块 Consolidate Duplicate Conditional Fragments\n当条件语句的`if`和`else`里出现了相同的处理时，不妨试试将其移动到条件语句之前或者之后，使条件语句中的处理更有“分歧”的感觉。\n\n```Java\nif (isSpecialDeal()) {\n    total = price * 0.95;\n    send();\n}\nelse {\n    total = price * 0.98;\n    send();\n}\n```\n\n`send()`出现在具有分歧的处理之后，可以移动到条件语句的后面；如果出现在具有分歧的处理之前，则移动到条件语句的前面。\n\n```Java\nif (isSpecialDeal())\n    total = price * 0.95;\nelse\n    total = price * 0.98;\nsend();\n```\n\n如果无法确定整合的内容在前还是应该在后，不妨先看一看在条件语句块内，该内容的位置变化是否影响处理结果，\n在不影响处理结果的前提下将要整合的内容前移或者后撤之后，再进行重构就可以了。\n\n## 移除控制标记 Remove Control Flag\n\n如果你使用一个变量的值控制真假的判断，不妨考虑在变量值的修改处用`break`或者`return`来替代。\n\n比如下面的代码\n```Java\nvoid checkSecurity(String[] people) {\n    boolean found = false;\n    for (int i = 0; i < people.length; i++) {\n        if (! found) {\n           if (people[i].equals (\"Don\")){\n             sendAlert();\n             found = true;\n           }\n           if (people[i].equals (\"John\")){\n             sendAlert();\n             found = true;\n           }\n        }\n    }\n}\n```\n这段代码使用变量`found`来判断来逃离`for`循环，显然可以使用`break`来代替：\n```Java\nvoid checkSecurity(String[] people) {\n    for (int i = 0; i < people.length; i++) {\n        if (people[i].equals (\"Don\")){\n          sendAlert();\n          break;\n        }\n        if (people[i].equals (\"John\")){\n          sendAlert();\n          break;\n        }\n    }\n}\n```\n\n这样不仅是代码看起来简洁了许多，也避免了后续得无意义的判断。当然，这里的条件语句还可以整合一下，就不细说了。  \n\n有些时候控制标记不仅仅是用来充当真假的判断条件，也用来保存返回值，这种情况可以考虑在适当的时候使用`return`直接结束方法：\n\n```Java\nvoid checkSecurity(String[] people) {\n    String found = \"\";\n    for (int i = 0; i < people.length; i++) {\n        if (found.equals(\"\")) {\n           if (people[i].equals (\"Don\")){\n              sendAlert();\n              found = \"Don\";\n           }\n           if (people[i].equals (\"John\")){\n              sendAlert();\n              found = \"John\";\n           }\n        }\n    }\n    someLaterCode(found);\n}\n```\n\n我们可以先把`for`循环的内容抽离出来：  \n\n```Java\nvoid checkSecurity(String[] people) {\n    String found = foundMiscreant(people);\n    someLaterCode(found);\n}\nString foundMiscreant(String[] people){\n    String found = \"\";\n    for (int i = 0; i < people.length; i++) {\n        if (found.equals(\"\")) {\n           if (people[i].equals (\"Don\")){\n             sendAlert();\n             found = \"Don\";\n           }\n           if (people[i].equals (\"John\")){\n             sendAlert();\n             found = \"John\";\n           }\n        }\n    }\n    return found;\n}\n```\n\n可以看到标记`found`成为了返回值，程序的意思很明显是：[如果`found`不是空的，就返回其内容], 所以我们可以直接返回要赋给`found`的值，取消`found`这个变量。 \n\n```Java\nString foundMiscreant(String[] people){\n    for (int i = 0; i < people.length; i++) {\n        if (people[i].equals (\"Don\")){\n           sendAlert();\n           return \"Don\";\n        }\n        if (people[i].equals (\"John\")){\n           sendAlert();\n           return \"John\";\n        }\n    }\n    return \"\";\n}\n```\n\n> 细心观察 return 的位置， 你会有意想不到的收获\n\n## 使用卫语句替代嵌套的条件语句 Replace Nested Conditional with Guard Clauses\n\n条件语句在程序中的使用可以有两种思路：\n1. 用来处理明确的分支，程序往哪个方向走都有可能，完全取决于条件的真假。这种情况使用基本的`if else`来处理。\n2. 用来处理特殊情况，程序有着一个基本的前进方向，出现一些特殊情况时，需要立即返回特定值或者转为进行特定的处理。这种情况的条件语句，我们可以称之为 卫语句(guard clause)\n\n当我们遇到层层嵌套的`if else`语句时，可以梳理一下程序的语义，如果发现条件语句的作用不是用来产生“平等”的分支，而是一种“出现了这种情况就赶快退出去吧”的感觉的话，不妨将`if else`简化成`guard clause`.\n\n> 这里作者介绍的是 嵌套的条件语句 ，实际上使用卫语句的思路在单一`if-else`时也适用，每当我们写出一个完全体的`if-else`时，都应该思考一下条件语句属于那种类型，很多时候`if-else`的分歧处理都可以用`if`的卫语句解决。\n\n比如下面的这段代码：  \n\n```Java\ndouble getPayAmount() {\n  double result;\n  if (_isDead) result = deadAmount();\n  else {\n      if (_isSeparated) result = separatedAmount();\n      else {\n          if (_isRetired) result = retiredAmount();\n          else result = normalPayAmount();\n      };\n  }\nreturn result;\n};\n```\n这种梯田式的条件语句，而且处理的对象都是返回值，很明显可以使用卫语句来简化，我们从外向里，一层层的将`result`的赋值改为`return`，最后可以得到：\n\n```Java\ndouble getPayAmount() {  \n  if (_isDead) return deadAmount();  \n  if (_isSeparated) return separatedAmount();  \n  if (_isRetired) return retiredAmount();  \n  return normalPayAmount();};\n```\n\n使用卫语句进行重构并不局限于这一种情况，有时候我们可以发现条件语句筛选了部分情况来进行特定的处理，剩下的情况则返回默认值。这时我们可以考虑反转判断的条件式，来得到一个卫语句，今儿简化代码：\n\n```Java\npublic double getAdjustedCapital() {  \n  double result = 0.0;  \n  if (_capital > 0.0) {    \n    if (_intRate > 0.0 && _duration > 0.0) {     \n      result = (_income / _duration) * ADJ_FACTOR;    \n    }  \n  }  \n  return result;\n}\n```\n\n书中作者给出了详细的重构过程，这里就不细说了。\n\n```Java\npublic double getAdjustedCapital() {    \n  if (_capital <= 0.0) return 0.0;    \n  if (_intRate <= 0.0 || _duration <= 0.0) return 0.0;    \n  return (_income / _duration) * ADJ_FACTOR;\n}\n```\n\n> 工作中很常用到的一个思路就是，如果有一个大大的if框住了几乎整个方法的内容，一定要看看可不可以反转if的条件在最前面直接return，从{}中解放这段代码。\n\n\n## 利用多态来重构条件语句 Replace Conditional with Polymorphism\n\n比如我们有下面这个结构, `Employee`的`type`为抽象类`EmployeeType`，被三个类实现，每个类返回的`typeCode`不同：\n\n```puml\n@startuml\nabstract class EmployeeType{\n  {abstract} int getTypeCode()\n}\n\nclass Employee{\n  int payAmount()\n  int getType()\n  private EmployeeType type\n}\n\nclass Engineer extends EmployeeType{\n  int getTypeCode()\n}\n\nclass Manager extends EmployeeType{\n  int getTypeCode()\n}\nclass Salesman extends EmployeeType{\n  int getTypeCode()\n}\n\nEmployee --> \"1\" EmployeeType : type\n@enduml\n```\n\n`Employee`的方法`payAmount()`的内容为：\n```Java\nint payAmount() {\n    switch (getType()) {\n        case EmployeeType.ENGINEER:\n            return _monthlySalary;\n        case EmployeeType.SALESMAN:\n            return _monthlySalary + _commission;\n        case EmployeeType.MANAGER:\n            return _monthlySalary + _bonus;\n        default:\n            throw new RuntimeException(\"Incorrect Employee\");\n    }\n}\n```\n因为`type`的其实是`EmployeeType`子类的属性，所以我们可以将这个方法移动到`EmployeeType`中，利用子类来实现不同的处理。首先，移动方法到`EmployeeType`里，由于使用了`Employee`才有的属性，所以我们需要将`employee`作为参数传递进去：\n\n```Java\nint payAmount(Employee emp) {\n    switch (getTypeCode()) {\n        case ENGINEER:\n            return emp.getMonthlySalary();\n        case SALESMAN:\n            return emp.getMonthlySalary() + emp.getCommission();\n        case MANAGER:\n            return emp.getMonthlySalary() + emp.getBonus();\n        default:\n            throw new RuntimeException(\"Incorrect Employee\");\n    }\n}\n```\n`EmployeeType`是抽象类，所以我们要继续将方法`payAmout()`在具体的子类中进行实现，不过子类中就用不到`switch`了。在重构的过程中，我们可以在`EmployeeType`中添加例外处理，比如当我们在`Engineer`中实现了`payAmount()`后:\n\n```Java\nclass Engineer ...\n  int payAmount(Employee emp) {      \n    return emp.getMonthlySalary();  \n  }\n\n\nclass EmployeeType...\n  int payAmount(Employee emp) {\n      switch (getTypeCode()) {\n          case ENGINEER:\n             throw new RuntimeException (\"Should be being overridden\");\n          case SALESMAN:\n             return emp.getMonthlySalary() + emp.getCommission();\n          case MANAGER:\n             return emp.getMonthlySalary() + emp.getBonus();\n          default:\n             throw new RuntimeException(\"Incorrect Employee\");\n      }\n  }\n```\n\n如此下去，直到在所有的子类中都实现了`payAmount`之后，将`EmployeeType`的方法改为`abstract`\n```Java\nclass EmployeeType...  \n  abstract int payAmount(Employee emp);\n\nclass Engineer ...\n  int payAmount(Employee emp) {      \n    return emp.getMonthlySalary();  \n  }\n\nclass Salesman...  \n  int payAmount(Employee emp) {      \n    return emp.getMonthlySalary() + emp.getCommission();  \n  } \nclass Manager...  \n  int payAmount(Employee emp) {      \n    return emp.getMonthlySalary() + emp.getBonus();  \n  }\n\n```\n\n\n## 使用空对象 Introduce Null Object\n\n> 空对象模式是一种需要小心使用的设计模式，而且在JavaSE8中引入`Optional<>`后，几乎用不到空对象。\n\n\n## 插入断言 Introduce Assertion\n\n> 善用 `Assert.isTrue()`， 确保一些必须成立的前提条件，从而让后面的条件判断达到最简化。","slug":"2019-04-22-C9","published":true,"updated":"2025-01-31T15:39:12.841Z","_id":"cm6m2r3wp000pzg9d76lc6xsz","comments":true,"layout":"post","photos":[],"html":"<blockquote>\n<p>原文 <a href=\"https://books.google.co.jp/books/about/Refactoring.html?id=HmrDHwgkbPsC&printsec=frontcover&source=kp_read_button&redir_esc=y#v=onepage&q&f=false\">publisher logo Refactoring: Improving the Design of Existing Code</a> Chapter 9 Simplifying Conditianal Expressions</p>\n</blockquote>\n<h2 id=\"分离条件-Decompose-Conditional\"><a href=\"#分离条件-Decompose-Conditional\" class=\"headerlink\" title=\"分离条件 - Decompose Conditional\"></a>分离条件 - Decompose Conditional</h2><p>很多程序之所以“复杂难懂”，是因为出现了“复杂难懂”的条件语句。当人们看到条件语句时，最想获取的信息是：if XXX 的时候，do YYY； else do ZZZ。所以简化条件语句最简单直接的方法就是把长长的判断语句或者大段大段的处理分离出来，留下最基本的<code>if else</code>结构，一目了然，至于具体的判断方法和处理内容，则去具体的方法中查看。</p>\n<blockquote>\n<p>遇到有嵌套结构的条件语句时，不妨先试试先整理成卫语句(Guard Clauses)，行不通再进行分解处理。</p>\n</blockquote>\n<p>比如我们遇到下面这段代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (date.before (SUMMER_START) || date.after(SUMMER_END))&#123;</span><br><span class=\"line\">  charge = quantity * winterRate + winterServiceCharge;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">  charge = quantity * summerRate;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对条件和判断后的代码分别施放<strong>Extract Method</strong>法术:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (notSummer(date))&#123;</span><br><span class=\"line\">  charge = winterCharge(quantity);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  charge = summerCharge (quantity);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">notSummer</span><span class=\"params\">(Date date)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> date.before (SUMMER_START) || date.after(SUMMER_END);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">double</span> <span class=\"title function_\">summerCharge</span><span class=\"params\">(<span class=\"type\">int</span> quantity)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> quantity * summerRate;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">double</span> <span class=\"title function_\">winterCharge</span><span class=\"params\">(<span class=\"type\">int</span> quantity)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> quantity * winterRate + winterServiceCharge;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然，每次抽离出方法的时候，都不要忘记进行测试，<strong>保证重构不会影响原本的处理结果</strong>，很多时候条件语句并不是十分复杂，看起来好像没有抽离成为方法的必要，这就要看条件语句读起来是否顺畅易懂了，如果可以把原本机器感十足的语句变得更像一段流畅直白的描述，条件语句的重构就是有意义的。</p>\n<h2 id=\"整合条件-Consolidate-Conditional-Expression\"><a href=\"#整合条件-Consolidate-Conditional-Expression\" class=\"headerlink\" title=\"整合条件 - Consolidate Conditional Expression\"></a>整合条件 - Consolidate Conditional Expression</h2><p>有些条件语句的虽然有着不同的判断条件，却执行着相同的动作。如果可以确定这些判断不需要完全的独立，不妨整合到一起，再抽离出一个方法，这样，条件语句就更有“一个判断”的感觉了。</p>\n<p>比如下面的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">double</span> <span class=\"title function_\">disabilityAmount</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_seniority &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_monthsDisabled &gt; <span class=\"number\">12</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_isPartTime) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">// compute the disability amount</span></span><br></pre></td></tr></table></figure>\n\n<p>可以整合成：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">double</span> <span class=\"title function_\">disabilityAmount</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isNotEligableForDisability()) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">// compute the disability amount</span></span><br></pre></td></tr></table></figure>\n\n<p>整合的对象不仅仅是同等级的条件语句(使用ors），有一些嵌套的条件语句更有整合的必要（使用ands）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (onVacation())</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lengthOfService() &gt; <span class=\"number\">10</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0.5</span>;</span><br></pre></td></tr></table></figure>\n\n<p>如果内层的<code>if</code>只是起到筛选的作用，而没有产生分支，就可以将内层条件语句跟外层整合到一起：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (onVacation() &amp;&amp; lengthOfService() &gt; <span class=\"number\">10</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">0.5</span>;</span><br></pre></td></tr></table></figure>\n\n<p>如果条件语句的处理只是返回不同的值，不妨使用<strong>三元运算符(ternary operator)</strong> 。不过要注意，三元运算符的使用因人而异，有些项目并不喜欢代码里出现三元运算符。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> (onVacation() &amp;&amp; lengthOfService() &gt; <span class=\"number\">10</span>) ? <span class=\"number\">1</span> : <span class=\"number\">0.5</span>;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"整合重复的条件语句块-Consolidate-Duplicate-Conditional-Fragments\"><a href=\"#整合重复的条件语句块-Consolidate-Duplicate-Conditional-Fragments\" class=\"headerlink\" title=\"整合重复的条件语句块 Consolidate Duplicate Conditional Fragments\"></a>整合重复的条件语句块 Consolidate Duplicate Conditional Fragments</h2><p>当条件语句的<code>if</code>和<code>else</code>里出现了相同的处理时，不妨试试将其移动到条件语句之前或者之后，使条件语句中的处理更有“分歧”的感觉。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (isSpecialDeal()) &#123;</span><br><span class=\"line\">    total = price * <span class=\"number\">0.95</span>;</span><br><span class=\"line\">    send();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    total = price * <span class=\"number\">0.98</span>;</span><br><span class=\"line\">    send();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>send()</code>出现在具有分歧的处理之后，可以移动到条件语句的后面；如果出现在具有分歧的处理之前，则移动到条件语句的前面。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (isSpecialDeal())</span><br><span class=\"line\">    total = price * <span class=\"number\">0.95</span>;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    total = price * <span class=\"number\">0.98</span>;</span><br><span class=\"line\">send();</span><br></pre></td></tr></table></figure>\n\n<p>如果无法确定整合的内容在前还是应该在后，不妨先看一看在条件语句块内，该内容的位置变化是否影响处理结果，<br>在不影响处理结果的前提下将要整合的内容前移或者后撤之后，再进行重构就可以了。</p>\n<h2 id=\"移除控制标记-Remove-Control-Flag\"><a href=\"#移除控制标记-Remove-Control-Flag\" class=\"headerlink\" title=\"移除控制标记 Remove Control Flag\"></a>移除控制标记 Remove Control Flag</h2><p>如果你使用一个变量的值控制真假的判断，不妨考虑在变量值的修改处用<code>break</code>或者<code>return</code>来替代。</p>\n<p>比如下面的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">checkSecurity</span><span class=\"params\">(String[] people)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">found</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; people.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (! found) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (people[i].equals (<span class=\"string\">&quot;Don&quot;</span>))&#123;</span><br><span class=\"line\">             sendAlert();</span><br><span class=\"line\">             found = <span class=\"literal\">true</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (people[i].equals (<span class=\"string\">&quot;John&quot;</span>))&#123;</span><br><span class=\"line\">             sendAlert();</span><br><span class=\"line\">             found = <span class=\"literal\">true</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码使用变量<code>found</code>来判断来逃离<code>for</code>循环，显然可以使用<code>break</code>来代替：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">checkSecurity</span><span class=\"params\">(String[] people)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; people.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (people[i].equals (<span class=\"string\">&quot;Don&quot;</span>))&#123;</span><br><span class=\"line\">          sendAlert();</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (people[i].equals (<span class=\"string\">&quot;John&quot;</span>))&#123;</span><br><span class=\"line\">          sendAlert();</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样不仅是代码看起来简洁了许多，也避免了后续得无意义的判断。当然，这里的条件语句还可以整合一下，就不细说了。  </p>\n<p>有些时候控制标记不仅仅是用来充当真假的判断条件，也用来保存返回值，这种情况可以考虑在适当的时候使用<code>return</code>直接结束方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">checkSecurity</span><span class=\"params\">(String[] people)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">found</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; people.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (found.equals(<span class=\"string\">&quot;&quot;</span>)) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (people[i].equals (<span class=\"string\">&quot;Don&quot;</span>))&#123;</span><br><span class=\"line\">              sendAlert();</span><br><span class=\"line\">              found = <span class=\"string\">&quot;Don&quot;</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (people[i].equals (<span class=\"string\">&quot;John&quot;</span>))&#123;</span><br><span class=\"line\">              sendAlert();</span><br><span class=\"line\">              found = <span class=\"string\">&quot;John&quot;</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    someLaterCode(found);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以先把<code>for</code>循环的内容抽离出来：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">checkSecurity</span><span class=\"params\">(String[] people)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">found</span> <span class=\"operator\">=</span> foundMiscreant(people);</span><br><span class=\"line\">    someLaterCode(found);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">String <span class=\"title function_\">foundMiscreant</span><span class=\"params\">(String[] people)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">found</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; people.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (found.equals(<span class=\"string\">&quot;&quot;</span>)) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (people[i].equals (<span class=\"string\">&quot;Don&quot;</span>))&#123;</span><br><span class=\"line\">             sendAlert();</span><br><span class=\"line\">             found = <span class=\"string\">&quot;Don&quot;</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (people[i].equals (<span class=\"string\">&quot;John&quot;</span>))&#123;</span><br><span class=\"line\">             sendAlert();</span><br><span class=\"line\">             found = <span class=\"string\">&quot;John&quot;</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> found;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到标记<code>found</code>成为了返回值，程序的意思很明显是：[如果<code>found</code>不是空的，就返回其内容], 所以我们可以直接返回要赋给<code>found</code>的值，取消<code>found</code>这个变量。 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String <span class=\"title function_\">foundMiscreant</span><span class=\"params\">(String[] people)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; people.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (people[i].equals (<span class=\"string\">&quot;Don&quot;</span>))&#123;</span><br><span class=\"line\">           sendAlert();</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"string\">&quot;Don&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (people[i].equals (<span class=\"string\">&quot;John&quot;</span>))&#123;</span><br><span class=\"line\">           sendAlert();</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"string\">&quot;John&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>细心观察 return 的位置， 你会有意想不到的收获</p>\n</blockquote>\n<h2 id=\"使用卫语句替代嵌套的条件语句-Replace-Nested-Conditional-with-Guard-Clauses\"><a href=\"#使用卫语句替代嵌套的条件语句-Replace-Nested-Conditional-with-Guard-Clauses\" class=\"headerlink\" title=\"使用卫语句替代嵌套的条件语句 Replace Nested Conditional with Guard Clauses\"></a>使用卫语句替代嵌套的条件语句 Replace Nested Conditional with Guard Clauses</h2><p>条件语句在程序中的使用可以有两种思路：</p>\n<ol>\n<li>用来处理明确的分支，程序往哪个方向走都有可能，完全取决于条件的真假。这种情况使用基本的<code>if else</code>来处理。</li>\n<li>用来处理特殊情况，程序有着一个基本的前进方向，出现一些特殊情况时，需要立即返回特定值或者转为进行特定的处理。这种情况的条件语句，我们可以称之为 卫语句(guard clause)</li>\n</ol>\n<p>当我们遇到层层嵌套的<code>if else</code>语句时，可以梳理一下程序的语义，如果发现条件语句的作用不是用来产生“平等”的分支，而是一种“出现了这种情况就赶快退出去吧”的感觉的话，不妨将<code>if else</code>简化成<code>guard clause</code>.</p>\n<blockquote>\n<p>这里作者介绍的是 嵌套的条件语句 ，实际上使用卫语句的思路在单一<code>if-else</code>时也适用，每当我们写出一个完全体的<code>if-else</code>时，都应该思考一下条件语句属于那种类型，很多时候<code>if-else</code>的分歧处理都可以用<code>if</code>的卫语句解决。</p>\n</blockquote>\n<p>比如下面的这段代码：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">double</span> <span class=\"title function_\">getPayAmount</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">double</span> result;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_isDead) result = deadAmount();</span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (_isSeparated) result = separatedAmount();</span><br><span class=\"line\">      <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (_isRetired) result = retiredAmount();</span><br><span class=\"line\">          <span class=\"keyword\">else</span> result = normalPayAmount();</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这种梯田式的条件语句，而且处理的对象都是返回值，很明显可以使用卫语句来简化，我们从外向里，一层层的将<code>result</code>的赋值改为<code>return</code>，最后可以得到：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">double</span> <span class=\"title function_\">getPayAmount</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_isDead) <span class=\"keyword\">return</span> deadAmount();  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_isSeparated) <span class=\"keyword\">return</span> separatedAmount();  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_isRetired) <span class=\"keyword\">return</span> retiredAmount();  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> normalPayAmount();&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>使用卫语句进行重构并不局限于这一种情况，有时候我们可以发现条件语句筛选了部分情况来进行特定的处理，剩下的情况则返回默认值。这时我们可以考虑反转判断的条件式，来得到一个卫语句，今儿简化代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">getAdjustedCapital</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">  <span class=\"type\">double</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"number\">0.0</span>;  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_capital &gt; <span class=\"number\">0.0</span>) &#123;    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_intRate &gt; <span class=\"number\">0.0</span> &amp;&amp; _duration &gt; <span class=\"number\">0.0</span>) &#123;     </span><br><span class=\"line\">      result = (_income / _duration) * ADJ_FACTOR;    </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>书中作者给出了详细的重构过程，这里就不细说了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">getAdjustedCapital</span><span class=\"params\">()</span> &#123;    </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_capital &lt;= <span class=\"number\">0.0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0.0</span>;    </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_intRate &lt;= <span class=\"number\">0.0</span> || _duration &lt;= <span class=\"number\">0.0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0.0</span>;    </span><br><span class=\"line\">  <span class=\"keyword\">return</span> (_income / _duration) * ADJ_FACTOR;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>工作中很常用到的一个思路就是，如果有一个大大的if框住了几乎整个方法的内容，一定要看看可不可以反转if的条件在最前面直接return，从{}中解放这段代码。</p>\n</blockquote>\n<h2 id=\"利用多态来重构条件语句-Replace-Conditional-with-Polymorphism\"><a href=\"#利用多态来重构条件语句-Replace-Conditional-with-Polymorphism\" class=\"headerlink\" title=\"利用多态来重构条件语句 Replace Conditional with Polymorphism\"></a>利用多态来重构条件语句 Replace Conditional with Polymorphism</h2><p>比如我们有下面这个结构, <code>Employee</code>的<code>type</code>为抽象类<code>EmployeeType</code>，被三个类实现，每个类返回的<code>typeCode</code>不同：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startuml</span><br><span class=\"line\">abstract class EmployeeType&#123;</span><br><span class=\"line\">  &#123;abstract&#125; int getTypeCode()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Employee&#123;</span><br><span class=\"line\">  int payAmount()</span><br><span class=\"line\">  int getType()</span><br><span class=\"line\">  private EmployeeType type</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Engineer extends EmployeeType&#123;</span><br><span class=\"line\">  int getTypeCode()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Manager extends EmployeeType&#123;</span><br><span class=\"line\">  int getTypeCode()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Salesman extends EmployeeType&#123;</span><br><span class=\"line\">  int getTypeCode()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Employee --&gt; &quot;1&quot; EmployeeType : type</span><br><span class=\"line\">@enduml</span><br></pre></td></tr></table></figure>\n\n<p><code>Employee</code>的方法<code>payAmount()</code>的内容为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">payAmount</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (getType()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> EmployeeType.ENGINEER:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _monthlySalary;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> EmployeeType.SALESMAN:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _monthlySalary + _commission;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> EmployeeType.MANAGER:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _monthlySalary + _bonus;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;Incorrect Employee&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为<code>type</code>的其实是<code>EmployeeType</code>子类的属性，所以我们可以将这个方法移动到<code>EmployeeType</code>中，利用子类来实现不同的处理。首先，移动方法到<code>EmployeeType</code>里，由于使用了<code>Employee</code>才有的属性，所以我们需要将<code>employee</code>作为参数传递进去：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">payAmount</span><span class=\"params\">(Employee emp)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (getTypeCode()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> ENGINEER:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> emp.getMonthlySalary();</span><br><span class=\"line\">        <span class=\"keyword\">case</span> SALESMAN:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> emp.getMonthlySalary() + emp.getCommission();</span><br><span class=\"line\">        <span class=\"keyword\">case</span> MANAGER:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> emp.getMonthlySalary() + emp.getBonus();</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;Incorrect Employee&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>EmployeeType</code>是抽象类，所以我们要继续将方法<code>payAmout()</code>在具体的子类中进行实现，不过子类中就用不到<code>switch</code>了。在重构的过程中，我们可以在<code>EmployeeType</code>中添加例外处理，比如当我们在<code>Engineer</code>中实现了<code>payAmount()</code>后:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Engineer</span> ...</span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"title function_\">payAmount</span><span class=\"params\">(Employee emp)</span> &#123;      </span><br><span class=\"line\">    <span class=\"keyword\">return</span> emp.getMonthlySalary();  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EmployeeType</span>...</span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"title function_\">payAmount</span><span class=\"params\">(Employee emp)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (getTypeCode()) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">case</span> ENGINEER:</span><br><span class=\"line\">             <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span> (<span class=\"string\">&quot;Should be being overridden&quot;</span>);</span><br><span class=\"line\">          <span class=\"keyword\">case</span> SALESMAN:</span><br><span class=\"line\">             <span class=\"keyword\">return</span> emp.getMonthlySalary() + emp.getCommission();</span><br><span class=\"line\">          <span class=\"keyword\">case</span> MANAGER:</span><br><span class=\"line\">             <span class=\"keyword\">return</span> emp.getMonthlySalary() + emp.getBonus();</span><br><span class=\"line\">          <span class=\"keyword\">default</span>:</span><br><span class=\"line\">             <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;Incorrect Employee&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>如此下去，直到在所有的子类中都实现了<code>payAmount</code>之后，将<code>EmployeeType</code>的方法改为<code>abstract</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EmployeeType</span>...  </span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"type\">int</span> <span class=\"title function_\">payAmount</span><span class=\"params\">(Employee emp)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Engineer</span> ...</span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"title function_\">payAmount</span><span class=\"params\">(Employee emp)</span> &#123;      </span><br><span class=\"line\">    <span class=\"keyword\">return</span> emp.getMonthlySalary();  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Salesman</span>...  </span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"title function_\">payAmount</span><span class=\"params\">(Employee emp)</span> &#123;      </span><br><span class=\"line\">    <span class=\"keyword\">return</span> emp.getMonthlySalary() + emp.getCommission();  </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Manager</span>...  </span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"title function_\">payAmount</span><span class=\"params\">(Employee emp)</span> &#123;      </span><br><span class=\"line\">    <span class=\"keyword\">return</span> emp.getMonthlySalary() + emp.getBonus();  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"使用空对象-Introduce-Null-Object\"><a href=\"#使用空对象-Introduce-Null-Object\" class=\"headerlink\" title=\"使用空对象 Introduce Null Object\"></a>使用空对象 Introduce Null Object</h2><blockquote>\n<p>空对象模式是一种需要小心使用的设计模式，而且在JavaSE8中引入<code>Optional&lt;&gt;</code>后，几乎用不到空对象。</p>\n</blockquote>\n<h2 id=\"插入断言-Introduce-Assertion\"><a href=\"#插入断言-Introduce-Assertion\" class=\"headerlink\" title=\"插入断言 Introduce Assertion\"></a>插入断言 Introduce Assertion</h2><blockquote>\n<p>善用 <code>Assert.isTrue()</code>， 确保一些必须成立的前提条件，从而让后面的条件判断达到最简化。</p>\n</blockquote>\n","excerpt":"","more":"<blockquote>\n<p>原文 <a href=\"https://books.google.co.jp/books/about/Refactoring.html?id=HmrDHwgkbPsC&printsec=frontcover&source=kp_read_button&redir_esc=y#v=onepage&q&f=false\">publisher logo Refactoring: Improving the Design of Existing Code</a> Chapter 9 Simplifying Conditianal Expressions</p>\n</blockquote>\n<h2 id=\"分离条件-Decompose-Conditional\"><a href=\"#分离条件-Decompose-Conditional\" class=\"headerlink\" title=\"分离条件 - Decompose Conditional\"></a>分离条件 - Decompose Conditional</h2><p>很多程序之所以“复杂难懂”，是因为出现了“复杂难懂”的条件语句。当人们看到条件语句时，最想获取的信息是：if XXX 的时候，do YYY； else do ZZZ。所以简化条件语句最简单直接的方法就是把长长的判断语句或者大段大段的处理分离出来，留下最基本的<code>if else</code>结构，一目了然，至于具体的判断方法和处理内容，则去具体的方法中查看。</p>\n<blockquote>\n<p>遇到有嵌套结构的条件语句时，不妨先试试先整理成卫语句(Guard Clauses)，行不通再进行分解处理。</p>\n</blockquote>\n<p>比如我们遇到下面这段代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (date.before (SUMMER_START) || date.after(SUMMER_END))&#123;</span><br><span class=\"line\">  charge = quantity * winterRate + winterServiceCharge;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">  charge = quantity * summerRate;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对条件和判断后的代码分别施放<strong>Extract Method</strong>法术:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (notSummer(date))&#123;</span><br><span class=\"line\">  charge = winterCharge(quantity);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  charge = summerCharge (quantity);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">notSummer</span><span class=\"params\">(Date date)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> date.before (SUMMER_START) || date.after(SUMMER_END);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">double</span> <span class=\"title function_\">summerCharge</span><span class=\"params\">(<span class=\"type\">int</span> quantity)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> quantity * summerRate;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">double</span> <span class=\"title function_\">winterCharge</span><span class=\"params\">(<span class=\"type\">int</span> quantity)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> quantity * winterRate + winterServiceCharge;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然，每次抽离出方法的时候，都不要忘记进行测试，<strong>保证重构不会影响原本的处理结果</strong>，很多时候条件语句并不是十分复杂，看起来好像没有抽离成为方法的必要，这就要看条件语句读起来是否顺畅易懂了，如果可以把原本机器感十足的语句变得更像一段流畅直白的描述，条件语句的重构就是有意义的。</p>\n<h2 id=\"整合条件-Consolidate-Conditional-Expression\"><a href=\"#整合条件-Consolidate-Conditional-Expression\" class=\"headerlink\" title=\"整合条件 - Consolidate Conditional Expression\"></a>整合条件 - Consolidate Conditional Expression</h2><p>有些条件语句的虽然有着不同的判断条件，却执行着相同的动作。如果可以确定这些判断不需要完全的独立，不妨整合到一起，再抽离出一个方法，这样，条件语句就更有“一个判断”的感觉了。</p>\n<p>比如下面的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">double</span> <span class=\"title function_\">disabilityAmount</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_seniority &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_monthsDisabled &gt; <span class=\"number\">12</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_isPartTime) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">// compute the disability amount</span></span><br></pre></td></tr></table></figure>\n\n<p>可以整合成：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">double</span> <span class=\"title function_\">disabilityAmount</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isNotEligableForDisability()) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">// compute the disability amount</span></span><br></pre></td></tr></table></figure>\n\n<p>整合的对象不仅仅是同等级的条件语句(使用ors），有一些嵌套的条件语句更有整合的必要（使用ands）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (onVacation())</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lengthOfService() &gt; <span class=\"number\">10</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0.5</span>;</span><br></pre></td></tr></table></figure>\n\n<p>如果内层的<code>if</code>只是起到筛选的作用，而没有产生分支，就可以将内层条件语句跟外层整合到一起：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (onVacation() &amp;&amp; lengthOfService() &gt; <span class=\"number\">10</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">0.5</span>;</span><br></pre></td></tr></table></figure>\n\n<p>如果条件语句的处理只是返回不同的值，不妨使用<strong>三元运算符(ternary operator)</strong> 。不过要注意，三元运算符的使用因人而异，有些项目并不喜欢代码里出现三元运算符。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> (onVacation() &amp;&amp; lengthOfService() &gt; <span class=\"number\">10</span>) ? <span class=\"number\">1</span> : <span class=\"number\">0.5</span>;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"整合重复的条件语句块-Consolidate-Duplicate-Conditional-Fragments\"><a href=\"#整合重复的条件语句块-Consolidate-Duplicate-Conditional-Fragments\" class=\"headerlink\" title=\"整合重复的条件语句块 Consolidate Duplicate Conditional Fragments\"></a>整合重复的条件语句块 Consolidate Duplicate Conditional Fragments</h2><p>当条件语句的<code>if</code>和<code>else</code>里出现了相同的处理时，不妨试试将其移动到条件语句之前或者之后，使条件语句中的处理更有“分歧”的感觉。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (isSpecialDeal()) &#123;</span><br><span class=\"line\">    total = price * <span class=\"number\">0.95</span>;</span><br><span class=\"line\">    send();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    total = price * <span class=\"number\">0.98</span>;</span><br><span class=\"line\">    send();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>send()</code>出现在具有分歧的处理之后，可以移动到条件语句的后面；如果出现在具有分歧的处理之前，则移动到条件语句的前面。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (isSpecialDeal())</span><br><span class=\"line\">    total = price * <span class=\"number\">0.95</span>;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    total = price * <span class=\"number\">0.98</span>;</span><br><span class=\"line\">send();</span><br></pre></td></tr></table></figure>\n\n<p>如果无法确定整合的内容在前还是应该在后，不妨先看一看在条件语句块内，该内容的位置变化是否影响处理结果，<br>在不影响处理结果的前提下将要整合的内容前移或者后撤之后，再进行重构就可以了。</p>\n<h2 id=\"移除控制标记-Remove-Control-Flag\"><a href=\"#移除控制标记-Remove-Control-Flag\" class=\"headerlink\" title=\"移除控制标记 Remove Control Flag\"></a>移除控制标记 Remove Control Flag</h2><p>如果你使用一个变量的值控制真假的判断，不妨考虑在变量值的修改处用<code>break</code>或者<code>return</code>来替代。</p>\n<p>比如下面的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">checkSecurity</span><span class=\"params\">(String[] people)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">found</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; people.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (! found) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (people[i].equals (<span class=\"string\">&quot;Don&quot;</span>))&#123;</span><br><span class=\"line\">             sendAlert();</span><br><span class=\"line\">             found = <span class=\"literal\">true</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (people[i].equals (<span class=\"string\">&quot;John&quot;</span>))&#123;</span><br><span class=\"line\">             sendAlert();</span><br><span class=\"line\">             found = <span class=\"literal\">true</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码使用变量<code>found</code>来判断来逃离<code>for</code>循环，显然可以使用<code>break</code>来代替：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">checkSecurity</span><span class=\"params\">(String[] people)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; people.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (people[i].equals (<span class=\"string\">&quot;Don&quot;</span>))&#123;</span><br><span class=\"line\">          sendAlert();</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (people[i].equals (<span class=\"string\">&quot;John&quot;</span>))&#123;</span><br><span class=\"line\">          sendAlert();</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样不仅是代码看起来简洁了许多，也避免了后续得无意义的判断。当然，这里的条件语句还可以整合一下，就不细说了。  </p>\n<p>有些时候控制标记不仅仅是用来充当真假的判断条件，也用来保存返回值，这种情况可以考虑在适当的时候使用<code>return</code>直接结束方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">checkSecurity</span><span class=\"params\">(String[] people)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">found</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; people.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (found.equals(<span class=\"string\">&quot;&quot;</span>)) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (people[i].equals (<span class=\"string\">&quot;Don&quot;</span>))&#123;</span><br><span class=\"line\">              sendAlert();</span><br><span class=\"line\">              found = <span class=\"string\">&quot;Don&quot;</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (people[i].equals (<span class=\"string\">&quot;John&quot;</span>))&#123;</span><br><span class=\"line\">              sendAlert();</span><br><span class=\"line\">              found = <span class=\"string\">&quot;John&quot;</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    someLaterCode(found);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以先把<code>for</code>循环的内容抽离出来：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">checkSecurity</span><span class=\"params\">(String[] people)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">found</span> <span class=\"operator\">=</span> foundMiscreant(people);</span><br><span class=\"line\">    someLaterCode(found);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">String <span class=\"title function_\">foundMiscreant</span><span class=\"params\">(String[] people)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">found</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; people.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (found.equals(<span class=\"string\">&quot;&quot;</span>)) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (people[i].equals (<span class=\"string\">&quot;Don&quot;</span>))&#123;</span><br><span class=\"line\">             sendAlert();</span><br><span class=\"line\">             found = <span class=\"string\">&quot;Don&quot;</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (people[i].equals (<span class=\"string\">&quot;John&quot;</span>))&#123;</span><br><span class=\"line\">             sendAlert();</span><br><span class=\"line\">             found = <span class=\"string\">&quot;John&quot;</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> found;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到标记<code>found</code>成为了返回值，程序的意思很明显是：[如果<code>found</code>不是空的，就返回其内容], 所以我们可以直接返回要赋给<code>found</code>的值，取消<code>found</code>这个变量。 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String <span class=\"title function_\">foundMiscreant</span><span class=\"params\">(String[] people)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; people.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (people[i].equals (<span class=\"string\">&quot;Don&quot;</span>))&#123;</span><br><span class=\"line\">           sendAlert();</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"string\">&quot;Don&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (people[i].equals (<span class=\"string\">&quot;John&quot;</span>))&#123;</span><br><span class=\"line\">           sendAlert();</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"string\">&quot;John&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>细心观察 return 的位置， 你会有意想不到的收获</p>\n</blockquote>\n<h2 id=\"使用卫语句替代嵌套的条件语句-Replace-Nested-Conditional-with-Guard-Clauses\"><a href=\"#使用卫语句替代嵌套的条件语句-Replace-Nested-Conditional-with-Guard-Clauses\" class=\"headerlink\" title=\"使用卫语句替代嵌套的条件语句 Replace Nested Conditional with Guard Clauses\"></a>使用卫语句替代嵌套的条件语句 Replace Nested Conditional with Guard Clauses</h2><p>条件语句在程序中的使用可以有两种思路：</p>\n<ol>\n<li>用来处理明确的分支，程序往哪个方向走都有可能，完全取决于条件的真假。这种情况使用基本的<code>if else</code>来处理。</li>\n<li>用来处理特殊情况，程序有着一个基本的前进方向，出现一些特殊情况时，需要立即返回特定值或者转为进行特定的处理。这种情况的条件语句，我们可以称之为 卫语句(guard clause)</li>\n</ol>\n<p>当我们遇到层层嵌套的<code>if else</code>语句时，可以梳理一下程序的语义，如果发现条件语句的作用不是用来产生“平等”的分支，而是一种“出现了这种情况就赶快退出去吧”的感觉的话，不妨将<code>if else</code>简化成<code>guard clause</code>.</p>\n<blockquote>\n<p>这里作者介绍的是 嵌套的条件语句 ，实际上使用卫语句的思路在单一<code>if-else</code>时也适用，每当我们写出一个完全体的<code>if-else</code>时，都应该思考一下条件语句属于那种类型，很多时候<code>if-else</code>的分歧处理都可以用<code>if</code>的卫语句解决。</p>\n</blockquote>\n<p>比如下面的这段代码：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">double</span> <span class=\"title function_\">getPayAmount</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">double</span> result;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_isDead) result = deadAmount();</span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (_isSeparated) result = separatedAmount();</span><br><span class=\"line\">      <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (_isRetired) result = retiredAmount();</span><br><span class=\"line\">          <span class=\"keyword\">else</span> result = normalPayAmount();</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这种梯田式的条件语句，而且处理的对象都是返回值，很明显可以使用卫语句来简化，我们从外向里，一层层的将<code>result</code>的赋值改为<code>return</code>，最后可以得到：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">double</span> <span class=\"title function_\">getPayAmount</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_isDead) <span class=\"keyword\">return</span> deadAmount();  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_isSeparated) <span class=\"keyword\">return</span> separatedAmount();  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_isRetired) <span class=\"keyword\">return</span> retiredAmount();  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> normalPayAmount();&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>使用卫语句进行重构并不局限于这一种情况，有时候我们可以发现条件语句筛选了部分情况来进行特定的处理，剩下的情况则返回默认值。这时我们可以考虑反转判断的条件式，来得到一个卫语句，今儿简化代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">getAdjustedCapital</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">  <span class=\"type\">double</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"number\">0.0</span>;  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_capital &gt; <span class=\"number\">0.0</span>) &#123;    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_intRate &gt; <span class=\"number\">0.0</span> &amp;&amp; _duration &gt; <span class=\"number\">0.0</span>) &#123;     </span><br><span class=\"line\">      result = (_income / _duration) * ADJ_FACTOR;    </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>书中作者给出了详细的重构过程，这里就不细说了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">getAdjustedCapital</span><span class=\"params\">()</span> &#123;    </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_capital &lt;= <span class=\"number\">0.0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0.0</span>;    </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_intRate &lt;= <span class=\"number\">0.0</span> || _duration &lt;= <span class=\"number\">0.0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0.0</span>;    </span><br><span class=\"line\">  <span class=\"keyword\">return</span> (_income / _duration) * ADJ_FACTOR;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>工作中很常用到的一个思路就是，如果有一个大大的if框住了几乎整个方法的内容，一定要看看可不可以反转if的条件在最前面直接return，从{}中解放这段代码。</p>\n</blockquote>\n<h2 id=\"利用多态来重构条件语句-Replace-Conditional-with-Polymorphism\"><a href=\"#利用多态来重构条件语句-Replace-Conditional-with-Polymorphism\" class=\"headerlink\" title=\"利用多态来重构条件语句 Replace Conditional with Polymorphism\"></a>利用多态来重构条件语句 Replace Conditional with Polymorphism</h2><p>比如我们有下面这个结构, <code>Employee</code>的<code>type</code>为抽象类<code>EmployeeType</code>，被三个类实现，每个类返回的<code>typeCode</code>不同：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startuml</span><br><span class=\"line\">abstract class EmployeeType&#123;</span><br><span class=\"line\">  &#123;abstract&#125; int getTypeCode()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Employee&#123;</span><br><span class=\"line\">  int payAmount()</span><br><span class=\"line\">  int getType()</span><br><span class=\"line\">  private EmployeeType type</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Engineer extends EmployeeType&#123;</span><br><span class=\"line\">  int getTypeCode()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Manager extends EmployeeType&#123;</span><br><span class=\"line\">  int getTypeCode()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Salesman extends EmployeeType&#123;</span><br><span class=\"line\">  int getTypeCode()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Employee --&gt; &quot;1&quot; EmployeeType : type</span><br><span class=\"line\">@enduml</span><br></pre></td></tr></table></figure>\n\n<p><code>Employee</code>的方法<code>payAmount()</code>的内容为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">payAmount</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (getType()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> EmployeeType.ENGINEER:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _monthlySalary;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> EmployeeType.SALESMAN:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _monthlySalary + _commission;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> EmployeeType.MANAGER:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _monthlySalary + _bonus;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;Incorrect Employee&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为<code>type</code>的其实是<code>EmployeeType</code>子类的属性，所以我们可以将这个方法移动到<code>EmployeeType</code>中，利用子类来实现不同的处理。首先，移动方法到<code>EmployeeType</code>里，由于使用了<code>Employee</code>才有的属性，所以我们需要将<code>employee</code>作为参数传递进去：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">payAmount</span><span class=\"params\">(Employee emp)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (getTypeCode()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> ENGINEER:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> emp.getMonthlySalary();</span><br><span class=\"line\">        <span class=\"keyword\">case</span> SALESMAN:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> emp.getMonthlySalary() + emp.getCommission();</span><br><span class=\"line\">        <span class=\"keyword\">case</span> MANAGER:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> emp.getMonthlySalary() + emp.getBonus();</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;Incorrect Employee&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>EmployeeType</code>是抽象类，所以我们要继续将方法<code>payAmout()</code>在具体的子类中进行实现，不过子类中就用不到<code>switch</code>了。在重构的过程中，我们可以在<code>EmployeeType</code>中添加例外处理，比如当我们在<code>Engineer</code>中实现了<code>payAmount()</code>后:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Engineer</span> ...</span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"title function_\">payAmount</span><span class=\"params\">(Employee emp)</span> &#123;      </span><br><span class=\"line\">    <span class=\"keyword\">return</span> emp.getMonthlySalary();  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EmployeeType</span>...</span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"title function_\">payAmount</span><span class=\"params\">(Employee emp)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (getTypeCode()) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">case</span> ENGINEER:</span><br><span class=\"line\">             <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span> (<span class=\"string\">&quot;Should be being overridden&quot;</span>);</span><br><span class=\"line\">          <span class=\"keyword\">case</span> SALESMAN:</span><br><span class=\"line\">             <span class=\"keyword\">return</span> emp.getMonthlySalary() + emp.getCommission();</span><br><span class=\"line\">          <span class=\"keyword\">case</span> MANAGER:</span><br><span class=\"line\">             <span class=\"keyword\">return</span> emp.getMonthlySalary() + emp.getBonus();</span><br><span class=\"line\">          <span class=\"keyword\">default</span>:</span><br><span class=\"line\">             <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;Incorrect Employee&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>如此下去，直到在所有的子类中都实现了<code>payAmount</code>之后，将<code>EmployeeType</code>的方法改为<code>abstract</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EmployeeType</span>...  </span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"type\">int</span> <span class=\"title function_\">payAmount</span><span class=\"params\">(Employee emp)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Engineer</span> ...</span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"title function_\">payAmount</span><span class=\"params\">(Employee emp)</span> &#123;      </span><br><span class=\"line\">    <span class=\"keyword\">return</span> emp.getMonthlySalary();  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Salesman</span>...  </span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"title function_\">payAmount</span><span class=\"params\">(Employee emp)</span> &#123;      </span><br><span class=\"line\">    <span class=\"keyword\">return</span> emp.getMonthlySalary() + emp.getCommission();  </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Manager</span>...  </span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"title function_\">payAmount</span><span class=\"params\">(Employee emp)</span> &#123;      </span><br><span class=\"line\">    <span class=\"keyword\">return</span> emp.getMonthlySalary() + emp.getBonus();  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"使用空对象-Introduce-Null-Object\"><a href=\"#使用空对象-Introduce-Null-Object\" class=\"headerlink\" title=\"使用空对象 Introduce Null Object\"></a>使用空对象 Introduce Null Object</h2><blockquote>\n<p>空对象模式是一种需要小心使用的设计模式，而且在JavaSE8中引入<code>Optional&lt;&gt;</code>后，几乎用不到空对象。</p>\n</blockquote>\n<h2 id=\"插入断言-Introduce-Assertion\"><a href=\"#插入断言-Introduce-Assertion\" class=\"headerlink\" title=\"插入断言 Introduce Assertion\"></a>插入断言 Introduce Assertion</h2><blockquote>\n<p>善用 <code>Assert.isTrue()</code>， 确保一些必须成立的前提条件，从而让后面的条件判断达到最简化。</p>\n</blockquote>\n","path":"2019/04/22/2019-04-22-C9/","permalink":"https://xsun4231.github.io/2019/04/22/2019-04-22-C9/","tags":[{"name":"未填之坑","_id":"cm6m2r3wu001azg9ddqkxcay0","slug":"未填之坑","path":"tags/未填之坑/","permalink":"https://xsun4231.github.io/tags/%E6%9C%AA%E5%A1%AB%E4%B9%8B%E5%9D%91/","length":4},{"name":"Refactoring","_id":"cm6m2r3x1002dzg9d580t9bs9","slug":"Refactoring","path":"tags/Refactoring/","permalink":"https://xsun4231.github.io/tags/Refactoring/","length":2},{"name":"重构","_id":"cm6m2r3x1002gzg9d7l0shpgy","slug":"重构","path":"tags/重构/","permalink":"https://xsun4231.github.io/tags/%E9%87%8D%E6%9E%84/","length":2}],"categories":[],"prev":{"title":"代码重构 - 改善方法的结构","date":"2019-04-24T05:06:44.000Z","slug":"2019-04-24-refactoring-C6","published":true,"updated":"2025-01-31T15:39:12.841Z","_id":"cm6m2r3wq000rzg9d4v1p5wfx","layout":"post","photos":[],"excerpt":"","path":"2019/04/24/2019-04-24-refactoring-C6/","permalink":"https://xsun4231.github.io/2019/04/24/2019-04-24-refactoring-C6/","__post":true},"next":{"title":"通过命令行从本地推送代码到GitHub","date":"2019-04-15T06:46:33.000Z","slug":"2019-04-15-git-connect","published":true,"updated":"2025-01-31T15:39:12.839Z","_id":"cm6m2r3wp000nzg9dd2vx7ibu","layout":"post","photos":[],"excerpt":"","path":"2019/04/15/2019-04-15-git-connect/","permalink":"https://xsun4231.github.io/2019/04/15/2019-04-15-git-connect/","__post":true},"__post":true}