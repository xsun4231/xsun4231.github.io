{"title":"代码重构 - 改善方法的结构","date":"2019-04-24T05:06:44.000Z","source":"_posts/2019-04-24-refactoring-C6.md","raw":"---\ntitle: 代码重构 - 改善方法的结构\ntags:\n  - Refactoring\n  - 重构\ndate: 2019-04-24 14:06:44\n---\n\n\n代码重构做的最多的就是改善方法的结构。去掉方法中不需要的元素，修改不明确的名称，将复杂而冗长的方法改成精简而明确的小方法群组，是重构方法的主要思路。  \n\n方法重构用的最多的是【提取方法】，有种将一地零落的玩具分类整理装箱的感觉；而【方法内联】一般在方法提取的过于详细以至于产生了反作用，或者需要重新整理方法间关系时使用。  \n\n【提取方法】的最大问题，是如何处理局部变量，这就用到了对局部变量的重构技巧。  \n\n## 提取方法 Extract Method\n如果发现方法内有一个代码块在很具体的做一件事儿，或者有一句漂亮的注释解释了接下来好几行的操作，那就试试把它提取成一个方法吧，然后取个足以说明其作用的方法名。比如：  \n\n```Java\nvoid printOwing(double amount) {\n    printBanner();\n\n    //print details\n    System.out.println (\"name:\" + _name);\n    System.out.println (\"amount\" + amount);\n}\n```\n重构后是这个样子：  \n\n```Java\nvoid printOwing(double amount) {\n    printBanner();\n    printDetails(amount);\n}\n\nvoid printDetails (double amount) {\n    System.out.println (\"name:\" + _name);\n    System.out.println (\"amount\" + amount);\n}\n```\n\n漂亮的代码往往方法都很简短，有着意思明确的方法名。方法越简洁，被重复利用的机会就越大；方法名如果足以传达信息，又可以省去不少的注释。\n方法的简洁程度和方法名的好坏是联系在一起的，提取方法可以看做是用方法名来取代原位置的代码块，如果不能通过方法名理解原本代码块要执行的操作，重构也就失去了意义。\n重构的时候不用刻意去思考方法或者方法名的长度，重构的关键在于方法名和代码块之间的语义距离（semantic distance)。\n\n### 局部变量的处理\n\n如果要提取的代码块使用了局部变量，提取方法的操作就要变得稍微复杂一些了。\n首先我们需要观察一下局部变量定义、赋值以及被调用的位置，如果局部变量相关的代码可以移动位置，不妨先优化一下，因为优化前后，接下来的重构操作可能会有很大不同。\n\n1. 如果局部变量足够“局部”，可以直接放到新方法内部，当然是最简单的情况。  \n2. 如果局部变量的赋值是在新方法的处理范围外，新方法只是调用了变量值而没有进行修改，我们可以把局部变量当做参数传达给新的方法。  \n3. 如果需要新方法的处理来给变量赋值，而变量值的使用又在新方法的范围外，则需要为新方法添加返回值，返回变量值。\n\n> 想返回多个变量值咋整嘞？这里涉及到了[单一返回值]的问题。编程语言普遍使用的是单一返回值的方法结构，这样可以保证代码的可读性，避免混乱。如果遇到了需要返回多个值的情况，不妨试着细化方法的划分，使用多个单一返回值的方法来实现。\n\n栗子，重构下面代码：  \n```Java\nvoid printOwing() {\n\n    Enumeration e = _orders.elements();\n    double outstanding = 0.0;\n\n    printBanner();\n\n    // calculate outstanding\n    while (e.hasMoreElements()) {\n        Order each = (Order) e.nextElement();\n        outstanding += each.getAmount();\n    }\n\n    printDetails(outstanding);\n}\n```\n\n书中直接进行了如下的重构:\n\n```Java\nvoid printOwing() {\n    printBanner();\n    double outstanding = getOutstanding();\n    printDetails(outstanding);\n}\n\ndouble getOutstanding() {\n    Enumeration e = _orders.elements();\n    double outstanding = 0.0;\n    while (e.hasMoreElements()) {\n        Order each = (Order) e.nextElement();\n        outstanding += each.getAmount();\n    }\n    return outstanding;\n}\n```\n\n书中说将`outstanding`的计算提取成了一个独立的方法，而前面的局部变量因为只在计算中被使用到，所以一并提取了出来。这里有一个看似理所当然却值得做笔记的操作：作者并没有将`printBanner()`或者`printDetails()`放在新方法内。  \n如果将`pringDetails()`放到`getOutstanding()`里，不就不需要设返回值了？ 这是因为重构的对象是计算`outstanding`的代码块，如果将不相关的方法一并放到新方法内，就偏离了重构的目的。\n假设将`printDetails()`放在了`getOutstanding()`内，再看`printOwing()`会发现，可以获取的信息变少了，`printDetails()`这个操作被隐藏在了`getOutStanding`里，而这并不在我们重构的计划内。\n提取方法的重构目的，是用简明的方法调用来代替具体的代码块，提高原位置代码的可读性。如果将代码的方法调用看做是一个树状结构，提取方法就是在增加分支的深度。我们在读代码的时候，并不能看到下层方法的内容，所以将原本需要在上层直接读到的内容放在了很深的位置，反而会降低代码的可读性。\n\n## 方法内联 Inline Method\n\n重构的一个重要目的是用简洁明了的方法名来替代代码原本所在的位置，以提高可读性。但有时会发现一些方法的内容已经简洁的跟方法名不相上下，这时就可以考虑舍弃方法了。  \n\n比如下面代码，`moreThanFiveLateDeliveries`和`_numberOfLateDeliveries > 5`几乎没什么区别，也就没有必要留着方法了。\n\n```Java\nint getRating() {\n    return (moreThanFiveLateDeliveries()) ? 2 : 1;\n}\nboolean moreThanFiveLateDeliveries(){\n    return _numberOfLateDeliveries > 5;\n}\n```\n\n```Java\nint getRating() {\n    return (_numberOfLateDeliveries > 5)? 2 : 1;\n}\n```\n\n## 内联局部变量 \n如果有一个局部变量像下面的`basePrice`一样只做了一次很简单的赋值操作，又没有被多个位置引用，那就没必要留着它了。\n\n```Java\ndouble basePrice = anOrder.basePrice();\nreturn (basePrice > 1000)\n```\n\n```Java\nreturn (anOrder.basePrice() > 1000)\n```\n\n## 使用查找方法替代局部变量\n有时我们为了重复使用某一个表达式的结果，会将其保存在局部变量中，但是局部变量的访问有范围限制，想要使用该变量，就需要在同一个方法内，结果导致方法过长，过长的方法往往有着复杂的结构而又不好重构。如果使用查找方法来替代局部变量，便可以摆脱局部变量的范围限制，在类的各个地方都能使用表达式的结果，重构的时候也就少了很多顾虑。\n\n```Java\ndouble basePrice = _quantity * _itemPrice;\nif (basePrice > 1000)\n    return basePrice * 0.95;\nelse\n    return basePrice * 0.98;\n```\n将`basePrice`提取成为一个方法：\n```Java\nif (basePrice() > 1000)\n    return basePrice() * 0.95;\nelse\n    return basePrice() * 0.98;\n...\ndouble basePrice() {\n    return _quantity * _itemPrice;\n}\n```\n\n## 引入解释用变量\n\n比如下面代码\n```Java\nif ( (platform.toUpperCase().indexOf(\"MAC\") > -1)&&\n      (browser.toUpperCase().indexOf(\"IE\") > -1)&&\n       wasInitialized() && resize > 0 )\n {\n   // do something\n }\n```\n条件语句的表达式非常复杂，难以理解，可以引入解释变量，提高条件语句的可读性：\n```Java\nfinal boolean isMacOs     = platform.toUpperCase().indexOf(\"MAC\") > -1;\nfinal boolean isIEBrowser = browser.toUpperCase().indexOf(\"IE\")  > -1;\nfinal boolean wasResized  = resize > 0;\n\nif (isMacOs && isIEBrowser && wasInitialized() && wasResized) {\n    // do something\n}\n```\n\n不难发现，这个重构操作对条件语句的重构有很不错的效果，但是会引入新的局部变量。我们完全可以通过提取方法来简化表达式，所以作者也有提到：一般在无法提取方法时，才会想起来引入解释变量。\n有些方法由于使用了大量局部变量，使用提取方法来重构会很麻烦，这时引入解释变量可能有助于梳理算法结构，对进一步的重构有很大帮助。\n\n\n## 分割局部变量\n我们可以这样理解:局部变量在方法中的作用大致有两种，\n1. 一种是在循环的处理中，用来当做index或者flag。\n2. 另一种是用来保存值或参照，方便多次的使用，这种局部变量应该只能被赋值一次。\n如果一个局部变量承担了超出上述范围的责任，就该考虑分割它了。让一个局部变量承担多种责任，会降低代码的可读性，造成混乱。所以遇到这种情况，尽可能一个变量一个责任的进行分割。分割之后，再考虑其他的重构操作。比如：\n\n```Java\ndouble temp = 2 * (_height + _width);\nSystem.out.println (temp);\ntemp = _height * _width;\nSystem.out.println (temp);\n```\n\n`temp`两次每调用时，保存的内容不一样，所以应该分割为两个变量：\n\n```Java\nfinal double perimeter = 2 * (_height + _width);\nSystem.out.println (perimeter);\nfinal double area = _height * _width;\nSystem.out.println (area);\n```\n\n## 移除对参数的赋值操作\n**参数可以引用，修改，但不可以直接使用 `=` 赋值 **   \n```Java\nvoid aMethod(Object foo) {\nfoo.modifyInSomeWay();           // √ 这个可以\nfoo = anotherObject;             // × 这个不行\n```\n首先要弄懂赋值的概念，使用`=`的操作，其作用不是修改变量的值，而是改变了该变量名所参照的对象。在方法中改变参数的参照（进行赋值操作），我的理解是有两个问题：\n1. 如果想通过方法的调用来改变参数的参照对象，可以通过返回值来进行赋值，直接在方法中使用`=`，调用方法的地方看不到该赋值操作，会降低代码的可读性。\n2. 如果是**Pass By Value**的编程语言，改变参数的参照（Reference），并不会影响到函数外的原变量。这就造成了混乱。\n\n### Pass By Value && Pass By Reference\n复习一下值传递和引用传递\n* 值传递\n  * 方法的参数是变量值的拷贝，在方法内修改参数值不会影响方法外变量的值\n* 引用传递\n  * 方法的参数时变量的地址，在方法内修改参数会直接影响该内存地址的内容，方法外变量的值也会改变。\n\nJava是值传递的编程语言，对于基本数据类型的值传递很好理解，对于引用类型的参数，[java基本数据类型传递与引用传递区别](https://blog.csdn.net/javazejian/article/details/51192130) 这篇文章里有个图很有助于理解\n\n{% asset_img passByReference.PNG pbr %}\n方法的代码如下\n```Java\npackage com.zejian.test;\n/**\n * java中的按值调用\n * @author zejian\n */\npublic class CallByValue {\n\tprivate static User user=null;\n\tpublic static void updateUser(User student){\n\t\tstudent.setName(\"Lishen\");\n\t\tstudent.setAge(18);\n\t}\n\t\n\t\n\tpublic static void main(String[] args) {\n\t\tuser = new User(\"zhangsan\",26);\n\t\tSystem.out.println(\"调用前user的值：\"+user.toString());\n\t\tupdateUser(user);\n\t\tSystem.out.println(\"调用后user的值：\"+user.toString());\n\t}\n}\n```\n我们可以把引用类型的对象看作是一个值，引用类型的参数所传递的，是这个对象（图中的user），这就是引用类型的值传递。  \n通过`student`调用对象的方法是可以修改`user`内容的，但如果使用`=`来对`student`进行赋值，只是让`student`指向了一个新的对象，并不会影响到`user`。为了防止参数赋值造成混乱，Java其实可以将参数设置为`final`，只不过好像没怎么见谁用过...\n\n## 把方法换成对象\n如果一个方法中有太多的局部变量，以至于无法通过提取方法进行重构（可是不进行重构方法又太丑陋了），不妨把方法整体提取为一个独立的对象，局部变量变为该对象的属性后，就可以在对象内轻松地提取方法进行下一步的重构了。\n\n书中例子：\n```Java\nClass Account\n    int gamma (int inputVal, int quantity, int yearToDate) {\n        int importantValue1 = (inputVal * quantity) + delta();\n        int importantValue2 = (inputVal * yearToDate) + 100;\n        if ((yearToDate - importantValue1) > 100)\n            importantValue2 -= 20;\n        int importantValue3 = importantValue2 * 7;\n        // and so on.\n        return importantValue3 - 2 * importantValue1;\n    }\n```\n上面代码中，如果想要将计算返回值的部分提取出来，就需要将好多局部变量作为参数传递，非常复杂。我们可以使用对象来替代方法，首先写一个`Gamma`类：\n```Java\nclass Gamma...\n    private final Account _account;\n    private int inputVal;\n    private int quantity;\n    private int yearToDate;\n    private int importantValue1;\n    private int importantValue2;\n    private int importantValue3;\n```\n再为`Gamma`类添加一个构造体：\n```Java\nGamma (Account source, int inputValArg, int quantityArg, int yearToDateArg) {\n        _account = source; // 为了使用方法delta()\n        inputVal = inputValArg;\n        quantity = quantityArg;\n        yearToDate = yearToDateArg;\n    }\n```\n然后将原方法的处理内容转移到`Gamma`中，作为一个待重构的方法：\n```Java\nint compute () {\n        importantValue1 = (inputVal * quantity) + _account.delta();\n        importantValue2 = (inputVal * yearToDate) + 100;\n        if ((yearToDate - importantValue1) > 100)\n            importantValue2 -= 20;\n        int importantValue3 = importantValue2 * 7;\n        // and so on.\n        return importantValue3 - 2 * importantValue1;\n    }\n```\n这时，由于局部变量都已经变成了`Gamma`类的属性，我们提取方法时不需要再担心局部变量了：\n```Java\nint compute () {\n       importantValue1 = (inputVal * quantity) + _account.delta();\n       importantValue2 = (inputVal * yearToDate) + 100;\n       importantThing();\n       int importantValue3 = importantValue2 * 7;\n       // and so on.\n       return importantValue3 - 2 * importantValue1;\n   }\n\n   void importantThing() {\n       if ((yearToDate - importantValue1) > 100)\n            importantValue2 -= 20;\n   }\n```\n\n## 优化算法\n书中用的是**substitue algorithm**, 意思是用简明易懂的写法来替代旧算法，并没有追求提高算法效率或者降低消耗，我在理解的时候把这个重构操作也归类为**优化**  \n\n意思很简单：即使做的还是那些事儿，如果可以让你的算法看起来更容易理解，Just do it.","slug":"2019-04-24-refactoring-C6","published":true,"updated":"2025-01-31T15:39:12.841Z","_id":"cm6m2r3wq000rzg9d4v1p5wfx","comments":true,"layout":"post","photos":[],"html":"<p>代码重构做的最多的就是改善方法的结构。去掉方法中不需要的元素，修改不明确的名称，将复杂而冗长的方法改成精简而明确的小方法群组，是重构方法的主要思路。  </p>\n<p>方法重构用的最多的是【提取方法】，有种将一地零落的玩具分类整理装箱的感觉；而【方法内联】一般在方法提取的过于详细以至于产生了反作用，或者需要重新整理方法间关系时使用。  </p>\n<p>【提取方法】的最大问题，是如何处理局部变量，这就用到了对局部变量的重构技巧。  </p>\n<h2 id=\"提取方法-Extract-Method\"><a href=\"#提取方法-Extract-Method\" class=\"headerlink\" title=\"提取方法 Extract Method\"></a>提取方法 Extract Method</h2><p>如果发现方法内有一个代码块在很具体的做一件事儿，或者有一句漂亮的注释解释了接下来好几行的操作，那就试试把它提取成一个方法吧，然后取个足以说明其作用的方法名。比如：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">printOwing</span><span class=\"params\">(<span class=\"type\">double</span> amount)</span> &#123;</span><br><span class=\"line\">    printBanner();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//print details</span></span><br><span class=\"line\">    System.out.println (<span class=\"string\">&quot;name:&quot;</span> + _name);</span><br><span class=\"line\">    System.out.println (<span class=\"string\">&quot;amount&quot;</span> + amount);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重构后是这个样子：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">printOwing</span><span class=\"params\">(<span class=\"type\">double</span> amount)</span> &#123;</span><br><span class=\"line\">    printBanner();</span><br><span class=\"line\">    printDetails(amount);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">printDetails</span> <span class=\"params\">(<span class=\"type\">double</span> amount)</span> &#123;</span><br><span class=\"line\">    System.out.println (<span class=\"string\">&quot;name:&quot;</span> + _name);</span><br><span class=\"line\">    System.out.println (<span class=\"string\">&quot;amount&quot;</span> + amount);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>漂亮的代码往往方法都很简短，有着意思明确的方法名。方法越简洁，被重复利用的机会就越大；方法名如果足以传达信息，又可以省去不少的注释。<br>方法的简洁程度和方法名的好坏是联系在一起的，提取方法可以看做是用方法名来取代原位置的代码块，如果不能通过方法名理解原本代码块要执行的操作，重构也就失去了意义。<br>重构的时候不用刻意去思考方法或者方法名的长度，重构的关键在于方法名和代码块之间的语义距离（semantic distance)。</p>\n<h3 id=\"局部变量的处理\"><a href=\"#局部变量的处理\" class=\"headerlink\" title=\"局部变量的处理\"></a>局部变量的处理</h3><p>如果要提取的代码块使用了局部变量，提取方法的操作就要变得稍微复杂一些了。<br>首先我们需要观察一下局部变量定义、赋值以及被调用的位置，如果局部变量相关的代码可以移动位置，不妨先优化一下，因为优化前后，接下来的重构操作可能会有很大不同。</p>\n<ol>\n<li>如果局部变量足够“局部”，可以直接放到新方法内部，当然是最简单的情况。  </li>\n<li>如果局部变量的赋值是在新方法的处理范围外，新方法只是调用了变量值而没有进行修改，我们可以把局部变量当做参数传达给新的方法。  </li>\n<li>如果需要新方法的处理来给变量赋值，而变量值的使用又在新方法的范围外，则需要为新方法添加返回值，返回变量值。</li>\n</ol>\n<blockquote>\n<p>想返回多个变量值咋整嘞？这里涉及到了[单一返回值]的问题。编程语言普遍使用的是单一返回值的方法结构，这样可以保证代码的可读性，避免混乱。如果遇到了需要返回多个值的情况，不妨试着细化方法的划分，使用多个单一返回值的方法来实现。</p>\n</blockquote>\n<p>栗子，重构下面代码：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">printOwing</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Enumeration</span> <span class=\"variable\">e</span> <span class=\"operator\">=</span> _orders.elements();</span><br><span class=\"line\">    <span class=\"type\">double</span> <span class=\"variable\">outstanding</span> <span class=\"operator\">=</span> <span class=\"number\">0.0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    printBanner();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// calculate outstanding</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (e.hasMoreElements()) &#123;</span><br><span class=\"line\">        <span class=\"type\">Order</span> <span class=\"variable\">each</span> <span class=\"operator\">=</span> (Order) e.nextElement();</span><br><span class=\"line\">        outstanding += each.getAmount();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    printDetails(outstanding);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>书中直接进行了如下的重构:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">printOwing</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    printBanner();</span><br><span class=\"line\">    <span class=\"type\">double</span> <span class=\"variable\">outstanding</span> <span class=\"operator\">=</span> getOutstanding();</span><br><span class=\"line\">    printDetails(outstanding);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">double</span> <span class=\"title function_\">getOutstanding</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Enumeration</span> <span class=\"variable\">e</span> <span class=\"operator\">=</span> _orders.elements();</span><br><span class=\"line\">    <span class=\"type\">double</span> <span class=\"variable\">outstanding</span> <span class=\"operator\">=</span> <span class=\"number\">0.0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (e.hasMoreElements()) &#123;</span><br><span class=\"line\">        <span class=\"type\">Order</span> <span class=\"variable\">each</span> <span class=\"operator\">=</span> (Order) e.nextElement();</span><br><span class=\"line\">        outstanding += each.getAmount();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> outstanding;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>书中说将<code>outstanding</code>的计算提取成了一个独立的方法，而前面的局部变量因为只在计算中被使用到，所以一并提取了出来。这里有一个看似理所当然却值得做笔记的操作：作者并没有将<code>printBanner()</code>或者<code>printDetails()</code>放在新方法内。<br>如果将<code>pringDetails()</code>放到<code>getOutstanding()</code>里，不就不需要设返回值了？ 这是因为重构的对象是计算<code>outstanding</code>的代码块，如果将不相关的方法一并放到新方法内，就偏离了重构的目的。<br>假设将<code>printDetails()</code>放在了<code>getOutstanding()</code>内，再看<code>printOwing()</code>会发现，可以获取的信息变少了，<code>printDetails()</code>这个操作被隐藏在了<code>getOutStanding</code>里，而这并不在我们重构的计划内。<br>提取方法的重构目的，是用简明的方法调用来代替具体的代码块，提高原位置代码的可读性。如果将代码的方法调用看做是一个树状结构，提取方法就是在增加分支的深度。我们在读代码的时候，并不能看到下层方法的内容，所以将原本需要在上层直接读到的内容放在了很深的位置，反而会降低代码的可读性。</p>\n<h2 id=\"方法内联-Inline-Method\"><a href=\"#方法内联-Inline-Method\" class=\"headerlink\" title=\"方法内联 Inline Method\"></a>方法内联 Inline Method</h2><p>重构的一个重要目的是用简洁明了的方法名来替代代码原本所在的位置，以提高可读性。但有时会发现一些方法的内容已经简洁的跟方法名不相上下，这时就可以考虑舍弃方法了。  </p>\n<p>比如下面代码，<code>moreThanFiveLateDeliveries</code>和<code>_numberOfLateDeliveries &gt; 5</code>几乎没什么区别，也就没有必要留着方法了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getRating</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (moreThanFiveLateDeliveries()) ? <span class=\"number\">2</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">moreThanFiveLateDeliveries</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _numberOfLateDeliveries &gt; <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getRating</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (_numberOfLateDeliveries &gt; <span class=\"number\">5</span>)? <span class=\"number\">2</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"内联局部变量\"><a href=\"#内联局部变量\" class=\"headerlink\" title=\"内联局部变量\"></a>内联局部变量</h2><p>如果有一个局部变量像下面的<code>basePrice</code>一样只做了一次很简单的赋值操作，又没有被多个位置引用，那就没必要留着它了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">double</span> <span class=\"variable\">basePrice</span> <span class=\"operator\">=</span> anOrder.basePrice();</span><br><span class=\"line\"><span class=\"keyword\">return</span> (basePrice &gt; <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> (anOrder.basePrice() &gt; <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用查找方法替代局部变量\"><a href=\"#使用查找方法替代局部变量\" class=\"headerlink\" title=\"使用查找方法替代局部变量\"></a>使用查找方法替代局部变量</h2><p>有时我们为了重复使用某一个表达式的结果，会将其保存在局部变量中，但是局部变量的访问有范围限制，想要使用该变量，就需要在同一个方法内，结果导致方法过长，过长的方法往往有着复杂的结构而又不好重构。如果使用查找方法来替代局部变量，便可以摆脱局部变量的范围限制，在类的各个地方都能使用表达式的结果，重构的时候也就少了很多顾虑。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">double</span> <span class=\"variable\">basePrice</span> <span class=\"operator\">=</span> _quantity * _itemPrice;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (basePrice &gt; <span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> basePrice * <span class=\"number\">0.95</span>;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> basePrice * <span class=\"number\">0.98</span>;</span><br></pre></td></tr></table></figure>\n<p>将<code>basePrice</code>提取成为一个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (basePrice() &gt; <span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> basePrice() * <span class=\"number\">0.95</span>;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> basePrice() * <span class=\"number\">0.98</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"type\">double</span> <span class=\"title function_\">basePrice</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _quantity * _itemPrice;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"引入解释用变量\"><a href=\"#引入解释用变量\" class=\"headerlink\" title=\"引入解释用变量\"></a>引入解释用变量</h2><p>比如下面代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( (platform.toUpperCase().indexOf(<span class=\"string\">&quot;MAC&quot;</span>) &gt; -<span class=\"number\">1</span>)&amp;&amp;</span><br><span class=\"line\">      (browser.toUpperCase().indexOf(<span class=\"string\">&quot;IE&quot;</span>) &gt; -<span class=\"number\">1</span>)&amp;&amp;</span><br><span class=\"line\">       wasInitialized() &amp;&amp; resize &gt; <span class=\"number\">0</span> )</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// do something</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>条件语句的表达式非常复杂，难以理解，可以引入解释变量，提高条件语句的可读性：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"variable\">isMacOs</span>     <span class=\"operator\">=</span> platform.toUpperCase().indexOf(<span class=\"string\">&quot;MAC&quot;</span>) &gt; -<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"variable\">isIEBrowser</span> <span class=\"operator\">=</span> browser.toUpperCase().indexOf(<span class=\"string\">&quot;IE&quot;</span>)  &gt; -<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"variable\">wasResized</span>  <span class=\"operator\">=</span> resize &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (isMacOs &amp;&amp; isIEBrowser &amp;&amp; wasInitialized() &amp;&amp; wasResized) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不难发现，这个重构操作对条件语句的重构有很不错的效果，但是会引入新的局部变量。我们完全可以通过提取方法来简化表达式，所以作者也有提到：一般在无法提取方法时，才会想起来引入解释变量。<br>有些方法由于使用了大量局部变量，使用提取方法来重构会很麻烦，这时引入解释变量可能有助于梳理算法结构，对进一步的重构有很大帮助。</p>\n<h2 id=\"分割局部变量\"><a href=\"#分割局部变量\" class=\"headerlink\" title=\"分割局部变量\"></a>分割局部变量</h2><p>我们可以这样理解:局部变量在方法中的作用大致有两种，</p>\n<ol>\n<li>一种是在循环的处理中，用来当做index或者flag。</li>\n<li>另一种是用来保存值或参照，方便多次的使用，这种局部变量应该只能被赋值一次。<br>如果一个局部变量承担了超出上述范围的责任，就该考虑分割它了。让一个局部变量承担多种责任，会降低代码的可读性，造成混乱。所以遇到这种情况，尽可能一个变量一个责任的进行分割。分割之后，再考虑其他的重构操作。比如：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">double</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> <span class=\"number\">2</span> * (_height + _width);</span><br><span class=\"line\">System.out.println (temp);</span><br><span class=\"line\">temp = _height * _width;</span><br><span class=\"line\">System.out.println (temp);</span><br></pre></td></tr></table></figure>\n\n<p><code>temp</code>两次每调用时，保存的内容不一样，所以应该分割为两个变量：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">double</span> <span class=\"variable\">perimeter</span> <span class=\"operator\">=</span> <span class=\"number\">2</span> * (_height + _width);</span><br><span class=\"line\">System.out.println (perimeter);</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">double</span> <span class=\"variable\">area</span> <span class=\"operator\">=</span> _height * _width;</span><br><span class=\"line\">System.out.println (area);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"移除对参数的赋值操作\"><a href=\"#移除对参数的赋值操作\" class=\"headerlink\" title=\"移除对参数的赋值操作\"></a>移除对参数的赋值操作</h2><p>**参数可以引用，修改，但不可以直接使用 <code>=</code> 赋值 **   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">aMethod</span><span class=\"params\">(Object foo)</span> &#123;</span><br><span class=\"line\">foo.modifyInSomeWay();           <span class=\"comment\">// √ 这个可以</span></span><br><span class=\"line\">foo = anotherObject;             <span class=\"comment\">// × 这个不行</span></span><br></pre></td></tr></table></figure>\n<p>首先要弄懂赋值的概念，使用<code>=</code>的操作，其作用不是修改变量的值，而是改变了该变量名所参照的对象。在方法中改变参数的参照（进行赋值操作），我的理解是有两个问题：</p>\n<ol>\n<li>如果想通过方法的调用来改变参数的参照对象，可以通过返回值来进行赋值，直接在方法中使用<code>=</code>，调用方法的地方看不到该赋值操作，会降低代码的可读性。</li>\n<li>如果是<strong>Pass By Value</strong>的编程语言，改变参数的参照（Reference），并不会影响到函数外的原变量。这就造成了混乱。</li>\n</ol>\n<h3 id=\"Pass-By-Value-Pass-By-Reference\"><a href=\"#Pass-By-Value-Pass-By-Reference\" class=\"headerlink\" title=\"Pass By Value &amp;&amp; Pass By Reference\"></a>Pass By Value &amp;&amp; Pass By Reference</h3><p>复习一下值传递和引用传递</p>\n<ul>\n<li>值传递<ul>\n<li>方法的参数是变量值的拷贝，在方法内修改参数值不会影响方法外变量的值</li>\n</ul>\n</li>\n<li>引用传递<ul>\n<li>方法的参数时变量的地址，在方法内修改参数会直接影响该内存地址的内容，方法外变量的值也会改变。</li>\n</ul>\n</li>\n</ul>\n<p>Java是值传递的编程语言，对于基本数据类型的值传递很好理解，对于引用类型的参数，<a href=\"https://blog.csdn.net/javazejian/article/details/51192130\">java基本数据类型传递与引用传递区别</a> 这篇文章里有个图很有助于理解</p>\n\n<p>方法的代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zejian.test;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * java中的按值调用</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zejian</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CallByValue</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> User user=<span class=\"literal\">null</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateUser</span><span class=\"params\">(User student)</span>&#123;</span><br><span class=\"line\">\t\tstudent.setName(<span class=\"string\">&quot;Lishen&quot;</span>);</span><br><span class=\"line\">\t\tstudent.setAge(<span class=\"number\">18</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\tuser = <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;zhangsan&quot;</span>,<span class=\"number\">26</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;调用前user的值：&quot;</span>+user.toString());</span><br><span class=\"line\">\t\tupdateUser(user);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;调用后user的值：&quot;</span>+user.toString());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以把引用类型的对象看作是一个值，引用类型的参数所传递的，是这个对象（图中的user），这就是引用类型的值传递。<br>通过<code>student</code>调用对象的方法是可以修改<code>user</code>内容的，但如果使用<code>=</code>来对<code>student</code>进行赋值，只是让<code>student</code>指向了一个新的对象，并不会影响到<code>user</code>。为了防止参数赋值造成混乱，Java其实可以将参数设置为<code>final</code>，只不过好像没怎么见谁用过…</p>\n<h2 id=\"把方法换成对象\"><a href=\"#把方法换成对象\" class=\"headerlink\" title=\"把方法换成对象\"></a>把方法换成对象</h2><p>如果一个方法中有太多的局部变量，以至于无法通过提取方法进行重构（可是不进行重构方法又太丑陋了），不妨把方法整体提取为一个独立的对象，局部变量变为该对象的属性后，就可以在对象内轻松地提取方法进行下一步的重构了。</p>\n<p>书中例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class Account</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">gamma</span> <span class=\"params\">(<span class=\"type\">int</span> inputVal, <span class=\"type\">int</span> quantity, <span class=\"type\">int</span> yearToDate)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">importantValue1</span> <span class=\"operator\">=</span> (inputVal * quantity) + delta();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">importantValue2</span> <span class=\"operator\">=</span> (inputVal * yearToDate) + <span class=\"number\">100</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((yearToDate - importantValue1) &gt; <span class=\"number\">100</span>)</span><br><span class=\"line\">            importantValue2 -= <span class=\"number\">20</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">importantValue3</span> <span class=\"operator\">=</span> importantValue2 * <span class=\"number\">7</span>;</span><br><span class=\"line\">        <span class=\"comment\">// and so on.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> importantValue3 - <span class=\"number\">2</span> * importantValue1;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码中，如果想要将计算返回值的部分提取出来，就需要将好多局部变量作为参数传递，非常复杂。我们可以使用对象来替代方法，首先写一个<code>Gamma</code>类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Gamma</span>...</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Account _account;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> inputVal;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> quantity;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> yearToDate;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> importantValue1;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> importantValue2;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> importantValue3;</span><br></pre></td></tr></table></figure>\n<p>再为<code>Gamma</code>类添加一个构造体：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Gamma (Account source, <span class=\"type\">int</span> inputValArg, <span class=\"type\">int</span> quantityArg, <span class=\"type\">int</span> yearToDateArg) &#123;</span><br><span class=\"line\">        _account = source; <span class=\"comment\">// 为了使用方法delta()</span></span><br><span class=\"line\">        inputVal = inputValArg;</span><br><span class=\"line\">        quantity = quantityArg;</span><br><span class=\"line\">        yearToDate = yearToDateArg;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>然后将原方法的处理内容转移到<code>Gamma</code>中，作为一个待重构的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">compute</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        importantValue1 = (inputVal * quantity) + _account.delta();</span><br><span class=\"line\">        importantValue2 = (inputVal * yearToDate) + <span class=\"number\">100</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((yearToDate - importantValue1) &gt; <span class=\"number\">100</span>)</span><br><span class=\"line\">            importantValue2 -= <span class=\"number\">20</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">importantValue3</span> <span class=\"operator\">=</span> importantValue2 * <span class=\"number\">7</span>;</span><br><span class=\"line\">        <span class=\"comment\">// and so on.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> importantValue3 - <span class=\"number\">2</span> * importantValue1;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>这时，由于局部变量都已经变成了<code>Gamma</code>类的属性，我们提取方法时不需要再担心局部变量了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">compute</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\">       importantValue1 = (inputVal * quantity) + _account.delta();</span><br><span class=\"line\">       importantValue2 = (inputVal * yearToDate) + <span class=\"number\">100</span>;</span><br><span class=\"line\">       importantThing();</span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">importantValue3</span> <span class=\"operator\">=</span> importantValue2 * <span class=\"number\">7</span>;</span><br><span class=\"line\">       <span class=\"comment\">// and so on.</span></span><br><span class=\"line\">       <span class=\"keyword\">return</span> importantValue3 - <span class=\"number\">2</span> * importantValue1;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">void</span> <span class=\"title function_\">importantThing</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> ((yearToDate - importantValue1) &gt; <span class=\"number\">100</span>)</span><br><span class=\"line\">            importantValue2 -= <span class=\"number\">20</span>;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"优化算法\"><a href=\"#优化算法\" class=\"headerlink\" title=\"优化算法\"></a>优化算法</h2><p>书中用的是<strong>substitue algorithm</strong>, 意思是用简明易懂的写法来替代旧算法，并没有追求提高算法效率或者降低消耗，我在理解的时候把这个重构操作也归类为<strong>优化</strong>  </p>\n<p>意思很简单：即使做的还是那些事儿，如果可以让你的算法看起来更容易理解，Just do it.</p>\n","excerpt":"","more":"<p>代码重构做的最多的就是改善方法的结构。去掉方法中不需要的元素，修改不明确的名称，将复杂而冗长的方法改成精简而明确的小方法群组，是重构方法的主要思路。  </p>\n<p>方法重构用的最多的是【提取方法】，有种将一地零落的玩具分类整理装箱的感觉；而【方法内联】一般在方法提取的过于详细以至于产生了反作用，或者需要重新整理方法间关系时使用。  </p>\n<p>【提取方法】的最大问题，是如何处理局部变量，这就用到了对局部变量的重构技巧。  </p>\n<h2 id=\"提取方法-Extract-Method\"><a href=\"#提取方法-Extract-Method\" class=\"headerlink\" title=\"提取方法 Extract Method\"></a>提取方法 Extract Method</h2><p>如果发现方法内有一个代码块在很具体的做一件事儿，或者有一句漂亮的注释解释了接下来好几行的操作，那就试试把它提取成一个方法吧，然后取个足以说明其作用的方法名。比如：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">printOwing</span><span class=\"params\">(<span class=\"type\">double</span> amount)</span> &#123;</span><br><span class=\"line\">    printBanner();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//print details</span></span><br><span class=\"line\">    System.out.println (<span class=\"string\">&quot;name:&quot;</span> + _name);</span><br><span class=\"line\">    System.out.println (<span class=\"string\">&quot;amount&quot;</span> + amount);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重构后是这个样子：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">printOwing</span><span class=\"params\">(<span class=\"type\">double</span> amount)</span> &#123;</span><br><span class=\"line\">    printBanner();</span><br><span class=\"line\">    printDetails(amount);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">printDetails</span> <span class=\"params\">(<span class=\"type\">double</span> amount)</span> &#123;</span><br><span class=\"line\">    System.out.println (<span class=\"string\">&quot;name:&quot;</span> + _name);</span><br><span class=\"line\">    System.out.println (<span class=\"string\">&quot;amount&quot;</span> + amount);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>漂亮的代码往往方法都很简短，有着意思明确的方法名。方法越简洁，被重复利用的机会就越大；方法名如果足以传达信息，又可以省去不少的注释。<br>方法的简洁程度和方法名的好坏是联系在一起的，提取方法可以看做是用方法名来取代原位置的代码块，如果不能通过方法名理解原本代码块要执行的操作，重构也就失去了意义。<br>重构的时候不用刻意去思考方法或者方法名的长度，重构的关键在于方法名和代码块之间的语义距离（semantic distance)。</p>\n<h3 id=\"局部变量的处理\"><a href=\"#局部变量的处理\" class=\"headerlink\" title=\"局部变量的处理\"></a>局部变量的处理</h3><p>如果要提取的代码块使用了局部变量，提取方法的操作就要变得稍微复杂一些了。<br>首先我们需要观察一下局部变量定义、赋值以及被调用的位置，如果局部变量相关的代码可以移动位置，不妨先优化一下，因为优化前后，接下来的重构操作可能会有很大不同。</p>\n<ol>\n<li>如果局部变量足够“局部”，可以直接放到新方法内部，当然是最简单的情况。  </li>\n<li>如果局部变量的赋值是在新方法的处理范围外，新方法只是调用了变量值而没有进行修改，我们可以把局部变量当做参数传达给新的方法。  </li>\n<li>如果需要新方法的处理来给变量赋值，而变量值的使用又在新方法的范围外，则需要为新方法添加返回值，返回变量值。</li>\n</ol>\n<blockquote>\n<p>想返回多个变量值咋整嘞？这里涉及到了[单一返回值]的问题。编程语言普遍使用的是单一返回值的方法结构，这样可以保证代码的可读性，避免混乱。如果遇到了需要返回多个值的情况，不妨试着细化方法的划分，使用多个单一返回值的方法来实现。</p>\n</blockquote>\n<p>栗子，重构下面代码：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">printOwing</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Enumeration</span> <span class=\"variable\">e</span> <span class=\"operator\">=</span> _orders.elements();</span><br><span class=\"line\">    <span class=\"type\">double</span> <span class=\"variable\">outstanding</span> <span class=\"operator\">=</span> <span class=\"number\">0.0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    printBanner();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// calculate outstanding</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (e.hasMoreElements()) &#123;</span><br><span class=\"line\">        <span class=\"type\">Order</span> <span class=\"variable\">each</span> <span class=\"operator\">=</span> (Order) e.nextElement();</span><br><span class=\"line\">        outstanding += each.getAmount();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    printDetails(outstanding);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>书中直接进行了如下的重构:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">printOwing</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    printBanner();</span><br><span class=\"line\">    <span class=\"type\">double</span> <span class=\"variable\">outstanding</span> <span class=\"operator\">=</span> getOutstanding();</span><br><span class=\"line\">    printDetails(outstanding);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">double</span> <span class=\"title function_\">getOutstanding</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Enumeration</span> <span class=\"variable\">e</span> <span class=\"operator\">=</span> _orders.elements();</span><br><span class=\"line\">    <span class=\"type\">double</span> <span class=\"variable\">outstanding</span> <span class=\"operator\">=</span> <span class=\"number\">0.0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (e.hasMoreElements()) &#123;</span><br><span class=\"line\">        <span class=\"type\">Order</span> <span class=\"variable\">each</span> <span class=\"operator\">=</span> (Order) e.nextElement();</span><br><span class=\"line\">        outstanding += each.getAmount();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> outstanding;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>书中说将<code>outstanding</code>的计算提取成了一个独立的方法，而前面的局部变量因为只在计算中被使用到，所以一并提取了出来。这里有一个看似理所当然却值得做笔记的操作：作者并没有将<code>printBanner()</code>或者<code>printDetails()</code>放在新方法内。<br>如果将<code>pringDetails()</code>放到<code>getOutstanding()</code>里，不就不需要设返回值了？ 这是因为重构的对象是计算<code>outstanding</code>的代码块，如果将不相关的方法一并放到新方法内，就偏离了重构的目的。<br>假设将<code>printDetails()</code>放在了<code>getOutstanding()</code>内，再看<code>printOwing()</code>会发现，可以获取的信息变少了，<code>printDetails()</code>这个操作被隐藏在了<code>getOutStanding</code>里，而这并不在我们重构的计划内。<br>提取方法的重构目的，是用简明的方法调用来代替具体的代码块，提高原位置代码的可读性。如果将代码的方法调用看做是一个树状结构，提取方法就是在增加分支的深度。我们在读代码的时候，并不能看到下层方法的内容，所以将原本需要在上层直接读到的内容放在了很深的位置，反而会降低代码的可读性。</p>\n<h2 id=\"方法内联-Inline-Method\"><a href=\"#方法内联-Inline-Method\" class=\"headerlink\" title=\"方法内联 Inline Method\"></a>方法内联 Inline Method</h2><p>重构的一个重要目的是用简洁明了的方法名来替代代码原本所在的位置，以提高可读性。但有时会发现一些方法的内容已经简洁的跟方法名不相上下，这时就可以考虑舍弃方法了。  </p>\n<p>比如下面代码，<code>moreThanFiveLateDeliveries</code>和<code>_numberOfLateDeliveries &gt; 5</code>几乎没什么区别，也就没有必要留着方法了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getRating</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (moreThanFiveLateDeliveries()) ? <span class=\"number\">2</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">moreThanFiveLateDeliveries</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _numberOfLateDeliveries &gt; <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getRating</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (_numberOfLateDeliveries &gt; <span class=\"number\">5</span>)? <span class=\"number\">2</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"内联局部变量\"><a href=\"#内联局部变量\" class=\"headerlink\" title=\"内联局部变量\"></a>内联局部变量</h2><p>如果有一个局部变量像下面的<code>basePrice</code>一样只做了一次很简单的赋值操作，又没有被多个位置引用，那就没必要留着它了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">double</span> <span class=\"variable\">basePrice</span> <span class=\"operator\">=</span> anOrder.basePrice();</span><br><span class=\"line\"><span class=\"keyword\">return</span> (basePrice &gt; <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> (anOrder.basePrice() &gt; <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用查找方法替代局部变量\"><a href=\"#使用查找方法替代局部变量\" class=\"headerlink\" title=\"使用查找方法替代局部变量\"></a>使用查找方法替代局部变量</h2><p>有时我们为了重复使用某一个表达式的结果，会将其保存在局部变量中，但是局部变量的访问有范围限制，想要使用该变量，就需要在同一个方法内，结果导致方法过长，过长的方法往往有着复杂的结构而又不好重构。如果使用查找方法来替代局部变量，便可以摆脱局部变量的范围限制，在类的各个地方都能使用表达式的结果，重构的时候也就少了很多顾虑。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">double</span> <span class=\"variable\">basePrice</span> <span class=\"operator\">=</span> _quantity * _itemPrice;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (basePrice &gt; <span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> basePrice * <span class=\"number\">0.95</span>;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> basePrice * <span class=\"number\">0.98</span>;</span><br></pre></td></tr></table></figure>\n<p>将<code>basePrice</code>提取成为一个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (basePrice() &gt; <span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> basePrice() * <span class=\"number\">0.95</span>;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> basePrice() * <span class=\"number\">0.98</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"type\">double</span> <span class=\"title function_\">basePrice</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _quantity * _itemPrice;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"引入解释用变量\"><a href=\"#引入解释用变量\" class=\"headerlink\" title=\"引入解释用变量\"></a>引入解释用变量</h2><p>比如下面代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( (platform.toUpperCase().indexOf(<span class=\"string\">&quot;MAC&quot;</span>) &gt; -<span class=\"number\">1</span>)&amp;&amp;</span><br><span class=\"line\">      (browser.toUpperCase().indexOf(<span class=\"string\">&quot;IE&quot;</span>) &gt; -<span class=\"number\">1</span>)&amp;&amp;</span><br><span class=\"line\">       wasInitialized() &amp;&amp; resize &gt; <span class=\"number\">0</span> )</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// do something</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>条件语句的表达式非常复杂，难以理解，可以引入解释变量，提高条件语句的可读性：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"variable\">isMacOs</span>     <span class=\"operator\">=</span> platform.toUpperCase().indexOf(<span class=\"string\">&quot;MAC&quot;</span>) &gt; -<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"variable\">isIEBrowser</span> <span class=\"operator\">=</span> browser.toUpperCase().indexOf(<span class=\"string\">&quot;IE&quot;</span>)  &gt; -<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"variable\">wasResized</span>  <span class=\"operator\">=</span> resize &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (isMacOs &amp;&amp; isIEBrowser &amp;&amp; wasInitialized() &amp;&amp; wasResized) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不难发现，这个重构操作对条件语句的重构有很不错的效果，但是会引入新的局部变量。我们完全可以通过提取方法来简化表达式，所以作者也有提到：一般在无法提取方法时，才会想起来引入解释变量。<br>有些方法由于使用了大量局部变量，使用提取方法来重构会很麻烦，这时引入解释变量可能有助于梳理算法结构，对进一步的重构有很大帮助。</p>\n<h2 id=\"分割局部变量\"><a href=\"#分割局部变量\" class=\"headerlink\" title=\"分割局部变量\"></a>分割局部变量</h2><p>我们可以这样理解:局部变量在方法中的作用大致有两种，</p>\n<ol>\n<li>一种是在循环的处理中，用来当做index或者flag。</li>\n<li>另一种是用来保存值或参照，方便多次的使用，这种局部变量应该只能被赋值一次。<br>如果一个局部变量承担了超出上述范围的责任，就该考虑分割它了。让一个局部变量承担多种责任，会降低代码的可读性，造成混乱。所以遇到这种情况，尽可能一个变量一个责任的进行分割。分割之后，再考虑其他的重构操作。比如：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">double</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> <span class=\"number\">2</span> * (_height + _width);</span><br><span class=\"line\">System.out.println (temp);</span><br><span class=\"line\">temp = _height * _width;</span><br><span class=\"line\">System.out.println (temp);</span><br></pre></td></tr></table></figure>\n\n<p><code>temp</code>两次每调用时，保存的内容不一样，所以应该分割为两个变量：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">double</span> <span class=\"variable\">perimeter</span> <span class=\"operator\">=</span> <span class=\"number\">2</span> * (_height + _width);</span><br><span class=\"line\">System.out.println (perimeter);</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">double</span> <span class=\"variable\">area</span> <span class=\"operator\">=</span> _height * _width;</span><br><span class=\"line\">System.out.println (area);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"移除对参数的赋值操作\"><a href=\"#移除对参数的赋值操作\" class=\"headerlink\" title=\"移除对参数的赋值操作\"></a>移除对参数的赋值操作</h2><p>**参数可以引用，修改，但不可以直接使用 <code>=</code> 赋值 **   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">aMethod</span><span class=\"params\">(Object foo)</span> &#123;</span><br><span class=\"line\">foo.modifyInSomeWay();           <span class=\"comment\">// √ 这个可以</span></span><br><span class=\"line\">foo = anotherObject;             <span class=\"comment\">// × 这个不行</span></span><br></pre></td></tr></table></figure>\n<p>首先要弄懂赋值的概念，使用<code>=</code>的操作，其作用不是修改变量的值，而是改变了该变量名所参照的对象。在方法中改变参数的参照（进行赋值操作），我的理解是有两个问题：</p>\n<ol>\n<li>如果想通过方法的调用来改变参数的参照对象，可以通过返回值来进行赋值，直接在方法中使用<code>=</code>，调用方法的地方看不到该赋值操作，会降低代码的可读性。</li>\n<li>如果是<strong>Pass By Value</strong>的编程语言，改变参数的参照（Reference），并不会影响到函数外的原变量。这就造成了混乱。</li>\n</ol>\n<h3 id=\"Pass-By-Value-Pass-By-Reference\"><a href=\"#Pass-By-Value-Pass-By-Reference\" class=\"headerlink\" title=\"Pass By Value &amp;&amp; Pass By Reference\"></a>Pass By Value &amp;&amp; Pass By Reference</h3><p>复习一下值传递和引用传递</p>\n<ul>\n<li>值传递<ul>\n<li>方法的参数是变量值的拷贝，在方法内修改参数值不会影响方法外变量的值</li>\n</ul>\n</li>\n<li>引用传递<ul>\n<li>方法的参数时变量的地址，在方法内修改参数会直接影响该内存地址的内容，方法外变量的值也会改变。</li>\n</ul>\n</li>\n</ul>\n<p>Java是值传递的编程语言，对于基本数据类型的值传递很好理解，对于引用类型的参数，<a href=\"https://blog.csdn.net/javazejian/article/details/51192130\">java基本数据类型传递与引用传递区别</a> 这篇文章里有个图很有助于理解</p>\n\n<p>方法的代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zejian.test;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * java中的按值调用</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zejian</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CallByValue</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> User user=<span class=\"literal\">null</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateUser</span><span class=\"params\">(User student)</span>&#123;</span><br><span class=\"line\">\t\tstudent.setName(<span class=\"string\">&quot;Lishen&quot;</span>);</span><br><span class=\"line\">\t\tstudent.setAge(<span class=\"number\">18</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\tuser = <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;zhangsan&quot;</span>,<span class=\"number\">26</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;调用前user的值：&quot;</span>+user.toString());</span><br><span class=\"line\">\t\tupdateUser(user);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;调用后user的值：&quot;</span>+user.toString());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以把引用类型的对象看作是一个值，引用类型的参数所传递的，是这个对象（图中的user），这就是引用类型的值传递。<br>通过<code>student</code>调用对象的方法是可以修改<code>user</code>内容的，但如果使用<code>=</code>来对<code>student</code>进行赋值，只是让<code>student</code>指向了一个新的对象，并不会影响到<code>user</code>。为了防止参数赋值造成混乱，Java其实可以将参数设置为<code>final</code>，只不过好像没怎么见谁用过…</p>\n<h2 id=\"把方法换成对象\"><a href=\"#把方法换成对象\" class=\"headerlink\" title=\"把方法换成对象\"></a>把方法换成对象</h2><p>如果一个方法中有太多的局部变量，以至于无法通过提取方法进行重构（可是不进行重构方法又太丑陋了），不妨把方法整体提取为一个独立的对象，局部变量变为该对象的属性后，就可以在对象内轻松地提取方法进行下一步的重构了。</p>\n<p>书中例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class Account</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">gamma</span> <span class=\"params\">(<span class=\"type\">int</span> inputVal, <span class=\"type\">int</span> quantity, <span class=\"type\">int</span> yearToDate)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">importantValue1</span> <span class=\"operator\">=</span> (inputVal * quantity) + delta();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">importantValue2</span> <span class=\"operator\">=</span> (inputVal * yearToDate) + <span class=\"number\">100</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((yearToDate - importantValue1) &gt; <span class=\"number\">100</span>)</span><br><span class=\"line\">            importantValue2 -= <span class=\"number\">20</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">importantValue3</span> <span class=\"operator\">=</span> importantValue2 * <span class=\"number\">7</span>;</span><br><span class=\"line\">        <span class=\"comment\">// and so on.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> importantValue3 - <span class=\"number\">2</span> * importantValue1;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码中，如果想要将计算返回值的部分提取出来，就需要将好多局部变量作为参数传递，非常复杂。我们可以使用对象来替代方法，首先写一个<code>Gamma</code>类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Gamma</span>...</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Account _account;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> inputVal;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> quantity;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> yearToDate;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> importantValue1;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> importantValue2;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> importantValue3;</span><br></pre></td></tr></table></figure>\n<p>再为<code>Gamma</code>类添加一个构造体：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Gamma (Account source, <span class=\"type\">int</span> inputValArg, <span class=\"type\">int</span> quantityArg, <span class=\"type\">int</span> yearToDateArg) &#123;</span><br><span class=\"line\">        _account = source; <span class=\"comment\">// 为了使用方法delta()</span></span><br><span class=\"line\">        inputVal = inputValArg;</span><br><span class=\"line\">        quantity = quantityArg;</span><br><span class=\"line\">        yearToDate = yearToDateArg;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>然后将原方法的处理内容转移到<code>Gamma</code>中，作为一个待重构的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">compute</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        importantValue1 = (inputVal * quantity) + _account.delta();</span><br><span class=\"line\">        importantValue2 = (inputVal * yearToDate) + <span class=\"number\">100</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((yearToDate - importantValue1) &gt; <span class=\"number\">100</span>)</span><br><span class=\"line\">            importantValue2 -= <span class=\"number\">20</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">importantValue3</span> <span class=\"operator\">=</span> importantValue2 * <span class=\"number\">7</span>;</span><br><span class=\"line\">        <span class=\"comment\">// and so on.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> importantValue3 - <span class=\"number\">2</span> * importantValue1;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>这时，由于局部变量都已经变成了<code>Gamma</code>类的属性，我们提取方法时不需要再担心局部变量了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">compute</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\">       importantValue1 = (inputVal * quantity) + _account.delta();</span><br><span class=\"line\">       importantValue2 = (inputVal * yearToDate) + <span class=\"number\">100</span>;</span><br><span class=\"line\">       importantThing();</span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">importantValue3</span> <span class=\"operator\">=</span> importantValue2 * <span class=\"number\">7</span>;</span><br><span class=\"line\">       <span class=\"comment\">// and so on.</span></span><br><span class=\"line\">       <span class=\"keyword\">return</span> importantValue3 - <span class=\"number\">2</span> * importantValue1;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">void</span> <span class=\"title function_\">importantThing</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> ((yearToDate - importantValue1) &gt; <span class=\"number\">100</span>)</span><br><span class=\"line\">            importantValue2 -= <span class=\"number\">20</span>;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"优化算法\"><a href=\"#优化算法\" class=\"headerlink\" title=\"优化算法\"></a>优化算法</h2><p>书中用的是<strong>substitue algorithm</strong>, 意思是用简明易懂的写法来替代旧算法，并没有追求提高算法效率或者降低消耗，我在理解的时候把这个重构操作也归类为<strong>优化</strong>  </p>\n<p>意思很简单：即使做的还是那些事儿，如果可以让你的算法看起来更容易理解，Just do it.</p>\n","path":"2019/04/24/2019-04-24-refactoring-C6/","permalink":"https://xsun4231.github.io/2019/04/24/2019-04-24-refactoring-C6/","tags":[{"name":"Refactoring","_id":"cm6m2r3x1002dzg9d580t9bs9","slug":"Refactoring","path":"tags/Refactoring/","permalink":"https://xsun4231.github.io/tags/Refactoring/","length":2},{"name":"重构","_id":"cm6m2r3x1002gzg9d7l0shpgy","slug":"重构","path":"tags/重构/","permalink":"https://xsun4231.github.io/tags/%E9%87%8D%E6%9E%84/","length":2}],"categories":[],"prev":{"title":"区分 Authentication(AuthN) 和 Authorization(AuthZ)","date":"2019-07-09T02:48:48.000Z","slug":"2019-07-09-AuthN-vs-AuthZ","published":true,"updated":"2025-01-31T15:39:12.845Z","_id":"cm6m2r3wq000uzg9d1qul3ko2","layout":"post","photos":[],"excerpt":"","path":"2019/07/09/2019-07-09-AuthN-vs-AuthZ/","permalink":"https://xsun4231.github.io/2019/07/09/2019-07-09-AuthN-vs-AuthZ/","__post":true},"next":{"title":"代码重构 - 简化条件语句","date":"2019-04-22T05:22:37.000Z","slug":"2019-04-22-C9","published":true,"updated":"2025-01-31T15:39:12.841Z","_id":"cm6m2r3wp000pzg9d76lc6xsz","layout":"post","photos":[],"excerpt":"","path":"2019/04/22/2019-04-22-C9/","permalink":"https://xsun4231.github.io/2019/04/22/2019-04-22-C9/","__post":true},"__post":true}