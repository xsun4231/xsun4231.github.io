{"title":"python 中的字符串格式化","date":"2019-04-12T07:46:14.000Z","source":"_posts/2019-04-12-python-f-strings.md","raw":"---\ntitle: python 中的字符串格式化\ntags:\n  - Python \n  - F-string\ndate: 2019-04-12 16:46:14\n---\n\n> 原文： [python-f-string](https://realpython.com/python-f-strings/)\n\n自`3.6`版本开始，python引入了一种叫做`f-strings`的写法，使用改写发可以极大地增强字符串的可读性（当然好处不止这些).\n不过在学习`f-strings`之前，先看看以往的写法都有哪些。\n\n## 旧方法\n在`3.6`之前，我们常用的字符串格式化写法有两种：\n 1. 使用转移符 `%`\n 1. 使用字符串的格式化方法 `str.format()` \n\n### 旧选项1 `%`\n跟其他编程语言一样，python也可以用`%`来把变量值插入到字符串中的对应位置。写法如下：\n```python\nname = 'Tom'\nprint('Hello %s.' % name)\n# 输出结果: 'Hello Tom.'\n```\n输出多个变量时，在`%`后使用括号将所有变量放到一起：\n```python\nname1 = 'Tom'\nname2 = 'Jerry'\ntype1 = 'cat'\ntype2 = 'god'\nprint('Hello %s, you are a %s.this is %s, a %s' % (name1, type1, name2, type2))\n# 输出结果: 'Hello Tom, you are a cat. this is Jerry, a god'\n```\n但是转移符这种东西，一个不小心就容易写错。\n\n### 旧选项2 `str.format()`\n从`2.6`开始，python为字符串添加了一个`format()`方法，可以将引入的参数按顺序替换到字符串中的`{}`处。例如：\n```python\nname1 = 'Tom'\nname2 = 'Jerry'\ntype1 = 'cat'\ntype2 = 'god'\nprint('Hello {}, you are a {}.this is {}, a {}'.format(name1, type1, name2, type2))\n# 输出结果: 'Hello Tom, you are a cat. this is Jerry, a god'\n```\n\n使用`format()`你还可以自定义参数的插入顺序，例如：\n```python\nname1 = 'Tom'\nname2 = 'Jerry'\ntype1 = 'cat'\ntype2 = 'god'\nprint('Hello {0}, you are a {2}.this is {1}, a {3}'.format(name1, name2, type1, type2))\n# 输出结果: 'Hello Tom, you are a cat. this is Jerry, a god'\n```\n\n`format()`方法的功能还不止于此，既然`index`可以用来出入参数，那可不可以用参数名称呢？毕竟`0,1,2,3`的可读性有限。答案是可以：\n```python\nname1 = 'Tom'\nname2 = 'Jerry'\ntype1 = 'cat'\ntype2 = 'god'\nprint('Hello {name_a}, you are a {type_a}.this is {name_b}, a {type_b}'.format(name_a = name1, name_b = name2, type_a = type1, type_b = type2))\n# 输出结果: 'Hello Tom, you are a cat. this is Jerry, a god'\n```\n\n既然可以这样写了，那干脆直接引入`dict`得了.这个也是可以的：\n```python\ncharacter = {\n  'name' : 'Tom',\n  'type' : 'cat'\n}\nprint('Hello {name}, you are a {type}.'.format(**character))\n# 输出结果: 'Hello Tom, you are a cat.'\n```\n\n这样可读性就非常好了，不过在`3.6`版本，更好的写法出现了。\n\n## 新方法\n关于`f-string`的引入，可以参看[PEP498](https://www.python.org/dev/peps/pep-0498/), 或者[Python-doc](https://docs.python.org/3/reference/lexical_analysis.html#f-strings).  \n\n\n写法非常简单，在字符串前加`f`或者`F`，在字符串中直接插入`{变量名}`，就可以了：\n```python\nname = 'Tom'\ntype = 'cat'\nprint(f'Hello {name}, you are a {type}.')\n# 输出结果: 'Hello Tom, you are a cat.'\n```\n\n在`{}`中不仅可以使用字符串，还可以使用运算公式，甚至调用方法：\n\n```python\ndef change_name(input):\n    return 'Jerry'\nname = 'Tom'\nprint(f\"Hello {change_name(name)}.\")\n# 输出结果: 'Hello Jerry.'\n```\n\n> 当使用`object`时，f-string会默认调用`__str__()`方法，如果想调用`__repr__`，需要在对象名后面加`!r`：\n ```Python\n f\"{object}\"\n # 输出 object.__str__()的内容\n f\"{object!r}\"\n # 输出 object.__repr__()的内容\n ```\n\n最后一个考点：换行。在python中可以使用`'''`来输出带有换行的字符串，不过直接在前面加上f的结果并不怎么好看：\n```python\nmessage = f'''\nHi,\nyou are a \nCat\n'''\n# message : '\\nHi, \\nyou are a \\nCat\\n'\n```\n\n`f-string`的换行方法是，在每行的最后添加`\\`\n```python\nmessage = f''\\\nf'Hi '\\\nf'you are a '\\\nf'Cat '\n# message ： 'Hi you are a Cat'\n```\n\n**注意** 一般情况下`f-string`使用单引号和双引号没有区别，但比如引用字典，需要单引号来标记key时，f-stirng就需要使用双引号了，否则字符串中的单引号会被错误理解。","slug":"2019-04-12-python-f-strings","published":true,"updated":"2025-01-31T15:39:12.839Z","_id":"cm6m2r3wo000izg9d7mib71fi","comments":true,"layout":"post","photos":[],"html":"<blockquote>\n<p>原文： <a href=\"https://realpython.com/python-f-strings/\">python-f-string</a></p>\n</blockquote>\n<p>自<code>3.6</code>版本开始，python引入了一种叫做<code>f-strings</code>的写法，使用改写发可以极大地增强字符串的可读性（当然好处不止这些).<br>不过在学习<code>f-strings</code>之前，先看看以往的写法都有哪些。</p>\n<h2 id=\"旧方法\"><a href=\"#旧方法\" class=\"headerlink\" title=\"旧方法\"></a>旧方法</h2><p>在<code>3.6</code>之前，我们常用的字符串格式化写法有两种：</p>\n<ol>\n<li>使用转移符 <code>%</code></li>\n<li>使用字符串的格式化方法 <code>str.format()</code></li>\n</ol>\n<h3 id=\"旧选项1\"><a href=\"#旧选项1\" class=\"headerlink\" title=\"旧选项1 %\"></a>旧选项1 <code>%</code></h3><p>跟其他编程语言一样，python也可以用<code>%</code>来把变量值插入到字符串中的对应位置。写法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">&#x27;Tom&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Hello %s.&#x27;</span> % name)</span><br><span class=\"line\"><span class=\"comment\"># 输出结果: &#x27;Hello Tom.&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>输出多个变量时，在<code>%</code>后使用括号将所有变量放到一起：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name1 = <span class=\"string\">&#x27;Tom&#x27;</span></span><br><span class=\"line\">name2 = <span class=\"string\">&#x27;Jerry&#x27;</span></span><br><span class=\"line\">type1 = <span class=\"string\">&#x27;cat&#x27;</span></span><br><span class=\"line\">type2 = <span class=\"string\">&#x27;god&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Hello %s, you are a %s.this is %s, a %s&#x27;</span> % (name1, type1, name2, type2))</span><br><span class=\"line\"><span class=\"comment\"># 输出结果: &#x27;Hello Tom, you are a cat. this is Jerry, a god&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>但是转移符这种东西，一个不小心就容易写错。</p>\n<h3 id=\"旧选项2-str-format\"><a href=\"#旧选项2-str-format\" class=\"headerlink\" title=\"旧选项2 str.format()\"></a>旧选项2 <code>str.format()</code></h3><p>从<code>2.6</code>开始，python为字符串添加了一个<code>format()</code>方法，可以将引入的参数按顺序替换到字符串中的<code>&#123;&#125;</code>处。例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name1 = <span class=\"string\">&#x27;Tom&#x27;</span></span><br><span class=\"line\">name2 = <span class=\"string\">&#x27;Jerry&#x27;</span></span><br><span class=\"line\">type1 = <span class=\"string\">&#x27;cat&#x27;</span></span><br><span class=\"line\">type2 = <span class=\"string\">&#x27;god&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Hello &#123;&#125;, you are a &#123;&#125;.this is &#123;&#125;, a &#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(name1, type1, name2, type2))</span><br><span class=\"line\"><span class=\"comment\"># 输出结果: &#x27;Hello Tom, you are a cat. this is Jerry, a god&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用<code>format()</code>你还可以自定义参数的插入顺序，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name1 = <span class=\"string\">&#x27;Tom&#x27;</span></span><br><span class=\"line\">name2 = <span class=\"string\">&#x27;Jerry&#x27;</span></span><br><span class=\"line\">type1 = <span class=\"string\">&#x27;cat&#x27;</span></span><br><span class=\"line\">type2 = <span class=\"string\">&#x27;god&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Hello &#123;0&#125;, you are a &#123;2&#125;.this is &#123;1&#125;, a &#123;3&#125;&#x27;</span>.<span class=\"built_in\">format</span>(name1, name2, type1, type2))</span><br><span class=\"line\"><span class=\"comment\"># 输出结果: &#x27;Hello Tom, you are a cat. this is Jerry, a god&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>format()</code>方法的功能还不止于此，既然<code>index</code>可以用来出入参数，那可不可以用参数名称呢？毕竟<code>0,1,2,3</code>的可读性有限。答案是可以：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name1 = <span class=\"string\">&#x27;Tom&#x27;</span></span><br><span class=\"line\">name2 = <span class=\"string\">&#x27;Jerry&#x27;</span></span><br><span class=\"line\">type1 = <span class=\"string\">&#x27;cat&#x27;</span></span><br><span class=\"line\">type2 = <span class=\"string\">&#x27;god&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Hello &#123;name_a&#125;, you are a &#123;type_a&#125;.this is &#123;name_b&#125;, a &#123;type_b&#125;&#x27;</span>.<span class=\"built_in\">format</span>(name_a = name1, name_b = name2, type_a = type1, type_b = type2))</span><br><span class=\"line\"><span class=\"comment\"># 输出结果: &#x27;Hello Tom, you are a cat. this is Jerry, a god&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>既然可以这样写了，那干脆直接引入<code>dict</code>得了.这个也是可以的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">character = &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;name&#x27;</span> : <span class=\"string\">&#x27;Tom&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;type&#x27;</span> : <span class=\"string\">&#x27;cat&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Hello &#123;name&#125;, you are a &#123;type&#125;.&#x27;</span>.<span class=\"built_in\">format</span>(**character))</span><br><span class=\"line\"><span class=\"comment\"># 输出结果: &#x27;Hello Tom, you are a cat.&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>这样可读性就非常好了，不过在<code>3.6</code>版本，更好的写法出现了。</p>\n<h2 id=\"新方法\"><a href=\"#新方法\" class=\"headerlink\" title=\"新方法\"></a>新方法</h2><p>关于<code>f-string</code>的引入，可以参看<a href=\"https://www.python.org/dev/peps/pep-0498/\">PEP498</a>, 或者<a href=\"https://docs.python.org/3/reference/lexical_analysis.html#f-strings\">Python-doc</a>.  </p>\n<p>写法非常简单，在字符串前加<code>f</code>或者<code>F</code>，在字符串中直接插入<code>&#123;变量名&#125;</code>，就可以了：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">&#x27;Tom&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">type</span> = <span class=\"string\">&#x27;cat&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Hello <span class=\"subst\">&#123;name&#125;</span>, you are a <span class=\"subst\">&#123;<span class=\"built_in\">type</span>&#125;</span>.&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 输出结果: &#x27;Hello Tom, you are a cat.&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>在<code>&#123;&#125;</code>中不仅可以使用字符串，还可以使用运算公式，甚至调用方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">change_name</span>(<span class=\"params\"><span class=\"built_in\">input</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Jerry&#x27;</span></span><br><span class=\"line\">name = <span class=\"string\">&#x27;Tom&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Hello <span class=\"subst\">&#123;change_name(name)&#125;</span>.&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 输出结果: &#x27;Hello Jerry.&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>当使用<code>object</code>时，f-string会默认调用<code>__str__()</code>方法，如果想调用<code>__repr__</code>，需要在对象名后面加<code>!r</code>：</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">f&quot;<span class=\"subst\">&#123;<span class=\"built_in\">object</span>&#125;</span>&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 输出 object.__str__()的内容</span></span><br><span class=\"line\"><span class=\"string\">f&quot;<span class=\"subst\">&#123;<span class=\"built_in\">object</span>!r&#125;</span>&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 输出 object.__repr__()的内容</span></span><br></pre></td></tr></table></figure></blockquote>\n<p>最后一个考点：换行。在python中可以使用<code>&#39;&#39;&#39;</code>来输出带有换行的字符串，不过直接在前面加上f的结果并不怎么好看：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message = <span class=\"string\">f&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">Hi,</span></span><br><span class=\"line\"><span class=\"string\">you are a </span></span><br><span class=\"line\"><span class=\"string\">Cat</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># message : &#x27;\\nHi, \\nyou are a \\nCat\\n&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>f-string</code>的换行方法是，在每行的最后添加<code>\\</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message = <span class=\"string\">f&#x27;&#x27;</span>\\</span><br><span class=\"line\"><span class=\"string\">f&#x27;Hi &#x27;</span>\\</span><br><span class=\"line\"><span class=\"string\">f&#x27;you are a &#x27;</span>\\</span><br><span class=\"line\"><span class=\"string\">f&#x27;Cat &#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># message ： &#x27;Hi you are a Cat&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong> 一般情况下<code>f-string</code>使用单引号和双引号没有区别，但比如引用字典，需要单引号来标记key时，f-stirng就需要使用双引号了，否则字符串中的单引号会被错误理解。</p>\n","excerpt":"","more":"<blockquote>\n<p>原文： <a href=\"https://realpython.com/python-f-strings/\">python-f-string</a></p>\n</blockquote>\n<p>自<code>3.6</code>版本开始，python引入了一种叫做<code>f-strings</code>的写法，使用改写发可以极大地增强字符串的可读性（当然好处不止这些).<br>不过在学习<code>f-strings</code>之前，先看看以往的写法都有哪些。</p>\n<h2 id=\"旧方法\"><a href=\"#旧方法\" class=\"headerlink\" title=\"旧方法\"></a>旧方法</h2><p>在<code>3.6</code>之前，我们常用的字符串格式化写法有两种：</p>\n<ol>\n<li>使用转移符 <code>%</code></li>\n<li>使用字符串的格式化方法 <code>str.format()</code></li>\n</ol>\n<h3 id=\"旧选项1\"><a href=\"#旧选项1\" class=\"headerlink\" title=\"旧选项1 %\"></a>旧选项1 <code>%</code></h3><p>跟其他编程语言一样，python也可以用<code>%</code>来把变量值插入到字符串中的对应位置。写法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">&#x27;Tom&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Hello %s.&#x27;</span> % name)</span><br><span class=\"line\"><span class=\"comment\"># 输出结果: &#x27;Hello Tom.&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>输出多个变量时，在<code>%</code>后使用括号将所有变量放到一起：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name1 = <span class=\"string\">&#x27;Tom&#x27;</span></span><br><span class=\"line\">name2 = <span class=\"string\">&#x27;Jerry&#x27;</span></span><br><span class=\"line\">type1 = <span class=\"string\">&#x27;cat&#x27;</span></span><br><span class=\"line\">type2 = <span class=\"string\">&#x27;god&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Hello %s, you are a %s.this is %s, a %s&#x27;</span> % (name1, type1, name2, type2))</span><br><span class=\"line\"><span class=\"comment\"># 输出结果: &#x27;Hello Tom, you are a cat. this is Jerry, a god&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>但是转移符这种东西，一个不小心就容易写错。</p>\n<h3 id=\"旧选项2-str-format\"><a href=\"#旧选项2-str-format\" class=\"headerlink\" title=\"旧选项2 str.format()\"></a>旧选项2 <code>str.format()</code></h3><p>从<code>2.6</code>开始，python为字符串添加了一个<code>format()</code>方法，可以将引入的参数按顺序替换到字符串中的<code>&#123;&#125;</code>处。例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name1 = <span class=\"string\">&#x27;Tom&#x27;</span></span><br><span class=\"line\">name2 = <span class=\"string\">&#x27;Jerry&#x27;</span></span><br><span class=\"line\">type1 = <span class=\"string\">&#x27;cat&#x27;</span></span><br><span class=\"line\">type2 = <span class=\"string\">&#x27;god&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Hello &#123;&#125;, you are a &#123;&#125;.this is &#123;&#125;, a &#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(name1, type1, name2, type2))</span><br><span class=\"line\"><span class=\"comment\"># 输出结果: &#x27;Hello Tom, you are a cat. this is Jerry, a god&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用<code>format()</code>你还可以自定义参数的插入顺序，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name1 = <span class=\"string\">&#x27;Tom&#x27;</span></span><br><span class=\"line\">name2 = <span class=\"string\">&#x27;Jerry&#x27;</span></span><br><span class=\"line\">type1 = <span class=\"string\">&#x27;cat&#x27;</span></span><br><span class=\"line\">type2 = <span class=\"string\">&#x27;god&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Hello &#123;0&#125;, you are a &#123;2&#125;.this is &#123;1&#125;, a &#123;3&#125;&#x27;</span>.<span class=\"built_in\">format</span>(name1, name2, type1, type2))</span><br><span class=\"line\"><span class=\"comment\"># 输出结果: &#x27;Hello Tom, you are a cat. this is Jerry, a god&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>format()</code>方法的功能还不止于此，既然<code>index</code>可以用来出入参数，那可不可以用参数名称呢？毕竟<code>0,1,2,3</code>的可读性有限。答案是可以：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name1 = <span class=\"string\">&#x27;Tom&#x27;</span></span><br><span class=\"line\">name2 = <span class=\"string\">&#x27;Jerry&#x27;</span></span><br><span class=\"line\">type1 = <span class=\"string\">&#x27;cat&#x27;</span></span><br><span class=\"line\">type2 = <span class=\"string\">&#x27;god&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Hello &#123;name_a&#125;, you are a &#123;type_a&#125;.this is &#123;name_b&#125;, a &#123;type_b&#125;&#x27;</span>.<span class=\"built_in\">format</span>(name_a = name1, name_b = name2, type_a = type1, type_b = type2))</span><br><span class=\"line\"><span class=\"comment\"># 输出结果: &#x27;Hello Tom, you are a cat. this is Jerry, a god&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>既然可以这样写了，那干脆直接引入<code>dict</code>得了.这个也是可以的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">character = &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;name&#x27;</span> : <span class=\"string\">&#x27;Tom&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;type&#x27;</span> : <span class=\"string\">&#x27;cat&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Hello &#123;name&#125;, you are a &#123;type&#125;.&#x27;</span>.<span class=\"built_in\">format</span>(**character))</span><br><span class=\"line\"><span class=\"comment\"># 输出结果: &#x27;Hello Tom, you are a cat.&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>这样可读性就非常好了，不过在<code>3.6</code>版本，更好的写法出现了。</p>\n<h2 id=\"新方法\"><a href=\"#新方法\" class=\"headerlink\" title=\"新方法\"></a>新方法</h2><p>关于<code>f-string</code>的引入，可以参看<a href=\"https://www.python.org/dev/peps/pep-0498/\">PEP498</a>, 或者<a href=\"https://docs.python.org/3/reference/lexical_analysis.html#f-strings\">Python-doc</a>.  </p>\n<p>写法非常简单，在字符串前加<code>f</code>或者<code>F</code>，在字符串中直接插入<code>&#123;变量名&#125;</code>，就可以了：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">&#x27;Tom&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">type</span> = <span class=\"string\">&#x27;cat&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Hello <span class=\"subst\">&#123;name&#125;</span>, you are a <span class=\"subst\">&#123;<span class=\"built_in\">type</span>&#125;</span>.&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 输出结果: &#x27;Hello Tom, you are a cat.&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>在<code>&#123;&#125;</code>中不仅可以使用字符串，还可以使用运算公式，甚至调用方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">change_name</span>(<span class=\"params\"><span class=\"built_in\">input</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Jerry&#x27;</span></span><br><span class=\"line\">name = <span class=\"string\">&#x27;Tom&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Hello <span class=\"subst\">&#123;change_name(name)&#125;</span>.&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 输出结果: &#x27;Hello Jerry.&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>当使用<code>object</code>时，f-string会默认调用<code>__str__()</code>方法，如果想调用<code>__repr__</code>，需要在对象名后面加<code>!r</code>：</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">f&quot;<span class=\"subst\">&#123;<span class=\"built_in\">object</span>&#125;</span>&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 输出 object.__str__()的内容</span></span><br><span class=\"line\"><span class=\"string\">f&quot;<span class=\"subst\">&#123;<span class=\"built_in\">object</span>!r&#125;</span>&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 输出 object.__repr__()的内容</span></span><br></pre></td></tr></table></figure></blockquote>\n<p>最后一个考点：换行。在python中可以使用<code>&#39;&#39;&#39;</code>来输出带有换行的字符串，不过直接在前面加上f的结果并不怎么好看：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message = <span class=\"string\">f&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">Hi,</span></span><br><span class=\"line\"><span class=\"string\">you are a </span></span><br><span class=\"line\"><span class=\"string\">Cat</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># message : &#x27;\\nHi, \\nyou are a \\nCat\\n&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>f-string</code>的换行方法是，在每行的最后添加<code>\\</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message = <span class=\"string\">f&#x27;&#x27;</span>\\</span><br><span class=\"line\"><span class=\"string\">f&#x27;Hi &#x27;</span>\\</span><br><span class=\"line\"><span class=\"string\">f&#x27;you are a &#x27;</span>\\</span><br><span class=\"line\"><span class=\"string\">f&#x27;Cat &#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># message ： &#x27;Hi you are a Cat&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong> 一般情况下<code>f-string</code>使用单引号和双引号没有区别，但比如引用字典，需要单引号来标记key时，f-stirng就需要使用双引号了，否则字符串中的单引号会被错误理解。</p>\n","path":"2019/04/12/2019-04-12-python-f-strings/","permalink":"https://xsun4231.github.io/2019/04/12/2019-04-12-python-f-strings/","tags":[{"name":"Python","_id":"cm6m2r3wx001qzg9d4jbjg7nc","slug":"Python","path":"tags/Python/","permalink":"https://xsun4231.github.io/tags/Python/","length":4},{"name":"F-string","_id":"cm6m2r3wy001vzg9d9fbt6jbk","slug":"F-string","path":"tags/F-string/","permalink":"https://xsun4231.github.io/tags/F-string/","length":1}],"categories":[],"prev":{"title":"通过命令行从本地推送代码到GitHub","date":"2019-04-15T06:46:33.000Z","slug":"2019-04-15-git-connect","published":true,"updated":"2025-01-31T15:39:12.839Z","_id":"cm6m2r3wp000nzg9dd2vx7ibu","layout":"post","photos":[],"excerpt":"","path":"2019/04/15/2019-04-15-git-connect/","permalink":"https://xsun4231.github.io/2019/04/15/2019-04-15-git-connect/","__post":true},"next":{"title":"Hexo 说明文档笔记","date":"2019-04-05T04:28:49.000Z","slug":"2019-04-05-Hexo","published":true,"updated":"2025-01-31T15:39:12.839Z","_id":"cm6m2r3wo000kzg9de91ld6ih","layout":"post","photos":[],"excerpt":"","path":"2019/04/05/2019-04-05-Hexo/","permalink":"https://xsun4231.github.io/2019/04/05/2019-04-05-Hexo/","__post":true},"__post":true}