{"title":"Log4j 节能写法","date":"2019-11-14T08:06:39.000Z","source":"_posts/2019-11-14-log4j-using-lambda.md","raw":"---\ntitle: Log4j 节能写法\ntags:\n  - Lambda\ndate: 2019-11-14 17:06:39\n---\n\n## 尽量使用Supplier<> 来生成log\n\n比如debug，我们可以使用下面三种方法\n```Java\n    /**\n     * Logs a message object with the {@link Level#DEBUG DEBUG} level.\n     *\n     * @param message the message string to log.\n     */\n    void debug(String message);\n\n    /**\n     * Logs a message with parameters at the {@link Level#DEBUG DEBUG} level.\n     *\n     * @param message the message to log; the format depends on the message factory.\n     * @param params parameters to the message.\n     * @see #getMessageFactory()\n     */\n    void debug(String message, Object... params);\n\n    /**\n     * Logs a message with parameters which are only to be constructed if the logging level is the {@link Level#DEBUG\n     * DEBUG} level.\n     *\n     * @param message the message to log; the format depends on the message factory.\n     * @param paramSuppliers An array of functions, which when called, produce the desired log message parameters.\n     * @since 2.4\n     */\n    void debug(String message, Supplier<?>... paramSuppliers);\n\n```\n\n### 第一种：直接输出信息。\n最不环保的写法，甚至新手的话可能会出现`logger.debug(\"A is \" + a + \", B is\" + b + \".\");`这种写法，首先使用`+`来生成log文本是非常耗时的，其次，无论log输出的级别是否低于debug，这段字符串的处理都会被执行。\n\n### 第二种：使用MessageFactory和参数生成log\nOpenJDK 8之前这么写是没问题的，使用MessageFactory来生成log既增加了可读性，又比字符串连接要节能。不过问题是log的生成还是总需要被执行。\n\n### 第三种：使用Lambda\ndoc中写了:`only to be constructed if the logging level is the DEBUG level.`，还需要解释吗？\n\n### 那么，当需要把objectA写到debug里时\n```Java\nlogger.debug(objectA.toString()); // 一般写法\n\nlogger.debug(() -> objectA.toString()); // 略动脑筋的写法\n\nlogger.debug(objectA::toString); //文艺写法\n```\n","slug":"2019-11-14-log4j-using-lambda","published":true,"updated":"2025-01-31T15:39:12.949Z","_id":"cm6m2r3ws0014zg9d0vs0a2vv","comments":true,"layout":"post","photos":[],"html":"<h2 id=\"尽量使用Supplier-来生成log\"><a href=\"#尽量使用Supplier-来生成log\" class=\"headerlink\" title=\"尽量使用Supplier&lt;&gt; 来生成log\"></a>尽量使用Supplier&lt;&gt; 来生成log</h2><p>比如debug，我们可以使用下面三种方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Logs a message object with the &#123;<span class=\"doctag\">@link</span> Level#DEBUG DEBUG&#125; level.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> message the message string to log.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">debug</span><span class=\"params\">(String message)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Logs a message with parameters at the &#123;<span class=\"doctag\">@link</span> Level#DEBUG DEBUG&#125; level.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> message the message to log; the format depends on the message factory.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> params parameters to the message.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #getMessageFactory()</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">debug</span><span class=\"params\">(String message, Object... params)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Logs a message with parameters which are only to be constructed if the logging level is the &#123;<span class=\"doctag\">@link</span> Level#DEBUG</span></span><br><span class=\"line\"><span class=\"comment\"> * DEBUG&#125; level.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> message the message to log; the format depends on the message factory.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> paramSuppliers An array of functions, which when called, produce the desired log message parameters.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2.4</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">debug</span><span class=\"params\">(String message, Supplier&lt;?&gt;... paramSuppliers)</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第一种：直接输出信息。\"><a href=\"#第一种：直接输出信息。\" class=\"headerlink\" title=\"第一种：直接输出信息。\"></a>第一种：直接输出信息。</h3><p>最不环保的写法，甚至新手的话可能会出现<code>logger.debug(&quot;A is &quot; + a + &quot;, B is&quot; + b + &quot;.&quot;);</code>这种写法，首先使用<code>+</code>来生成log文本是非常耗时的，其次，无论log输出的级别是否低于debug，这段字符串的处理都会被执行。</p>\n<h3 id=\"第二种：使用MessageFactory和参数生成log\"><a href=\"#第二种：使用MessageFactory和参数生成log\" class=\"headerlink\" title=\"第二种：使用MessageFactory和参数生成log\"></a>第二种：使用MessageFactory和参数生成log</h3><p>OpenJDK 8之前这么写是没问题的，使用MessageFactory来生成log既增加了可读性，又比字符串连接要节能。不过问题是log的生成还是总需要被执行。</p>\n<h3 id=\"第三种：使用Lambda\"><a href=\"#第三种：使用Lambda\" class=\"headerlink\" title=\"第三种：使用Lambda\"></a>第三种：使用Lambda</h3><p>doc中写了:<code>only to be constructed if the logging level is the DEBUG level.</code>，还需要解释吗？</p>\n<h3 id=\"那么，当需要把objectA写到debug里时\"><a href=\"#那么，当需要把objectA写到debug里时\" class=\"headerlink\" title=\"那么，当需要把objectA写到debug里时\"></a>那么，当需要把objectA写到debug里时</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logger.debug(objectA.toString()); <span class=\"comment\">// 一般写法</span></span><br><span class=\"line\"></span><br><span class=\"line\">logger.debug(() -&gt; objectA.toString()); <span class=\"comment\">// 略动脑筋的写法</span></span><br><span class=\"line\"></span><br><span class=\"line\">logger.debug(objectA::toString); <span class=\"comment\">//文艺写法</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"尽量使用Supplier-来生成log\"><a href=\"#尽量使用Supplier-来生成log\" class=\"headerlink\" title=\"尽量使用Supplier&lt;&gt; 来生成log\"></a>尽量使用Supplier&lt;&gt; 来生成log</h2><p>比如debug，我们可以使用下面三种方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Logs a message object with the &#123;<span class=\"doctag\">@link</span> Level#DEBUG DEBUG&#125; level.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> message the message string to log.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">debug</span><span class=\"params\">(String message)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Logs a message with parameters at the &#123;<span class=\"doctag\">@link</span> Level#DEBUG DEBUG&#125; level.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> message the message to log; the format depends on the message factory.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> params parameters to the message.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #getMessageFactory()</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">debug</span><span class=\"params\">(String message, Object... params)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Logs a message with parameters which are only to be constructed if the logging level is the &#123;<span class=\"doctag\">@link</span> Level#DEBUG</span></span><br><span class=\"line\"><span class=\"comment\"> * DEBUG&#125; level.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> message the message to log; the format depends on the message factory.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> paramSuppliers An array of functions, which when called, produce the desired log message parameters.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2.4</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">debug</span><span class=\"params\">(String message, Supplier&lt;?&gt;... paramSuppliers)</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第一种：直接输出信息。\"><a href=\"#第一种：直接输出信息。\" class=\"headerlink\" title=\"第一种：直接输出信息。\"></a>第一种：直接输出信息。</h3><p>最不环保的写法，甚至新手的话可能会出现<code>logger.debug(&quot;A is &quot; + a + &quot;, B is&quot; + b + &quot;.&quot;);</code>这种写法，首先使用<code>+</code>来生成log文本是非常耗时的，其次，无论log输出的级别是否低于debug，这段字符串的处理都会被执行。</p>\n<h3 id=\"第二种：使用MessageFactory和参数生成log\"><a href=\"#第二种：使用MessageFactory和参数生成log\" class=\"headerlink\" title=\"第二种：使用MessageFactory和参数生成log\"></a>第二种：使用MessageFactory和参数生成log</h3><p>OpenJDK 8之前这么写是没问题的，使用MessageFactory来生成log既增加了可读性，又比字符串连接要节能。不过问题是log的生成还是总需要被执行。</p>\n<h3 id=\"第三种：使用Lambda\"><a href=\"#第三种：使用Lambda\" class=\"headerlink\" title=\"第三种：使用Lambda\"></a>第三种：使用Lambda</h3><p>doc中写了:<code>only to be constructed if the logging level is the DEBUG level.</code>，还需要解释吗？</p>\n<h3 id=\"那么，当需要把objectA写到debug里时\"><a href=\"#那么，当需要把objectA写到debug里时\" class=\"headerlink\" title=\"那么，当需要把objectA写到debug里时\"></a>那么，当需要把objectA写到debug里时</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logger.debug(objectA.toString()); <span class=\"comment\">// 一般写法</span></span><br><span class=\"line\"></span><br><span class=\"line\">logger.debug(() -&gt; objectA.toString()); <span class=\"comment\">// 略动脑筋的写法</span></span><br><span class=\"line\"></span><br><span class=\"line\">logger.debug(objectA::toString); <span class=\"comment\">//文艺写法</span></span><br></pre></td></tr></table></figure>\n","path":"2019/11/14/2019-11-14-log4j-using-lambda/","permalink":"https://xsun4231.github.io/2019/11/14/2019-11-14-log4j-using-lambda/","tags":[{"name":"Lambda","_id":"cm6m2r3x3002yzg9df8rf8wa6","slug":"Lambda","path":"tags/Lambda/","permalink":"https://xsun4231.github.io/tags/Lambda/","length":1}],"categories":[],"prev":{"title":"关于Java的stream执行顺序的笔记","date":"2019-11-20T04:39:55.000Z","slug":"2019-11-20-about-java-stream-lazy","published":true,"updated":"2025-01-31T15:39:12.949Z","_id":"cm6m2r3wt0016zg9d59xr4fwy","layout":"post","photos":[],"excerpt":"","path":"2019/11/20/2019-11-20-about-java-stream-lazy/","permalink":"https://xsun4231.github.io/2019/11/20/2019-11-20-about-java-stream-lazy/","__post":true},"next":{"title":"HAS-A 和 IS-A的区别","date":"2019-11-14T04:39:09.000Z","slug":"2019-11-14-has-a-and-is-a","published":true,"updated":"2025-01-31T15:39:12.949Z","_id":"cm6m2r3ws0011zg9d0b6y3lh8","layout":"post","photos":[],"excerpt":"","path":"2019/11/14/2019-11-14-has-a-and-is-a/","permalink":"https://xsun4231.github.io/2019/11/14/2019-11-14-has-a-and-is-a/","__post":true},"__post":true}