{"title":"HAS-A 和 IS-A的区别","date":"2019-11-14T04:39:09.000Z","source":"_posts/2019-11-14-has-a-and-is-a.md","raw":"---\ntitle: HAS-A 和 IS-A的区别\ntags:\n  - Inheritance\ndate: 2019-11-14 13:39:09\n---\n\n## 一句话总结\n\n不妨通过字面意思来理解，HAS-A 就是有什么的意思，而IS-A就是是什么的意思。在面向对象编程（OOP）中，类的继承就是IS-A的关系，简单来说就是“张三是个人，旺财是条狗”的意思。而类的对象使用，多数时候可以看作是HAS-A的关系，比如把身高，体重都看作是类的话，我们可以说“张三有身高，有体重”。\n\n* Inheritance 继承 IS-A\n* composition 组成 HAS-A\n\n## 举个栗子\n\n谷歌搜到的第一篇说明就很[浅显易懂](https://www.w3resource.com/java-tutorial/inheritance-composition-relationship.php)\n\n```Java\nClass Car{ ... } // 车是一个类 \n\nClass Engine{ ... } // 引擎也是一个类\n\nClass Toyota extends Car { // 丰田车作为一个有继承关系的子类，跟Car是IS-A关系，跟Engine是HAS-A的关系\n  private Engine;\n  ...\n}\n\n```","slug":"2019-11-14-has-a-and-is-a","published":true,"updated":"2025-01-31T15:39:12.949Z","_id":"cm6m2r3ws0011zg9d0b6y3lh8","comments":true,"layout":"post","photos":[],"html":"<h2 id=\"一句话总结\"><a href=\"#一句话总结\" class=\"headerlink\" title=\"一句话总结\"></a>一句话总结</h2><p>不妨通过字面意思来理解，HAS-A 就是有什么的意思，而IS-A就是是什么的意思。在面向对象编程（OOP）中，类的继承就是IS-A的关系，简单来说就是“张三是个人，旺财是条狗”的意思。而类的对象使用，多数时候可以看作是HAS-A的关系，比如把身高，体重都看作是类的话，我们可以说“张三有身高，有体重”。</p>\n<ul>\n<li>Inheritance 继承 IS-A</li>\n<li>composition 组成 HAS-A</li>\n</ul>\n<h2 id=\"举个栗子\"><a href=\"#举个栗子\" class=\"headerlink\" title=\"举个栗子\"></a>举个栗子</h2><p>谷歌搜到的第一篇说明就很<a href=\"https://www.w3resource.com/java-tutorial/inheritance-composition-relationship.php\">浅显易懂</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class Car&#123; ... &#125; <span class=\"comment\">// 车是一个类 </span></span><br><span class=\"line\"></span><br><span class=\"line\">Class Engine&#123; ... &#125; <span class=\"comment\">// 引擎也是一个类</span></span><br><span class=\"line\"></span><br><span class=\"line\">Class Toyota <span class=\"keyword\">extends</span> <span class=\"title class_\">Car</span> &#123; <span class=\"comment\">// 丰田车作为一个有继承关系的子类，跟Car是IS-A关系，跟Engine是HAS-A的关系</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> Engine;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"一句话总结\"><a href=\"#一句话总结\" class=\"headerlink\" title=\"一句话总结\"></a>一句话总结</h2><p>不妨通过字面意思来理解，HAS-A 就是有什么的意思，而IS-A就是是什么的意思。在面向对象编程（OOP）中，类的继承就是IS-A的关系，简单来说就是“张三是个人，旺财是条狗”的意思。而类的对象使用，多数时候可以看作是HAS-A的关系，比如把身高，体重都看作是类的话，我们可以说“张三有身高，有体重”。</p>\n<ul>\n<li>Inheritance 继承 IS-A</li>\n<li>composition 组成 HAS-A</li>\n</ul>\n<h2 id=\"举个栗子\"><a href=\"#举个栗子\" class=\"headerlink\" title=\"举个栗子\"></a>举个栗子</h2><p>谷歌搜到的第一篇说明就很<a href=\"https://www.w3resource.com/java-tutorial/inheritance-composition-relationship.php\">浅显易懂</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class Car&#123; ... &#125; <span class=\"comment\">// 车是一个类 </span></span><br><span class=\"line\"></span><br><span class=\"line\">Class Engine&#123; ... &#125; <span class=\"comment\">// 引擎也是一个类</span></span><br><span class=\"line\"></span><br><span class=\"line\">Class Toyota <span class=\"keyword\">extends</span> <span class=\"title class_\">Car</span> &#123; <span class=\"comment\">// 丰田车作为一个有继承关系的子类，跟Car是IS-A关系，跟Engine是HAS-A的关系</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> Engine;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","path":"2019/11/14/2019-11-14-has-a-and-is-a/","permalink":"https://xsun4231.github.io/2019/11/14/2019-11-14-has-a-and-is-a/","tags":[{"name":"Inheritance","_id":"cm6m2r3x2002tzg9d399l33m5","slug":"Inheritance","path":"tags/Inheritance/","permalink":"https://xsun4231.github.io/tags/Inheritance/","length":1}],"categories":[],"prev":{"title":"Log4j 节能写法","date":"2019-11-14T08:06:39.000Z","slug":"2019-11-14-log4j-using-lambda","published":true,"updated":"2025-01-31T15:39:12.949Z","_id":"cm6m2r3ws0014zg9d0vs0a2vv","layout":"post","photos":[],"excerpt":"","path":"2019/11/14/2019-11-14-log4j-using-lambda/","permalink":"https://xsun4231.github.io/2019/11/14/2019-11-14-log4j-using-lambda/","__post":true},"next":{"title":"Concurrency - Java的并发编程","date":"2019-08-05T01:30:11.000Z","slug":"2019-08-05-concurrency","published":true,"updated":"2025-01-31T15:39:12.848Z","_id":"cm6m2r3ws0012zg9dgsmmgyou","layout":"post","photos":[],"excerpt":"","path":"2019/08/05/2019-08-05-concurrency/","permalink":"https://xsun4231.github.io/2019/08/05/2019-08-05-concurrency/","__post":true},"__post":true}