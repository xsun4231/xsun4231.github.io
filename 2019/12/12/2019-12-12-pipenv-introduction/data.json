{"title":"pipenv 基本的介绍和使用方法","date":"2019-12-12T05:29:51.000Z","source":"_posts/2019-12-12-pipenv-introduction.md","raw":"---\ntitle: pipenv 基本的介绍和使用方法\ntags:\n  - Pipenv\n  - Python\ndate: 2019-12-12 14:29:51\n---\n\n\n> 根据项目需要，搞一个配置文件Pipfile，传到github里，完事儿。\n\n## 为什么要用pipenv\n\n首先，我们假设....算了，不扯那些没用的。做Python的开发，无论你用的什么工具，最麻烦的事儿应该莫过于包的管理。[pipenv](https://pypi.org/project/pipenv/)简单来说就是一个python官方推荐的包管理工具。  \n相比于pip等其他工具，pipenv最大的特点是可以根据项目，生成不同的环境，在ProjectA中设置的Pipfile不会影响到ProjectB,更不会影响到系统默认的pip列表。这个为项目定制的虚拟环境，我们称之为`shell`。  \n\n### 安装pipenv\n\n安装pipenv之前，首先确定系统里有以下两样东西：\n1. python\n2. pip\n\npipenv是通过pip安装的工具，所以执行  \n```\npip install pipenv \n```\n由于pipenv可以在系统里不同版本的Python间任意切换，所以执行pip的时候不同太在乎Python版本问题。\n\n### requirements.txt 和 Pipfile\npipenv 管理Python环境的配置文件是`Pipfile`，大致长这个样子：\n\n```Pipfile\n[[source]]\nname = \"pypi\"\nurl = \"https://pypi.org/simple\"\nverify_ssl = true\n\n[dev-packages]\n\n[packages]\npandas = \"==0.25.1\"\n\n[requires]\npython_version = \"3.7\"\n\n```\n\n我们可以直接写，也可以用`pipenv install`来生成默认的Pipfile, 不过还有个更方便的方法是直接由pip生成的requirements.txt配置文件来生成Pipfile。\n\n```\n# 首先在当前路径里使用pip生成requirements.txt\n\npip freeze > requirements.txt\n\n# 然后生成Pipfile\n# -r 的意思是将后面配置文件里的包添加到Pipfile里\n\npipenv install -r requirements.txt\n```\n\n### 指定Python版本\npipenv可以指定虚拟环境的python版本，随时通过修改Pipfile来切换（修改是通过命令行修改的意思，当然你要直接修改也没什么区别，但是不用命令来修改配置文件就会觉得很low啊）\n```\n## 使用下面的命令，从当前系统已经安装的不同版本的Python中选择一个\npipenv --python 版本号\n\n## 比如\npipenv --python 3.5\n\npipenv --python 3.7\n\npipenv --python 2.6\n\n```\n如果Pipfile中指定的Python版本在当前系统下不存在，之后启动虚拟环境时会跳出警告。\n\n### (耗时警报) 锁定\n更新Pipfile之后，启动虚拟环境之前，我们需要把Pipfile中列出的包安装好，或者删除已经不用的包，这个操作就是`pipenv lock`\n\n由于需要从服务器下载相应的包（这是我猜的，鬼晓得为什么这玩意儿怎么那么慢，[官方](https://github.com/pypa/pipenv/issues/1785)似乎也没有什么行之有效的办法）\n\n### 去吧 皮卡丘！\n都搞定之后，`pipenv shell`跑起来，我们就进入定制的虚拟环境了。\n\n### 直接看这里就可以了\n\n说了那么老多，其实安装好pipenv之后，直接一个`pipenv -h`查看help文档就可以了\n```\nOptions:\n  --where             Output project home information.\n  --venv              Output virtualenv information.\n  --py                Output Python interpreter information.\n  --envs              Output Environment Variable options.\n  --rm                Remove the virtualenv.\n  --bare              Minimal output.\n  --completion        Output completion (to be eval'd).\n  --man               Display manpage.\n  --support           Output diagnostic information for use in GitHub issues.\n  --site-packages     Enable site-packages for the virtualenv.  [env var:\n                      PIPENV_SITE_PACKAGES]\n  --python TEXT       Specify which version of Python virtualenv should use.\n  --three / --two     Use Python 3/2 when creating virtualenv.\n  --clear             Clears caches (pipenv, pip, and pip-tools).  [env var:\n                      PIPENV_CLEAR]\n  -v, --verbose       Verbose mode.\n  --pypi-mirror TEXT  Specify a PyPI mirror.\n  --version           Show the version and exit.\n  -h, --help          Show this message and exit.\n\n\nUsage Examples:\n   Create a new project using Python 3.7, specifically:\n   $ pipenv --python 3.7\n\n   Remove project virtualenv (inferred from current directory):\n   $ pipenv --rm\n\n   Install all dependencies for a project (including dev):\n   $ pipenv install --dev\n\n   Create a lockfile containing pre-releases:\n   $ pipenv lock --pre\n\n   Show a graph of your installed dependencies:\n   $ pipenv graph\n\n   Check your installed dependencies for security vulnerabilities:\n   $ pipenv check\n\n   Install a local setup.py into your virtual environment/Pipfile:\n   $ pipenv install -e .\n\n   Use a lower-level pip command:\n   $ pipenv run pip freeze\n\nCommands:\n  check      Checks for security vulnerabilities and against PEP 508 markers\n             provided in Pipfile.\n  clean      Uninstalls all packages not specified in Pipfile.lock.\n  graph      Displays currently-installed dependency graph information.\n  install    Installs provided packages and adds them to Pipfile, or (if no\n             packages are given), installs all packages from Pipfile.\n  lock       Generates Pipfile.lock.\n  open       View a given module in your editor.\n  run        Spawns a command installed into the virtualenv.\n  shell      Spawns a shell within the virtualenv.\n  sync       Installs all packages specified in Pipfile.lock.\n  uninstall  Un-installs a provided package and removes it from Pipfile.\n  update     Runs lock, then sync.\n```","slug":"2019-12-12-pipenv-introduction","published":true,"updated":"2025-01-31T15:39:12.949Z","_id":"cm6m2r3wu001bzg9d59yx8akf","comments":true,"layout":"post","photos":[],"html":"<blockquote>\n<p>根据项目需要，搞一个配置文件Pipfile，传到github里，完事儿。</p>\n</blockquote>\n<h2 id=\"为什么要用pipenv\"><a href=\"#为什么要用pipenv\" class=\"headerlink\" title=\"为什么要用pipenv\"></a>为什么要用pipenv</h2><p>首先，我们假设….算了，不扯那些没用的。做Python的开发，无论你用的什么工具，最麻烦的事儿应该莫过于包的管理。<a href=\"https://pypi.org/project/pipenv/\">pipenv</a>简单来说就是一个python官方推荐的包管理工具。<br>相比于pip等其他工具，pipenv最大的特点是可以根据项目，生成不同的环境，在ProjectA中设置的Pipfile不会影响到ProjectB,更不会影响到系统默认的pip列表。这个为项目定制的虚拟环境，我们称之为<code>shell</code>。  </p>\n<h3 id=\"安装pipenv\"><a href=\"#安装pipenv\" class=\"headerlink\" title=\"安装pipenv\"></a>安装pipenv</h3><p>安装pipenv之前，首先确定系统里有以下两样东西：</p>\n<ol>\n<li>python</li>\n<li>pip</li>\n</ol>\n<p>pipenv是通过pip安装的工具，所以执行  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pipenv </span><br></pre></td></tr></table></figure>\n<p>由于pipenv可以在系统里不同版本的Python间任意切换，所以执行pip的时候不同太在乎Python版本问题。</p>\n<h3 id=\"requirements-txt-和-Pipfile\"><a href=\"#requirements-txt-和-Pipfile\" class=\"headerlink\" title=\"requirements.txt 和 Pipfile\"></a>requirements.txt 和 Pipfile</h3><p>pipenv 管理Python环境的配置文件是<code>Pipfile</code>，大致长这个样子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[source]]</span><br><span class=\"line\">name = &quot;pypi&quot;</span><br><span class=\"line\">url = &quot;https://pypi.org/simple&quot;</span><br><span class=\"line\">verify_ssl = true</span><br><span class=\"line\"></span><br><span class=\"line\">[dev-packages]</span><br><span class=\"line\"></span><br><span class=\"line\">[packages]</span><br><span class=\"line\">pandas = &quot;==0.25.1&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">[requires]</span><br><span class=\"line\">python_version = &quot;3.7&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>我们可以直接写，也可以用<code>pipenv install</code>来生成默认的Pipfile, 不过还有个更方便的方法是直接由pip生成的requirements.txt配置文件来生成Pipfile。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 首先在当前路径里使用pip生成requirements.txt</span><br><span class=\"line\"></span><br><span class=\"line\">pip freeze &gt; requirements.txt</span><br><span class=\"line\"></span><br><span class=\"line\"># 然后生成Pipfile</span><br><span class=\"line\"># -r 的意思是将后面配置文件里的包添加到Pipfile里</span><br><span class=\"line\"></span><br><span class=\"line\">pipenv install -r requirements.txt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"指定Python版本\"><a href=\"#指定Python版本\" class=\"headerlink\" title=\"指定Python版本\"></a>指定Python版本</h3><p>pipenv可以指定虚拟环境的python版本，随时通过修改Pipfile来切换（修改是通过命令行修改的意思，当然你要直接修改也没什么区别，但是不用命令来修改配置文件就会觉得很low啊）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 使用下面的命令，从当前系统已经安装的不同版本的Python中选择一个</span><br><span class=\"line\">pipenv --python 版本号</span><br><span class=\"line\"></span><br><span class=\"line\">## 比如</span><br><span class=\"line\">pipenv --python 3.5</span><br><span class=\"line\"></span><br><span class=\"line\">pipenv --python 3.7</span><br><span class=\"line\"></span><br><span class=\"line\">pipenv --python 2.6</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>如果Pipfile中指定的Python版本在当前系统下不存在，之后启动虚拟环境时会跳出警告。</p>\n<h3 id=\"耗时警报-锁定\"><a href=\"#耗时警报-锁定\" class=\"headerlink\" title=\"(耗时警报) 锁定\"></a>(耗时警报) 锁定</h3><p>更新Pipfile之后，启动虚拟环境之前，我们需要把Pipfile中列出的包安装好，或者删除已经不用的包，这个操作就是<code>pipenv lock</code></p>\n<p>由于需要从服务器下载相应的包（这是我猜的，鬼晓得为什么这玩意儿怎么那么慢，<a href=\"https://github.com/pypa/pipenv/issues/1785\">官方</a>似乎也没有什么行之有效的办法）</p>\n<h3 id=\"去吧-皮卡丘！\"><a href=\"#去吧-皮卡丘！\" class=\"headerlink\" title=\"去吧 皮卡丘！\"></a>去吧 皮卡丘！</h3><p>都搞定之后，<code>pipenv shell</code>跑起来，我们就进入定制的虚拟环境了。</p>\n<h3 id=\"直接看这里就可以了\"><a href=\"#直接看这里就可以了\" class=\"headerlink\" title=\"直接看这里就可以了\"></a>直接看这里就可以了</h3><p>说了那么老多，其实安装好pipenv之后，直接一个<code>pipenv -h</code>查看help文档就可以了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Options:</span><br><span class=\"line\">  --where             Output project home information.</span><br><span class=\"line\">  --venv              Output virtualenv information.</span><br><span class=\"line\">  --py                Output Python interpreter information.</span><br><span class=\"line\">  --envs              Output Environment Variable options.</span><br><span class=\"line\">  --rm                Remove the virtualenv.</span><br><span class=\"line\">  --bare              Minimal output.</span><br><span class=\"line\">  --completion        Output completion (to be eval&#x27;d).</span><br><span class=\"line\">  --man               Display manpage.</span><br><span class=\"line\">  --support           Output diagnostic information for use in GitHub issues.</span><br><span class=\"line\">  --site-packages     Enable site-packages for the virtualenv.  [env var:</span><br><span class=\"line\">                      PIPENV_SITE_PACKAGES]</span><br><span class=\"line\">  --python TEXT       Specify which version of Python virtualenv should use.</span><br><span class=\"line\">  --three / --two     Use Python 3/2 when creating virtualenv.</span><br><span class=\"line\">  --clear             Clears caches (pipenv, pip, and pip-tools).  [env var:</span><br><span class=\"line\">                      PIPENV_CLEAR]</span><br><span class=\"line\">  -v, --verbose       Verbose mode.</span><br><span class=\"line\">  --pypi-mirror TEXT  Specify a PyPI mirror.</span><br><span class=\"line\">  --version           Show the version and exit.</span><br><span class=\"line\">  -h, --help          Show this message and exit.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Usage Examples:</span><br><span class=\"line\">   Create a new project using Python 3.7, specifically:</span><br><span class=\"line\">   $ pipenv --python 3.7</span><br><span class=\"line\"></span><br><span class=\"line\">   Remove project virtualenv (inferred from current directory):</span><br><span class=\"line\">   $ pipenv --rm</span><br><span class=\"line\"></span><br><span class=\"line\">   Install all dependencies for a project (including dev):</span><br><span class=\"line\">   $ pipenv install --dev</span><br><span class=\"line\"></span><br><span class=\"line\">   Create a lockfile containing pre-releases:</span><br><span class=\"line\">   $ pipenv lock --pre</span><br><span class=\"line\"></span><br><span class=\"line\">   Show a graph of your installed dependencies:</span><br><span class=\"line\">   $ pipenv graph</span><br><span class=\"line\"></span><br><span class=\"line\">   Check your installed dependencies for security vulnerabilities:</span><br><span class=\"line\">   $ pipenv check</span><br><span class=\"line\"></span><br><span class=\"line\">   Install a local setup.py into your virtual environment/Pipfile:</span><br><span class=\"line\">   $ pipenv install -e .</span><br><span class=\"line\"></span><br><span class=\"line\">   Use a lower-level pip command:</span><br><span class=\"line\">   $ pipenv run pip freeze</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\">  check      Checks for security vulnerabilities and against PEP 508 markers</span><br><span class=\"line\">             provided in Pipfile.</span><br><span class=\"line\">  clean      Uninstalls all packages not specified in Pipfile.lock.</span><br><span class=\"line\">  graph      Displays currently-installed dependency graph information.</span><br><span class=\"line\">  install    Installs provided packages and adds them to Pipfile, or (if no</span><br><span class=\"line\">             packages are given), installs all packages from Pipfile.</span><br><span class=\"line\">  lock       Generates Pipfile.lock.</span><br><span class=\"line\">  open       View a given module in your editor.</span><br><span class=\"line\">  run        Spawns a command installed into the virtualenv.</span><br><span class=\"line\">  shell      Spawns a shell within the virtualenv.</span><br><span class=\"line\">  sync       Installs all packages specified in Pipfile.lock.</span><br><span class=\"line\">  uninstall  Un-installs a provided package and removes it from Pipfile.</span><br><span class=\"line\">  update     Runs lock, then sync.</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<blockquote>\n<p>根据项目需要，搞一个配置文件Pipfile，传到github里，完事儿。</p>\n</blockquote>\n<h2 id=\"为什么要用pipenv\"><a href=\"#为什么要用pipenv\" class=\"headerlink\" title=\"为什么要用pipenv\"></a>为什么要用pipenv</h2><p>首先，我们假设….算了，不扯那些没用的。做Python的开发，无论你用的什么工具，最麻烦的事儿应该莫过于包的管理。<a href=\"https://pypi.org/project/pipenv/\">pipenv</a>简单来说就是一个python官方推荐的包管理工具。<br>相比于pip等其他工具，pipenv最大的特点是可以根据项目，生成不同的环境，在ProjectA中设置的Pipfile不会影响到ProjectB,更不会影响到系统默认的pip列表。这个为项目定制的虚拟环境，我们称之为<code>shell</code>。  </p>\n<h3 id=\"安装pipenv\"><a href=\"#安装pipenv\" class=\"headerlink\" title=\"安装pipenv\"></a>安装pipenv</h3><p>安装pipenv之前，首先确定系统里有以下两样东西：</p>\n<ol>\n<li>python</li>\n<li>pip</li>\n</ol>\n<p>pipenv是通过pip安装的工具，所以执行  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pipenv </span><br></pre></td></tr></table></figure>\n<p>由于pipenv可以在系统里不同版本的Python间任意切换，所以执行pip的时候不同太在乎Python版本问题。</p>\n<h3 id=\"requirements-txt-和-Pipfile\"><a href=\"#requirements-txt-和-Pipfile\" class=\"headerlink\" title=\"requirements.txt 和 Pipfile\"></a>requirements.txt 和 Pipfile</h3><p>pipenv 管理Python环境的配置文件是<code>Pipfile</code>，大致长这个样子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[source]]</span><br><span class=\"line\">name = &quot;pypi&quot;</span><br><span class=\"line\">url = &quot;https://pypi.org/simple&quot;</span><br><span class=\"line\">verify_ssl = true</span><br><span class=\"line\"></span><br><span class=\"line\">[dev-packages]</span><br><span class=\"line\"></span><br><span class=\"line\">[packages]</span><br><span class=\"line\">pandas = &quot;==0.25.1&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">[requires]</span><br><span class=\"line\">python_version = &quot;3.7&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>我们可以直接写，也可以用<code>pipenv install</code>来生成默认的Pipfile, 不过还有个更方便的方法是直接由pip生成的requirements.txt配置文件来生成Pipfile。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 首先在当前路径里使用pip生成requirements.txt</span><br><span class=\"line\"></span><br><span class=\"line\">pip freeze &gt; requirements.txt</span><br><span class=\"line\"></span><br><span class=\"line\"># 然后生成Pipfile</span><br><span class=\"line\"># -r 的意思是将后面配置文件里的包添加到Pipfile里</span><br><span class=\"line\"></span><br><span class=\"line\">pipenv install -r requirements.txt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"指定Python版本\"><a href=\"#指定Python版本\" class=\"headerlink\" title=\"指定Python版本\"></a>指定Python版本</h3><p>pipenv可以指定虚拟环境的python版本，随时通过修改Pipfile来切换（修改是通过命令行修改的意思，当然你要直接修改也没什么区别，但是不用命令来修改配置文件就会觉得很low啊）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 使用下面的命令，从当前系统已经安装的不同版本的Python中选择一个</span><br><span class=\"line\">pipenv --python 版本号</span><br><span class=\"line\"></span><br><span class=\"line\">## 比如</span><br><span class=\"line\">pipenv --python 3.5</span><br><span class=\"line\"></span><br><span class=\"line\">pipenv --python 3.7</span><br><span class=\"line\"></span><br><span class=\"line\">pipenv --python 2.6</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>如果Pipfile中指定的Python版本在当前系统下不存在，之后启动虚拟环境时会跳出警告。</p>\n<h3 id=\"耗时警报-锁定\"><a href=\"#耗时警报-锁定\" class=\"headerlink\" title=\"(耗时警报) 锁定\"></a>(耗时警报) 锁定</h3><p>更新Pipfile之后，启动虚拟环境之前，我们需要把Pipfile中列出的包安装好，或者删除已经不用的包，这个操作就是<code>pipenv lock</code></p>\n<p>由于需要从服务器下载相应的包（这是我猜的，鬼晓得为什么这玩意儿怎么那么慢，<a href=\"https://github.com/pypa/pipenv/issues/1785\">官方</a>似乎也没有什么行之有效的办法）</p>\n<h3 id=\"去吧-皮卡丘！\"><a href=\"#去吧-皮卡丘！\" class=\"headerlink\" title=\"去吧 皮卡丘！\"></a>去吧 皮卡丘！</h3><p>都搞定之后，<code>pipenv shell</code>跑起来，我们就进入定制的虚拟环境了。</p>\n<h3 id=\"直接看这里就可以了\"><a href=\"#直接看这里就可以了\" class=\"headerlink\" title=\"直接看这里就可以了\"></a>直接看这里就可以了</h3><p>说了那么老多，其实安装好pipenv之后，直接一个<code>pipenv -h</code>查看help文档就可以了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Options:</span><br><span class=\"line\">  --where             Output project home information.</span><br><span class=\"line\">  --venv              Output virtualenv information.</span><br><span class=\"line\">  --py                Output Python interpreter information.</span><br><span class=\"line\">  --envs              Output Environment Variable options.</span><br><span class=\"line\">  --rm                Remove the virtualenv.</span><br><span class=\"line\">  --bare              Minimal output.</span><br><span class=\"line\">  --completion        Output completion (to be eval&#x27;d).</span><br><span class=\"line\">  --man               Display manpage.</span><br><span class=\"line\">  --support           Output diagnostic information for use in GitHub issues.</span><br><span class=\"line\">  --site-packages     Enable site-packages for the virtualenv.  [env var:</span><br><span class=\"line\">                      PIPENV_SITE_PACKAGES]</span><br><span class=\"line\">  --python TEXT       Specify which version of Python virtualenv should use.</span><br><span class=\"line\">  --three / --two     Use Python 3/2 when creating virtualenv.</span><br><span class=\"line\">  --clear             Clears caches (pipenv, pip, and pip-tools).  [env var:</span><br><span class=\"line\">                      PIPENV_CLEAR]</span><br><span class=\"line\">  -v, --verbose       Verbose mode.</span><br><span class=\"line\">  --pypi-mirror TEXT  Specify a PyPI mirror.</span><br><span class=\"line\">  --version           Show the version and exit.</span><br><span class=\"line\">  -h, --help          Show this message and exit.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Usage Examples:</span><br><span class=\"line\">   Create a new project using Python 3.7, specifically:</span><br><span class=\"line\">   $ pipenv --python 3.7</span><br><span class=\"line\"></span><br><span class=\"line\">   Remove project virtualenv (inferred from current directory):</span><br><span class=\"line\">   $ pipenv --rm</span><br><span class=\"line\"></span><br><span class=\"line\">   Install all dependencies for a project (including dev):</span><br><span class=\"line\">   $ pipenv install --dev</span><br><span class=\"line\"></span><br><span class=\"line\">   Create a lockfile containing pre-releases:</span><br><span class=\"line\">   $ pipenv lock --pre</span><br><span class=\"line\"></span><br><span class=\"line\">   Show a graph of your installed dependencies:</span><br><span class=\"line\">   $ pipenv graph</span><br><span class=\"line\"></span><br><span class=\"line\">   Check your installed dependencies for security vulnerabilities:</span><br><span class=\"line\">   $ pipenv check</span><br><span class=\"line\"></span><br><span class=\"line\">   Install a local setup.py into your virtual environment/Pipfile:</span><br><span class=\"line\">   $ pipenv install -e .</span><br><span class=\"line\"></span><br><span class=\"line\">   Use a lower-level pip command:</span><br><span class=\"line\">   $ pipenv run pip freeze</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\">  check      Checks for security vulnerabilities and against PEP 508 markers</span><br><span class=\"line\">             provided in Pipfile.</span><br><span class=\"line\">  clean      Uninstalls all packages not specified in Pipfile.lock.</span><br><span class=\"line\">  graph      Displays currently-installed dependency graph information.</span><br><span class=\"line\">  install    Installs provided packages and adds them to Pipfile, or (if no</span><br><span class=\"line\">             packages are given), installs all packages from Pipfile.</span><br><span class=\"line\">  lock       Generates Pipfile.lock.</span><br><span class=\"line\">  open       View a given module in your editor.</span><br><span class=\"line\">  run        Spawns a command installed into the virtualenv.</span><br><span class=\"line\">  shell      Spawns a shell within the virtualenv.</span><br><span class=\"line\">  sync       Installs all packages specified in Pipfile.lock.</span><br><span class=\"line\">  uninstall  Un-installs a provided package and removes it from Pipfile.</span><br><span class=\"line\">  update     Runs lock, then sync.</span><br></pre></td></tr></table></figure>","path":"2019/12/12/2019-12-12-pipenv-introduction/","permalink":"https://xsun4231.github.io/2019/12/12/2019-12-12-pipenv-introduction/","tags":[{"name":"Python","_id":"cm6m2r3wx001qzg9d4jbjg7nc","slug":"Python","path":"tags/Python/","permalink":"https://xsun4231.github.io/tags/Python/","length":4},{"name":"Pipenv","_id":"cm6m2r3x30038zg9d3in2ekdv","slug":"Pipenv","path":"tags/Pipenv/","permalink":"https://xsun4231.github.io/tags/Pipenv/","length":1}],"categories":[],"prev":{"title":"CSS 文字对齐","date":"2020-01-16T12:09:17.000Z","slug":"2020-01-16-css-vertical-align","published":true,"updated":"2025-01-31T15:39:12.949Z","_id":"cm6m2r3wu001czg9dh2q638pm","layout":"post","photos":[],"excerpt":"","path":"2020/01/16/2020-01-16-css-vertical-align/","permalink":"https://xsun4231.github.io/2020/01/16/2020-01-16-css-vertical-align/","__post":true},"next":{"title":"均方误差和决定系数","date":"2019-11-28T05:00:58.000Z","slug":"2019-11-28-measures-for-in-sample-evaluation","published":true,"updated":"2025-01-31T15:39:12.949Z","_id":"cm6m2r3wt0019zg9df2jy4nv7","layout":"post","photos":[],"excerpt":"","path":"2019/11/28/2019-11-28-measures-for-in-sample-evaluation/","permalink":"https://xsun4231.github.io/2019/11/28/2019-11-28-measures-for-in-sample-evaluation/","__post":true},"__post":true}